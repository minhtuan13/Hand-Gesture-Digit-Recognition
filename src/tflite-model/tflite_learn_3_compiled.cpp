/*
 * Copyright (c) 2024 EdgeImpulse Inc.
 *
 * Generated by Edge Impulse and licensed under the applicable Edge Impulse
 * Terms of Service. Community and Professional Terms of Service
 * (https://docs.edgeimpulse.com/page/terms-of-service) or Enterprise Terms of
 * Service (https://docs.edgeimpulse.com/page/enterprise-terms-of-service),
 * according to your product plan subscription (the “License”).
 *
 * This software, documentation and other associated files (collectively referred
 * to as the “Software”) is a single SDK variation generated by the Edge Impulse
 * platform and requires an active paid Edge Impulse subscription to use this
 * Software for any purpose.
 *
 * You may NOT use this Software unless you have an active Edge Impulse subscription
 * that meets the eligibility requirements for the applicable License, subject to
 * your full and continued compliance with the terms and conditions of the License,
 * including without limitation any usage restrictions under the applicable License.
 *
 * If you do not have an active Edge Impulse product plan subscription, or if use
 * of this Software exceeds the usage limitations of your Edge Impulse product plan
 * subscription, you are not permitted to use this Software and must immediately
 * delete and erase all copies of this Software within your control or possession.
 * Edge Impulse reserves all rights and remedies available to enforce its rights.
 *
 * Unless required by applicable law or agreed to in writing, the Software is
 * distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND,
 * either express or implied. See the License for the specific language governing
 * permissions, disclaimers and limitations under the License.
 */
// Generated on: 12.01.2025 09:00:16

#include <stdio.h>
#include <stdlib.h>
#include "edge-impulse-sdk/tensorflow/lite/c/builtin_op_data.h"
#include "edge-impulse-sdk/tensorflow/lite/c/common.h"
#include "edge-impulse-sdk/tensorflow/lite/micro/micro_mutable_op_resolver.h"
#include "edge-impulse-sdk/porting/ei_classifier_porting.h"

#if EI_CLASSIFIER_PRINT_STATE
#if defined(__cplusplus) && EI_C_LINKAGE == 1
extern "C" {
    extern void ei_printf(const char *format, ...);
}
#else
extern void ei_printf(const char *format, ...);
#endif
#endif

#define STRINGIZE(x) #x
#define STRINGIZE_VALUE_OF(x) STRINGIZE(x)

#if defined (__GNUC__)  /* GNU compiler */
#define ALIGN(X) __attribute__((aligned(X)))
#define DEFINE_SECTION(x) __attribute__((section(x)))
#elif defined (_MSC_VER)
#define ALIGN(X) __declspec(align(X))
#elif defined (__TASKING__) /* TASKING Compiler */
#define ALIGN(X) __align(X)
#define DEFINE_SECTION(x) __attribute__((section(x)))
#elif defined (__ARMCC_VERSION) /* Arm Compiler */
#define ALIGN(X) __ALIGNED(x)
#define DEFINE_SECTION(x) __attribute__((section(x)))
#elif defined (__ICCARM__) /* IAR Compiler */
#define ALIGN(x) __attribute__((aligned(x)))
#define DEFINE_SECTION(x) __attribute__((section(x)))
#elif defined (__clang__) /* LLVM/Clang Compiler */
#define ALIGN(X) __ALIGNED(x)
#define DEFINE_SECTION(x) __attribute__((section(x)))
#endif

#if defined(EI_MODEL_SECTION) && (defined(__GNUC__) || defined(__clang__))
#define MODEL_SECTION(X) __attribute__((section(STRINGIZE_VALUE_OF(X))))
#else
#define MODEL_SECTION(X)
#endif

#ifndef EI_MAX_SCRATCH_BUFFER_COUNT
#ifndef CONFIG_IDF_TARGET_ESP32S3
#define EI_MAX_SCRATCH_BUFFER_COUNT 14
#else
#define EI_MAX_SCRATCH_BUFFER_COUNT 28
#endif // CONFIG_IDF_TARGET_ESP32S3
#endif // EI_MAX_SCRATCH_BUFFER_COUNT

#ifndef EI_MAX_OVERFLOW_BUFFER_COUNT
#define EI_MAX_OVERFLOW_BUFFER_COUNT 10
#endif // EI_MAX_OVERFLOW_BUFFER_COUNT

using namespace tflite;
using namespace tflite::ops;
using namespace tflite::ops::micro;

namespace {

#if defined(EI_CLASSIFIER_ALLOCATION_STATIC_HIMAX) || defined(EI_CLASSIFIER_ALLOCATION_STATIC_HIMAX_GNU)
constexpr int kTensorArenaSize = 242720;
#else
constexpr int kTensorArenaSize = 241696;
#endif

#if defined(EI_CLASSIFIER_ALLOCATION_STATIC)
#if defined (EI_TENSOR_ARENA_LOCATION)
uint8_t tensor_arena[kTensorArenaSize] ALIGN(16) DEFINE_SECTION(STRINGIZE_VALUE_OF(EI_TENSOR_ARENA_LOCATION));
#else
uint8_t tensor_arena[kTensorArenaSize] ALIGN(16);
#endif
#elif defined(EI_CLASSIFIER_ALLOCATION_STATIC_HIMAX)
#pragma Bss(".tensor_arena")
uint8_t tensor_arena[kTensorArenaSize] ALIGN(16);
#pragma Bss()
#elif defined(EI_CLASSIFIER_ALLOCATION_STATIC_HIMAX_GNU)
uint8_t tensor_arena[kTensorArenaSize] ALIGN(16) __attribute__((section(".tensor_arena")));
#else
#define EI_CLASSIFIER_ALLOCATION_HEAP 1
uint8_t* tensor_arena = NULL;
#endif

static uint8_t* tensor_boundary;
static uint8_t* current_location;

template <int SZ, class T> struct TfArray {
  int sz; T elem[SZ];
};

enum used_operators_e {
  OP_CONV_2D, OP_DEPTHWISE_CONV_2D, OP_PAD, OP_ADD, OP_SOFTMAX,  OP_LAST
};

struct TensorInfo_t { // subset of TfLiteTensor used for initialization from constant memory
  TfLiteAllocationType allocation_type;
  TfLiteType type;
  void* data;
  TfLiteIntArray* dims;
  size_t bytes;
  TfLiteQuantization quantization;
};

typedef struct {
  TfLiteTensor tensor;
  int16_t index;
} TfLiteTensorWithIndex;

typedef struct {
  TfLiteEvalTensor tensor;
  int16_t index;
} TfLiteEvalTensorWithIndex;

TfLiteContext ctx{};
static const int MAX_TFL_TENSOR_COUNT = 4;
static TfLiteTensorWithIndex tflTensors[MAX_TFL_TENSOR_COUNT];
static const int MAX_TFL_EVAL_COUNT = 4;
static TfLiteEvalTensorWithIndex tflEvalTensors[MAX_TFL_EVAL_COUNT];
TfLiteRegistration registrations[OP_LAST];

namespace g0 {
const TfArray<4, int> tensor_dimension0 = { 4, { 1,96,96,3 } };
const TfArray<1, float> quant0_scale = { 1, { 0.0039215688593685627, } };
const TfArray<1, int> quant0_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant0 = { (TfLiteFloatArray*)&quant0_scale, (TfLiteIntArray*)&quant0_zero, 0 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int32_t tensor_data1[4*2] = { 
  0, 0, 
  0, 1, 
  0, 1, 
  0, 0, 
};
const TfArray<2, int> tensor_dimension1 = { 2, { 4,2 } };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int32_t tensor_data2[11] = { 30129, -23923, -22596, -21564, -29979, -19474, -15465, -19414, -34943, -27748, -24581, };
const TfArray<1, int> tensor_dimension2 = { 1, { 11 } };
const TfArray<11, float> quant2_scale = { 11, { 0.00027771436725743115, 0.00033121934393420815, 0.00034089758992195129, 0.00035660539288073778, 0.00025602281675674021, 0.00038974633207544684, 0.00050187151646241546, 0.00039660115726292133, 0.00021817001106683165, 0.00028600526275113225, 0.00030525517649948597, } };
const TfArray<11, int> quant2_zero = { 11, { 0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant2 = { (TfLiteFloatArray*)&quant2_scale, (TfLiteIntArray*)&quant2_zero, 0 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int8_t tensor_data3[11*1*1*32] = { 
  /* [0][0][][] */ 50,70,-15,49,25,-55,77,-79,-85,50,-69,-98,31,-50,-13,-76,9,75,-107,-21,5,-127,-114,-108,57,54,-38,-53,-96,42,36,-34, 
  /* [1][0][][] */ 23,-31,97,-127,50,24,60,-24,-19,28,76,-7,20,-15,-13,-38,5,-55,37,67,-40,49,-26,0,43,53,-53,28,-10,41,45,43, 
  /* [2][0][][] */ -17,18,79,3,-2,105,11,27,6,-50,98,4,-31,24,-78,30,-27,50,-59,6,23,-127,-58,-37,-31,38,70,61,92,-10,26,63, 
  /* [3][0][][] */ 33,28,127,-9,111,-38,-33,7,25,-48,-3,-4,-63,-29,75,87,51,34,26,16,54,2,72,-37,41,-32,24,40,-22,14,45,-30, 
  /* [4][0][][] */ 12,79,101,-124,-12,-76,43,45,120,20,27,-59,105,-67,-90,-64,-23,9,-113,101,-32,56,-56,48,50,2,8,30,9,127,-80,120, 
  /* [5][0][][] */ 26,68,7,-50,58,-7,-127,12,6,-13,-37,44,33,83,-61,78,-4,-2,-72,-8,-36,-125,-17,-38,62,-40,16,85,-30,45,-63,55, 
  /* [6][0][][] */ 55,3,22,-127,-13,-37,37,-39,14,26,-1,68,0,35,1,-39,0,25,-18,-13,14,28,-29,8,-34,25,21,-16,-20,-29,0,9, 
  /* [7][0][][] */ -38,6,18,-12,67,69,4,66,5,33,-34,127,-26,9,-17,-24,77,54,21,15,-30,-81,-42,75,58,-1,-24,-36,-1,-36,38,74, 
  /* [8][0][][] */ -40,10,39,-60,6,17,85,-28,47,-76,24,-58,55,-4,9,118,121,-53,-102,24,-7,107,-2,6,3,124,-50,-33,-127,48,-94,-124, 
  /* [9][0][][] */ -41,-24,-16,-96,-27,24,98,47,16,2,85,96,82,88,-8,66,-20,-66,81,16,29,-29,29,34,24,-26,12,29,-54,0,-98,-127, 
  /* [10][0][][] */ -31,4,47,45,48,74,-42,32,11,-21,6,-51,-1,127,14,-3,-48,30,-17,-4,-56,-58,88,20,5,-13,-23,-37,72,-45,15,-65, 
};
const TfArray<4, int> tensor_dimension3 = { 4, { 11,1,1,32 } };
const TfArray<11, float> quant3_scale = { 11, { 0.0035947731230407953, 0.004287349060177803, 0.0044126254506409168, 0.0046159494668245316, 0.0033139947336167097, 0.0050449301488697529, 0.0064962939359247684, 0.0051336600445210934, 0.0028240226674824953, 0.0037020917516201735, 0.0039512650109827518, } };
const TfArray<11, int> quant3_zero = { 11, { 0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant3 = { (TfLiteFloatArray*)&quant3_scale, (TfLiteIntArray*)&quant3_zero, 0 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int32_t tensor_data4[32] = { -1004, -1062, -277, -574, -1132, -1321, 188, -1778, -1697, -2027, -1098, -140, -2149, -72, -1546, -961, -1637, -1627, -1542, -1210, -1924, -705, -1005, -812, -1219, -1471, -1461, -2063, 158, -2612, -1583, 143, };
const TfArray<1, int> tensor_dimension4 = { 1, { 32 } };
const TfArray<32, float> quant4_scale = { 32, { 7.3518400313332677e-05, 5.3735318942926824e-05, 0.00013346216292120516, 0.00012242015509400517, 6.8956382165197283e-05, 6.1483427998609841e-05, 0.00019420254102442414, 6.6986140154767781e-05, 6.1072016251273453e-05, 6.2613988120574504e-05, 6.4729159930720925e-05, 0.00019907196110580117, 6.1333885241765529e-05, 9.3974973424337804e-05, 5.5482589232269675e-05, 0.00014678754087071866, 5.8756566431839019e-05, 5.5335814977297559e-05, 5.4291314881993458e-05, 6.6929540480487049e-05, 5.4969135817373171e-05, 0.00015180774789769202, 5.6947483244584873e-05, 9.8964286735281348e-05, 6.2633931520394981e-05, 6.6015032643917948e-05, 6.0436970670707524e-05, 6.0806625697296113e-05, 0.0001577818620717153, 5.9668924222933128e-05, 5.4359388741431758e-05, 0.00012750532187055796, } };
const TfArray<32, int> quant4_zero = { 32, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant4 = { (TfLiteFloatArray*)&quant4_scale, (TfLiteIntArray*)&quant4_zero, 0 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int8_t tensor_data5[32*1*1*96] = { 
  /* [0][0][][] */ -39,-59,38,-27,50,-65,-76,-55,-4,-86,-82,-33,21,-13,-48,0,-47,-47,-68,-31,-53,-87,-21,42,-109,-17,23,-48,53,4,-34,-93,33,-63,-73,4,-87,-71,-67,-2,19,-73,-76,42,1,-80,47,-30,-9,-46,-51,45,-60,-60,-61,38,-53,19,24,-88,-61,23,-9,4,-12,-16,17,33,21,40,56,-84,61,-84,6,25,-71,-14,-60,-19,10,-3,46,-28,-59,-35,-73,33,6,48,-58,-127,-11,22,-2,3, 
  /* [1][0][][] */ -74,39,-87,-53,-40,-28,-8,-9,12,-97,-104,37,-39,-37,-3,30,58,-60,-48,80,-73,-40,5,-17,16,23,-60,54,-44,17,71,-40,17,76,-89,57,13,34,-62,-87,-70,-7,-21,-73,-35,26,-32,-90,-37,-127,30,32,-54,49,-87,-52,-79,40,50,36,-103,41,-43,-63,-77,14,12,-34,48,2,-42,-19,-127,79,-57,3,82,-64,-66,39,-85,30,-89,-77,6,82,-73,-51,28,31,-23,41,40,59,-16,-23, 
  /* [2][0][][] */ 59,3,-32,25,-14,25,14,6,-127,-3,-56,0,-20,-45,19,-15,-59,-37,-8,8,-24,-20,15,-18,-22,77,45,-28,-31,-22,50,52,9,-31,-68,-53,-33,52,51,-29,-35,1,-5,3,-21,32,-16,-47,51,-51,-71,-14,-39,27,-24,59,-25,33,-14,-28,-23,35,-46,35,-6,34,-7,1,-21,-18,-29,-32,-33,-58,18,11,-13,-71,-8,-32,9,-118,-14,15,12,-55,8,-8,16,45,-49,17,-29,-36,-92,-83, 
  /* [3][0][][] */ 12,-7,4,-26,-7,-3,-57,1,4,29,9,-15,39,20,13,-14,23,22,0,26,28,-47,-34,-54,15,-56,-45,28,2,-41,18,17,-25,-24,-127,-9,-44,-18,0,-1,-20,-41,-50,-10,17,1,-26,-43,13,-54,9,-16,18,10,23,-44,-10,-58,-28,-37,-49,5,-30,11,16,-30,-36,-29,-28,-7,-15,33,-6,-43,9,-30,-4,23,18,-8,-48,-56,-3,18,-3,2,-29,-58,-43,-1,-43,-18,18,-47,-49,18, 
  /* [4][0][][] */ 16,76,-15,-21,-35,-69,-36,-8,-18,59,-34,12,-18,-65,-29,-94,-40,-34,-85,7,26,-113,16,-14,-24,-11,10,-66,-47,39,-58,-35,22,37,-45,-41,-43,-23,-108,-28,-53,-55,-71,-55,3,51,2,-8,-14,-50,-57,-54,-114,-8,-50,7,-45,-108,59,-44,-42,-67,-12,-49,-74,10,-58,-81,-12,-83,-127,-76,-87,9,61,-9,29,-52,-57,-74,-21,-75,-111,-29,-21,30,1,-21,-116,-99,-30,37,-18,51,-118,-44, 
  /* [5][0][][] */ 77,-46,32,31,79,-115,-29,8,44,-48,-22,-85,-32,28,3,-5,0,20,-90,82,-31,-7,-21,-73,-27,-89,-55,-119,-3,-20,-25,-43,-44,-4,-104,56,-126,-41,-11,-23,-87,-51,27,54,-20,3,16,-87,-109,37,-30,-50,-22,29,37,-44,9,-10,-7,-67,-28,-84,61,-93,10,46,-67,-20,23,26,35,-73,-74,84,-55,-97,-12,-70,-36,71,27,3,-26,78,-92,40,-41,23,-5,-127,38,93,-56,-35,2,-43, 
  /* [6][0][][] */ 15,-63,18,30,-39,-44,11,3,0,-32,-8,-21,-23,1,19,-68,-22,-2,7,1,-12,-28,20,8,-61,-4,4,-18,-6,-127,29,-54,-27,-41,-51,-17,0,30,-66,-24,20,25,-17,9,-38,7,-34,-11,-3,11,-88,-23,-2,-62,16,6,-12,-54,-20,-17,19,30,-4,-6,25,22,12,-75,65,-19,-78,-7,-21,-47,-41,-7,-25,-16,-7,-21,6,43,1,-17,-14,-46,12,-22,5,33,-5,-34,-18,4,31,-12, 
  /* [7][0][][] */ 42,6,-62,-71,-73,54,-57,-31,32,-44,-102,-34,63,-95,-14,8,-8,-32,38,22,-2,-20,-45,13,-80,21,-21,-5,-89,37,-54,-20,-15,-20,0,27,-110,15,-37,-57,19,-92,10,7,-13,-42,25,-114,-4,-74,-103,-82,-44,30,-25,-24,127,-96,19,-77,-32,-49,19,-102,-75,-77,0,-22,-108,-29,10,15,19,-27,1,-4,-73,-6,-107,4,16,-57,-46,-83,13,-16,-111,20,14,-34,28,-8,-77,-68,-27,-81, 
  /* [8][0][][] */ -17,17,-57,-97,10,-50,-96,-59,-18,16,-28,106,-17,-83,-92,-102,-94,24,-72,-10,-7,-61,16,47,-107,62,-6,61,-39,-58,-85,56,64,-83,-18,8,78,-33,-85,0,26,35,-99,-109,-21,-54,-46,48,-10,-71,-91,-63,-127,-65,-52,-81,-34,53,-63,13,30,45,-56,77,-97,-66,-57,13,-81,-5,-54,-45,3,19,-56,10,-96,29,17,26,-12,5,-103,-94,-12,-16,27,-66,-12,-57,-99,77,-102,-66,-62,-29, 
  /* [9][0][][] */ -39,-43,32,-11,10,-73,-80,-114,-14,-1,-54,-10,-9,-95,-117,-45,-42,-46,-36,-81,-39,24,-120,-117,30,-53,-54,-21,-48,-41,-108,26,9,-47,-12,-59,-100,-35,-57,-74,-14,-93,-9,-107,8,-33,-119,-7,-12,2,-25,-67,91,-99,-81,29,91,-79,-43,-38,-107,25,25,-76,-92,-44,28,27,-65,24,108,-109,45,12,-106,-110,-34,-127,-72,30,-23,42,38,-25,-77,-103,-14,-58,36,-24,-44,34,53,-33,75,-67, 
  /* [10][0][][] */ -41,51,12,-50,6,-6,44,-21,18,28,3,-25,85,33,-44,-17,-92,39,-80,-26,-25,-14,7,-86,18,13,-101,-127,-85,-10,-79,-38,67,48,50,50,-90,10,-66,-23,-24,76,-93,-62,-62,-31,6,-56,-8,3,11,-22,-41,5,-65,-23,-113,-38,22,-95,-14,59,27,15,-3,-57,-99,-66,-29,-26,-117,-23,9,45,-118,26,-76,6,17,9,28,-21,20,66,-78,8,41,-23,-4,-38,-72,-28,-42,-90,-61,-47, 
  /* [11][0][][] */ 11,-68,12,36,10,-62,11,-7,42,9,-30,8,-52,-18,3,-55,-31,-10,13,-12,6,15,-2,-32,-53,-26,4,-9,11,-40,19,-19,-44,-50,16,17,3,18,-70,-58,-6,31,-1,-29,-41,-28,-64,1,31,47,31,8,-36,-69,3,22,-19,-100,-22,-67,-35,39,-16,11,-17,26,-20,-57,41,-46,-25,3,5,27,-127,22,-15,-11,-10,18,-4,-5,-9,-13,14,-38,2,-7,-47,-12,41,-70,-46,0,1,-10, 
  /* [12][0][][] */ -37,-5,-86,23,4,14,0,-35,-35,16,-74,57,-12,-40,-13,-38,-106,-78,-68,-92,4,-11,-39,50,-102,-59,61,-38,74,44,-52,27,-111,-105,-2,-38,-29,-96,-79,22,36,-24,-127,-71,-63,-107,-74,51,-67,-42,-69,51,32,-56,-90,31,18,-32,-2,55,28,81,-41,18,44,-45,-13,89,81,22,9,9,69,38,-46,14,-42,-24,-65,-90,-97,85,19,-31,-67,-24,18,24,-76,-79,66,-20,35,-7,-6,7, 
  /* [13][0][][] */ 122,-3,3,65,26,-79,19,-2,45,45,25,-53,-58,74,42,-50,-99,-11,-94,-23,19,-29,35,-48,-52,31,8,-55,-58,-106,57,4,-22,81,-71,29,-94,-8,-51,24,-31,57,-27,-29,-9,-12,-6,-36,41,76,-76,-78,-108,13,11,-40,-116,-74,3,-116,-25,71,59,25,56,-18,-107,7,-30,23,-33,7,-37,7,-127,-112,-114,32,23,-14,25,-81,29,13,-60,-91,19,36,-19,-34,-21,22,61,-9,6,6, 
  /* [14][0][][] */ -78,-113,31,57,61,-22,-49,-124,-60,-66,17,28,-23,-61,-108,-67,-77,-83,7,-18,-65,-11,-38,11,-123,-93,-63,22,-123,-91,-98,-7,45,-54,-25,-33,38,53,27,-86,-42,-124,-9,32,15,-124,13,-103,53,31,60,7,71,-11,-50,-28,-41,7,1,74,-13,-101,-21,55,-71,-47,25,-83,-106,-71,-70,44,2,27,2,-83,44,-118,7,28,-2,-16,-91,-31,-127,-107,-88,48,53,-31,70,-64,66,42,-13,49, 
  /* [15][0][][] */ 32,-5,-52,19,16,-127,-14,-54,35,-11,-59,-88,-102,39,-42,-12,-29,-33,-87,-85,-11,-22,18,12,56,43,3,53,-24,58,53,-13,46,0,-5,-36,-70,56,2,-63,0,31,-30,-48,14,-7,-27,-86,-8,-22,-88,7,-60,-51,-97,-37,-16,34,-15,53,-30,14,18,85,-107,5,-59,-48,-85,-25,-41,-37,-22,-7,35,-102,-56,25,9,32,-49,106,-66,-7,-47,-34,-16,-2,14,25,-49,-49,24,41,1,25, 
  /* [16][0][][] */ -79,-65,6,-60,-26,47,-46,-22,10,-9,-113,24,-68,-86,-64,-96,43,22,4,44,51,35,-73,19,-91,40,-61,34,-94,13,3,-28,-93,17,59,-18,-63,14,-8,-60,-9,-72,-7,-1,24,29,48,-24,-61,-31,-8,67,-103,45,30,11,-61,22,-5,-35,38,76,-29,27,3,-17,-46,59,41,0,-110,-52,-50,39,-22,14,-63,20,-94,-58,-10,-127,20,-23,-19,10,43,-26,42,-2,-88,40,35,-17,-70,-19, 
  /* [17][0][][] */ -11,-123,-13,25,-23,-86,-89,-113,-4,-106,29,2,99,10,-127,1,-12,5,98,127,-110,-47,-26,-78,-18,16,-98,-15,46,-74,-62,22,-61,-56,64,-33,-75,41,-106,-61,-112,-69,-50,-45,-32,-28,29,-123,29,47,26,-17,-52,22,40,-97,-64,30,-103,-125,-12,-111,21,40,-104,-95,-4,-117,-123,36,48,-14,-25,-55,-89,15,54,-75,-4,-84,-29,-49,-97,-109,-125,19,26,-64,-22,22,-51,-89,-47,36,-28,50, 
  /* [18][0][][] */ -72,41,48,-30,1,-86,-116,-32,17,22,-120,-34,-25,-10,11,-29,-19,-55,54,-53,44,-72,-20,-98,26,-111,-49,52,-12,27,-36,37,-1,-58,-82,-120,-62,-10,-62,58,-68,-39,-73,-44,-127,-24,-17,-40,-24,-19,60,18,-116,-4,-34,32,-35,18,-51,-126,90,50,10,-7,-88,-74,-60,69,55,-81,-56,49,-113,-64,-106,-118,46,7,-36,-54,-78,-41,-53,-25,44,-63,19,53,-121,-51,-47,84,75,-58,36,-26, 
  /* [19][0][][] */ -5,6,31,-8,2,-96,29,29,30,-44,-15,34,-48,-1,-70,3,25,-103,25,-1,-16,22,-56,-18,-2,-66,-3,-72,-82,-107,-59,-22,53,-92,-20,-15,-6,-79,-37,-125,-3,-94,-75,-3,-94,4,20,-81,-31,26,-67,2,-86,-45,-1,-26,-49,37,19,-57,18,-23,28,11,-100,-31,-45,-61,-50,15,40,-50,-47,-127,-55,-66,-64,-92,-21,43,-13,-98,-17,24,-84,-17,-12,-52,42,3,-59,-1,-62,24,9,-51, 
  /* [20][0][][] */ -57,9,12,32,-103,52,-23,1,-23,-34,-108,-31,60,23,-11,-91,-80,-72,8,-62,-24,-73,-104,-94,17,-100,-121,-9,-22,-31,-78,45,31,-13,-23,-4,-10,-69,-53,-121,-107,-73,-104,-123,-65,-94,-97,43,-1,-127,-68,-9,5,38,1,-43,50,23,27,31,48,-89,-88,-76,-59,-90,-77,-21,-101,-95,-87,13,-88,-107,-23,-27,42,16,45,36,28,-34,30,-63,5,48,-53,20,-26,40,-3,12,-25,-23,-35,-32, 
  /* [21][0][][] */ -47,-40,23,-29,7,-83,32,-11,-50,-29,-68,58,57,-26,-39,-127,-77,-54,4,15,51,-30,2,-41,-55,-2,-8,9,19,-110,30,-38,-14,-74,-71,-61,28,74,-65,-94,7,-3,-51,7,-100,-17,-82,47,3,29,30,6,-22,-6,5,39,-88,10,-56,-7,45,9,-84,25,29,16,-43,-109,22,-86,-50,26,-29,-86,-36,18,-48,-75,12,-36,18,37,23,-40,13,-82,55,-9,-5,70,-47,-66,-51,22,3,-38, 
  /* [22][0][][] */ 45,-47,-74,-115,78,-110,48,72,-112,52,-81,-100,68,-105,-106,-105,9,37,-117,-69,52,-85,-1,-6,55,-24,-121,37,-54,-95,-72,-90,71,22,-36,17,-17,-28,-19,-107,-17,-29,-20,70,25,-107,52,-32,-24,-111,-32,-54,-103,-97,-42,25,-77,-57,7,-56,71,-82,-26,-127,-51,-8,-117,-37,53,54,-66,-17,-84,7,65,-95,-19,-64,17,49,63,-106,-52,-108,39,85,51,-45,-61,-1,-49,58,-6,-15,-49,49, 
  /* [23][0][][] */ 36,-54,-2,21,45,-89,-18,-58,17,-58,29,5,-127,-59,-1,-51,16,-31,-40,34,11,-62,21,-28,13,-25,12,-40,8,0,6,-25,2,19,25,-3,10,-13,-117,-21,-61,-23,-42,-62,-30,-56,39,-17,23,-92,-58,-37,13,-14,-36,17,-20,-48,21,-19,-102,-96,-46,-32,-5,-7,-76,-95,19,-42,26,-58,-26,2,-39,-80,-6,-33,20,69,-38,-39,-34,-63,17,-10,6,-30,-65,-17,65,-25,35,-30,-42,-5, 
  /* [24][0][][] */ -59,-67,-108,-89,-109,-125,-79,-74,1,69,29,2,23,17,-56,-127,-86,-13,-42,-60,45,-91,-68,-52,-27,-24,29,-3,46,-9,-11,-63,-6,-22,-6,-8,-57,-83,7,-49,-76,-96,40,-5,-13,-35,8,20,-79,-66,-54,3,-12,12,34,-65,-57,19,-1,-40,37,-45,24,44,-119,44,-72,-102,-125,11,-62,-50,-48,9,39,36,16,-86,-104,-109,-78,-105,-69,-89,-21,24,-42,-91,-6,-98,-48,-59,-38,1,-94,-22, 
  /* [25][0][][] */ -48,-72,-116,-27,43,-102,-94,5,3,-47,-59,-12,36,-40,-80,-60,-86,13,-32,-52,39,10,-46,-75,-40,-22,-88,-26,28,-127,23,75,78,-83,19,17,20,-24,-27,-65,-45,56,-95,-33,81,17,77,5,-62,56,-44,8,-19,-31,-31,21,-78,5,-88,1,54,21,-28,-1,13,34,-58,-62,-81,-49,-57,-56,-12,-80,24,-34,-14,5,-21,-39,16,-13,-22,45,-64,-74,-94,-72,-13,-48,-1,9,-73,26,-34,-87, 
  /* [26][0][][] */ 1,-108,-38,-47,-99,14,-41,-38,-107,-127,42,31,2,-66,-27,-34,51,-10,6,-80,-26,20,40,-23,23,1,-26,24,-18,-27,-103,-34,-16,-77,-100,-98,-74,23,-65,50,-106,39,10,-10,-87,18,-67,41,-49,-2,-21,29,7,-64,-37,-115,95,31,-1,-4,-30,-99,17,-29,56,-47,-69,17,-91,28,46,34,30,-102,-92,-19,10,-105,-101,-6,-53,24,21,-89,23,-31,-63,-24,-94,47,21,-19,-74,39,3,54, 
  /* [27][0][][] */ -13,-14,-92,-119,-82,-47,-87,-58,-16,57,-19,-108,-16,-2,12,16,2,-59,45,-94,-106,-33,-67,-54,-98,-9,-121,-22,2,-13,-63,-25,24,4,-97,-72,-109,-93,-121,16,-113,-35,-14,-36,22,-30,1,29,26,14,9,-86,-28,-96,-48,-69,107,-50,-127,-99,-74,-89,-57,57,26,-73,-119,27,12,-26,-46,-40,-4,-83,-51,-107,1,-94,19,34,19,-64,47,-47,-99,-105,-71,-17,-72,-37,-50,0,6,-21,28,7, 
  /* [28][0][][] */ 79,12,3,-2,-40,-28,-23,-57,10,40,30,-5,7,-42,11,55,-53,25,-38,40,17,5,-33,-30,-13,27,-13,-34,-31,-31,0,44,-36,26,60,16,-44,-26,38,26,35,31,-38,27,11,24,34,26,22,-83,42,46,-74,28,68,31,-2,-23,26,-20,7,-39,-16,-35,-24,32,-26,39,-46,22,-106,8,-44,24,81,-66,-89,-7,-17,0,-43,-110,30,22,21,-127,-8,-51,8,-18,-50,-25,-30,-10,-68,-63, 
  /* [29][0][][] */ -7,-14,-12,-64,-103,-32,-120,-53,12,-60,-115,-57,66,-102,-86,-6,-117,21,7,-76,-104,-75,-16,-42,-89,-17,-74,-29,-97,11,19,-46,-17,-46,-39,-89,-20,23,-56,19,-16,26,-71,1,-49,23,-87,-70,-45,-42,1,-95,48,-119,46,-8,-104,29,-82,84,-127,30,-108,-63,-83,-98,21,26,28,-104,36,-97,89,14,-22,12,64,-83,-79,-17,-51,-31,-58,-101,-10,24,12,14,-79,48,46,23,-120,-29,-32,8, 
  /* [30][0][][] */ -16,-90,-86,29,-115,19,-51,-48,91,-51,-38,-33,-79,13,9,9,-40,-10,73,-118,10,-93,-126,-24,-126,-18,-54,92,-10,-86,-111,-34,-66,-93,-93,-81,-25,-51,-40,20,32,-98,-47,40,45,-73,43,10,-90,59,13,-95,74,-79,-46,43,-64,-44,-64,-43,-83,-38,-95,-22,-120,-107,-74,73,-48,50,37,-66,-71,46,-5,-103,-47,-93,-59,-84,-15,21,-83,-55,-122,-15,-122,47,-30,-127,62,4,-27,-3,5,-92, 
  /* [31][0][][] */ 4,-21,61,29,-12,-103,-27,-127,-11,-4,-50,3,70,-53,-7,74,-63,-6,2,94,41,20,-5,62,52,-26,38,18,-40,42,25,89,-14,-12,-12,10,25,-26,1,-84,23,-1,-29,52,29,16,31,28,46,-6,-28,-41,-112,-48,37,50,-105,-2,-35,23,-65,28,91,-34,-72,58,-14,-48,59,60,-122,13,-102,34,39,-20,-39,-33,21,27,15,-77,67,71,31,-83,-53,-13,22,-46,-67,-68,13,65,-61,-87, 
};
const TfArray<4, int> tensor_dimension5 = { 4, { 32,1,1,96 } };
const TfArray<32, float> quant5_scale = { 32, { 0.0031245318241417408, 0.0022837510332465172, 0.0056721419095993042, 0.0052028563804924488, 0.002930646063759923, 0.0026130457408726215, 0.0082536078989505768, 0.0028469108510762453, 0.0025955606251955032, 0.0026610943023115396, 0.0027509892825037241, 0.0084605580195784569, 0.0026066899299621582, 0.0039939363487064838, 0.0023580100387334824, 0.0062384703196585178, 0.0024971540551632643, 0.0023517720401287079, 0.0023073807824403048, 0.0028445054776966572, 0.0023361882194876671, 0.0064518293365836143, 0.0024202680215239525, 0.0042059822008013725, 0.0026619420386850834, 0.0028056388255208731, 0.0025685711298137903, 0.0025842816103249788, 0.0067057288251817226, 0.0025359292048960924, 0.0023102739360183477, 0.0054189763031899929, } };
const TfArray<32, int> quant5_zero = { 32, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant5 = { (TfLiteFloatArray*)&quant5_scale, (TfLiteIntArray*)&quant5_zero, 0 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int32_t tensor_data6[96] = { -1622, 4561, 11521, 1929, -5756, -3878, 23371, 2876, 1346, -3934, 10717, -2840, -16249, 3323, 18388, 11493, 13539, 11587, -5565, -6797, 1521, 19879, 25473, 9934, -1309, 544, 4187, 3443, 1824, -9617, 5229, -4700, -3274, 3219, -297, -27, 12319, 3720, -4162, 5223, 14867, 10395, 4716, 8822, 6607, 11280, 716, 7235, 6011, -7626, -15851, -1181, 426, -4010, 1960, -1241, 2457, -2892, -7996, 5349, -2586, 934, -3929, -4903, -9027, 9314, 15572, 1033, -5017, -108, 3788, 3739, 3083, -3712, 635, 5191, -1571, 9415, 36042, -3448, 8525, 746, -3638, -65, 23965, 14626, 11208, 44, 11084, 6443, 1592, -24534, -486, -7421, -2561, -1688, };
const TfArray<1, int> tensor_dimension6 = { 1, { 96 } };
const TfArray<96, float> quant6_scale = { 96, { 0.0004812837578356266, 0.00027021634741686285, 0.00016201472317334265, 0.00029015322797931731, 0.00020909817249048501, 0.00033618460292927921, 0.00012659381900448352, 0.00023098924430087209, 0.0002479847171343863, 0.00022172255557961762, 0.000193106519873254, 0.00015034779789857566, 0.00017632982053328305, 0.00078659475548192859, 0.00015418542898260057, 0.0001094375693355687, 0.0001504542597103864, 0.00010988676513079554, 0.0003664905671030283, 0.00026785486261360347, 6.6280670580454171e-05, 0.00012028532364638522, 0.00010605438728816807, 0.00014429798466153443, 0.00012069224612787366, 0.00028743059374392033, 0.00061545666540041566, 0.000233328333706595, 0.00017499797104392201, 0.00018276054470334202, 0.0002040640392806381, 0.00018912361701950431, 0.00013505941024050117, 0.0003098107990808785, 0.0003411817888263613, 0.00026839491329155862, 0.00014967712922953069, 0.00017250407836399972, 0.00021928259229753166, 0.00036260992055758834, 6.6285720095038414e-05, 0.00021068567002657801, 0.00034930740366689861, 0.00025175203336402774, 0.00027842482086271048, 7.3967959906440228e-05, 0.00029985877336002886, 0.00026454380713403225, 0.0001844802318373695, 0.00021642862702719867, 0.00012209273700136691, 0.00010491627472219989, 0.0003594928712118417, 0.00015638468903489411, 0.0002901233674492687, 0.00023292469268199056, 0.00020705151837319136, 0.00023621463333256543, 0.00020608714839909226, 0.00028319223201833665, 0.00041009273263625801, 0.0003210171707905829, 0.00014258880401030183, 0.0003108135424554348, 0.00024303837562911212, 0.00017159209528472275, 0.0001433298020856455, 0.00024523059255443513, 0.00025844050105661154, 0.00024177970772143453, 0.00026091691688634455, 7.7817960118409246e-05, 0.00047784877824597061, 0.00017168778867926449, 0.0001764952321536839, 0.00035067141288891435, 0.00013533474702853709, 0.00015606812667101622, 3.1360817956738174e-05, 0.00013071380089968443, 0.00013365014456212521, 0.00021521317830774933, 0.00015456450637429953, 0.00016692015924490988, 6.7376109655015171e-05, 0.00017227813077624887, 0.00018862441356759518, 0.00011011565948138013, 3.607623148127459e-05, 0.00024155819846782833, 0.00021322784596122801, 9.6019248303491622e-05, 0.0001170979012385942, 0.00018618213653098792, 0.00026895999326370656, 0.00019414308189880103, } };
const TfArray<96, int> quant6_zero = { 96, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant6 = { (TfLiteFloatArray*)&quant6_scale, (TfLiteIntArray*)&quant6_zero, 0 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int8_t tensor_data7[96*1*1*16] = { 
  /* [0][0][][] */ -3,41,12,-55,-40,9,-94,-50,-25,50,-49,49,-36,-127,32,32, 
  /* [1][0][][] */ -30,127,-43,-15,-61,-15,30,36,77,-33,-54,22,-8,54,25,-82, 
  /* [2][0][][] */ 47,88,52,36,113,61,-7,62,119,68,-33,-44,-46,87,-127,-115, 
  /* [3][0][][] */ -59,-113,-24,-34,-6,16,61,-48,-27,75,31,-6,-44,15,51,127, 
  /* [4][0][][] */ -114,85,22,6,63,12,10,39,-20,52,-36,-4,-127,-22,-30,-56, 
  /* [5][0][][] */ -72,22,62,35,-67,16,-46,39,61,64,11,-87,-11,-31,-127,11, 
  /* [6][0][][] */ 113,2,39,-69,81,-85,77,74,-120,-92,-16,60,-5,127,19,-7, 
  /* [7][0][][] */ -36,40,78,-1,70,46,-52,35,96,127,5,14,-11,-2,-62,-54, 
  /* [8][0][][] */ -39,-85,4,25,25,-39,35,-37,-17,57,127,38,30,62,6,31, 
  /* [9][0][][] */ -45,-22,-49,117,22,33,86,2,-44,127,63,-27,32,-14,-34,19, 
  /* [10][0][][] */ -15,36,-36,-46,1,-15,-127,61,96,18,16,25,-57,-49,-35,-45, 
  /* [11][0][][] */ 0,3,20,6,127,34,40,-23,-11,34,-21,5,-25,29,-38,-8, 
  /* [12][0][][] */ 127,-30,-39,-95,119,5,63,-37,-26,3,-46,19,47,-11,-30,41, 
  /* [13][0][][] */ -24,-2,-41,56,-8,-127,-14,10,9,-5,38,36,4,-67,-34,-14, 
  /* [14][0][][] */ 23,-67,48,-54,1,6,-127,-46,13,62,32,-22,-34,-84,-15,-20, 
  /* [15][0][][] */ -126,-36,64,113,-72,69,-52,61,27,121,108,-127,-45,-24,-90,10, 
  /* [16][0][][] */ 6,28,42,14,-69,25,-19,127,83,54,36,32,70,-9,-61,-32, 
  /* [17][0][][] */ -20,-44,43,-21,-72,-24,-127,43,-36,-53,61,-26,43,49,-9,-32, 
  /* [18][0][][] */ -41,61,-2,14,21,-15,-54,52,103,15,1,7,-62,127,33,-10, 
  /* [19][0][][] */ 127,8,-1,-34,91,42,-4,-32,-40,-1,-68,-16,2,-33,-28,-30, 
  /* [20][0][][] */ 82,10,4,58,111,30,10,49,6,127,-38,-33,9,37,-46,-18, 
  /* [21][0][][] */ -18,-3,74,20,-30,56,-54,93,80,64,127,-15,-29,81,-28,19, 
  /* [22][0][][] */ -81,50,-30,127,-19,10,67,42,11,73,23,60,-34,9,-3,-51, 
  /* [23][0][][] */ 7,61,16,6,8,22,40,67,24,28,-16,23,62,-5,-127,-59, 
  /* [24][0][][] */ -127,-2,93,65,-56,65,64,16,55,92,90,-83,-32,19,-111,-32, 
  /* [25][0][][] */ -7,59,-50,60,-82,-5,5,-69,36,-63,-44,-2,-12,-127,67,39, 
  /* [26][0][][] */ 22,-16,-28,-3,-4,11,61,-25,-127,4,14,1,23,68,20,22, 
  /* [27][0][][] */ -50,36,7,127,-14,-59,16,-24,66,-30,38,32,5,67,0,5, 
  /* [28][0][][] */ -70,92,79,18,55,-17,-30,127,75,28,3,52,4,65,-19,-25, 
  /* [29][0][][] */ -78,-110,15,60,-40,-51,0,-39,0,20,70,-127,-11,-43,-56,38, 
  /* [30][0][][] */ 13,21,-27,21,-7,-21,63,-127,-73,39,-1,9,22,-24,61,60, 
  /* [31][0][][] */ -24,-41,43,-8,-94,34,-29,-45,2,127,37,-105,-2,-32,1,82, 
  /* [32][0][][] */ -81,32,-28,127,-7,22,66,47,37,-24,-83,64,-22,21,9,-17, 
  /* [33][0][][] */ -13,30,29,11,-61,10,-127,12,67,23,-47,-11,-104,-104,15,-21, 
  /* [34][0][][] */ -14,-17,127,15,5,14,-64,46,-42,-12,35,-13,-28,56,-30,40, 
  /* [35][0][][] */ -44,22,-75,25,-17,10,-45,-20,127,92,-3,59,-32,-18,16,-118, 
  /* [36][0][][] */ 11,9,92,-69,85,42,70,75,11,5,-13,-38,-26,127,-40,-45, 
  /* [37][0][][] */ 28,31,-14,60,29,-42,109,-93,-121,-59,-67,4,127,-6,39,-19, 
  /* [38][0][][] */ 74,121,-60,-50,51,3,21,-34,109,-37,-127,-16,84,-21,55,-3, 
  /* [39][0][][] */ 7,24,8,-127,-38,-7,-57,28,37,-48,14,-5,-19,3,-8,22, 
  /* [40][0][][] */ 63,82,115,-75,39,34,-127,65,-40,113,36,-27,50,-19,-53,-122, 
  /* [41][0][][] */ -111,-25,-63,-127,1,4,24,-64,-73,-1,-24,-47,-91,-3,68,123, 
  /* [42][0][][] */ 46,33,18,-20,-43,17,-34,47,22,21,127,-30,35,60,4,-26, 
  /* [43][0][][] */ -23,64,-30,-8,17,58,-14,17,37,127,-6,-19,-1,-48,-30,-48, 
  /* [44][0][][] */ -65,-26,76,61,-31,33,-127,-33,16,58,84,-53,-51,-38,-61,-28, 
  /* [45][0][][] */ 4,127,-88,82,116,67,24,-16,57,116,-79,-11,-13,-97,-31,-81, 
  /* [46][0][][] */ 27,59,-6,-127,17,38,-10,21,-15,-28,-38,-16,-35,-42,4,-31, 
  /* [47][0][][] */ 16,-1,106,-4,127,20,-27,36,5,39,7,3,-33,26,10,-27, 
  /* [48][0][][] */ -40,-105,51,16,19,25,-4,-127,-6,-5,-113,-76,-76,-58,68,94, 
  /* [49][0][][] */ -20,-127,21,20,31,-77,8,-36,-108,-53,34,-20,-27,28,32,79, 
  /* [50][0][][] */ 2,-127,95,-54,73,-49,-21,-32,-84,-62,17,-24,-48,92,27,76, 
  /* [51][0][][] */ -47,4,127,3,48,26,-96,72,-15,52,93,-63,-8,-20,-94,40, 
  /* [52][0][][] */ -33,72,47,81,38,-32,-15,111,127,92,-21,3,-33,51,-26,-58, 
  /* [53][0][][] */ 12,-16,60,-79,-125,12,-127,31,63,45,53,-103,-53,-80,-49,0, 
  /* [54][0][][] */ 13,-7,24,69,127,27,-68,7,-22,33,-27,-18,-32,34,-29,-44, 
  /* [55][0][][] */ 88,-3,48,-56,74,127,-28,-92,-36,37,-105,-116,35,59,34,70, 
  /* [56][0][][] */ -24,20,39,-2,3,-44,-103,76,47,127,19,-56,29,27,-98,10, 
  /* [57][0][][] */ 22,91,-23,-57,-5,2,127,36,-9,-30,-68,-26,62,16,63,8, 
  /* [58][0][][] */ -56,69,-64,45,62,127,-62,104,22,47,76,46,-14,63,-71,-38, 
  /* [59][0][][] */ -23,127,47,25,-12,-36,77,84,15,-8,-2,2,44,42,3,-27, 
  /* [60][0][][] */ 29,-18,4,-65,33,-127,-38,21,-42,-84,61,18,71,64,6,20, 
  /* [61][0][][] */ 13,-79,84,111,56,-19,57,-43,-127,0,5,-21,21,41,65,-18, 
  /* [62][0][][] */ 29,127,17,-12,3,16,-14,49,-2,-10,-39,34,1,-11,-35,-60, 
  /* [63][0][][] */ -20,54,-40,127,-69,-18,-10,-46,-33,-38,-24,42,12,-29,68,43, 
  /* [64][0][][] */ 40,6,10,-15,-22,-94,-120,37,81,-21,63,32,60,-127,-26,14, 
  /* [65][0][][] */ 38,-7,46,-69,80,53,70,-93,-101,60,-94,-127,-11,-4,75,-12, 
  /* [66][0][][] */ -9,27,42,3,-18,28,-20,127,38,-1,26,-46,42,74,-58,-31, 
  /* [67][0][][] */ 2,39,8,-127,-34,-17,-44,27,54,-75,-5,-23,-18,28,11,23, 
  /* [68][0][][] */ -127,53,118,-25,-27,-83,-40,53,2,28,63,-23,-26,122,31,-40, 
  /* [69][0][][] */ 54,127,20,22,27,-11,-53,35,7,4,-52,36,-72,18,3,-114, 
  /* [70][0][][] */ 6,42,-15,-9,-50,5,-34,127,17,87,2,42,57,4,-22,-1, 
  /* [71][0][][] */ 79,-5,99,75,100,-108,-36,98,-14,127,-62,-5,-84,79,-13,9, 
  /* [72][0][][] */ -27,38,-17,53,41,20,-20,127,42,9,-15,4,-67,9,-45,-45, 
  /* [73][0][][] */ -96,-64,55,58,33,-39,-35,-95,-22,51,127,-47,-25,2,17,68, 
  /* [74][0][][] */ 8,127,-87,86,108,-29,-17,65,-2,-52,-98,101,86,-32,-1,-123, 
  /* [75][0][][] */ -2,-4,38,-41,30,24,21,33,28,-10,-18,-21,-29,127,-10,-3, 
  /* [76][0][][] */ -127,8,84,45,-14,-2,9,127,105,0,-44,-118,-97,47,-68,-22, 
  /* [77][0][][] */ -15,-41,-6,28,-8,-37,38,70,8,103,127,63,21,10,-95,-16, 
  /* [78][0][][] */ -72,49,0,99,13,127,42,40,117,99,-4,30,-9,-80,-63,-93, 
  /* [79][0][][] */ -105,-41,-127,4,-36,6,68,-24,125,41,99,44,19,71,0,-83, 
  /* [80][0][][] */ -26,67,66,-32,55,24,-5,42,67,127,-15,-17,27,88,-40,-110, 
  /* [81][0][][] */ -56,15,-93,36,2,-115,58,30,-52,-33,127,74,64,21,18,-9, 
  /* [82][0][][] */ 127,-18,22,-11,52,-31,-3,28,-4,35,-24,-4,32,8,-23,-2, 
  /* [83][0][][] */ -66,-5,5,-5,-66,18,-23,-39,10,127,43,-93,-19,27,8,61, 
  /* [84][0][][] */ 45,34,99,-48,37,92,-28,31,93,78,-7,-96,46,127,-11,-3, 
  /* [85][0][][] */ -39,83,62,-50,-61,36,-37,115,66,127,49,30,92,26,-127,-78, 
  /* [86][0][][] */ 100,20,-21,-16,91,-37,127,46,-58,-67,-76,91,73,88,65,-54, 
  /* [87][0][][] */ -38,46,-8,-82,-25,-25,109,68,127,106,47,-74,17,32,-40,-103, 
  /* [88][0][][] */ 53,127,-47,51,99,-17,66,54,19,41,-122,81,39,4,-4,-73, 
  /* [89][0][][] */ 70,63,-33,-44,44,-26,118,-5,-54,-62,-74,25,127,40,36,-46, 
  /* [90][0][][] */ 28,17,11,-34,-58,0,-55,72,24,-49,58,-8,127,37,-20,-69, 
  /* [91][0][][] */ -73,-15,6,-29,-118,-52,-73,-32,79,42,48,-61,-29,-108,-89,127, 
  /* [92][0][][] */ -42,-23,53,61,-64,-113,-40,-10,46,60,16,-46,-82,-127,-33,2, 
  /* [93][0][][] */ -11,68,95,68,-97,108,-36,22,36,123,-127,-27,-56,-43,-43,-64, 
  /* [94][0][][] */ 21,-26,-17,-8,-26,-53,-47,17,-31,-18,43,9,127,-6,-16,-6, 
  /* [95][0][][] */ 123,40,66,-9,-41,14,-59,34,-62,2,127,-13,64,78,-10,-47, 
};
const TfArray<4, int> tensor_dimension7 = { 4, { 96,1,1,16 } };
const TfArray<96, float> quant7_scale = { 96, { 0.0013814186677336693, 0.00077559630153700709, 0.00046502746408805251, 0.00083282071864232421, 0.00060017011128365993, 0.00096494366880506277, 0.00036335960612632334, 0.00066300359321758151, 0.00071178533835336566, 0.00063640560256317258, 0.00055426958715543151, 0.0004315401311032474, 0.00050611578626558185, 0.0022577464114874601, 0.00044255520333535969, 0.00031411636155098677, 0.00043184572132304311, 0.00031540569034405053, 0.0010519302450120449, 0.00076881819404661655, 0.00019024402718059719, 0.00034525245428085327, 0.00030440569389611483, 0.00041417550528421998, 0.00034642042010091245, 0.00082500599091872573, 0.001766532426699996, 0.00066971743945032358, 0.00050229299813508987, 0.00052457378478720784, 0.00058572075795382261, 0.0005428375443443656, 0.00038765819044783711, 0.00088924344163388014, 0.00097928696777671576, 0.0007703683222644031, 0.00042961511644534767, 0.00049513485282659531, 0.00062940223142504692, 0.0010407916270196438, 0.00019025850633624941, 0.00060472666518762708, 0.0010026097297668457, 0.0007225985755212605, 0.00079915695823729038, 0.00021230868878774345, 0.00086067832307890058, 0.00075931457104161382, 0.00052950973622500896, 0.00062121055088937283, 0.00035044024116359651, 0.00030113899265415967, 0.0010318448767066002, 0.00044886770774610341, 0.00083273503696545959, 0.00066855887416750193, 0.00059429561952129006, 0.00067800190299749374, 0.00059152761241421103, 0.00081284070620313287, 0.0011770805576816201, 0.0009214088786393404, 0.00040926964720711112, 0.00089212163584306836, 0.00069758796598762274, 0.00049251719610765576, 0.00041139652603305876, 0.00070388027234002948, 0.00074179633520543575, 0.00069397524930536747, 0.00074890436371788383, 0.00022335926769301295, 0.0013715593377128243, 0.00049279187805950642, 0.000506590586155653, 0.0010065247770398855, 0.00038844850496388972, 0.00044795908615924418, 9.0014298621099442e-05, 0.00037518507451750338, 0.00038361322367563844, 0.00061772187473252416, 0.00044364327914081514, 0.00047910743160173297, 0.00019338824495207518, 0.00049448630306869745, 0.00054140470456331968, 0.00031606268021278083, 0.0001035488530760631, 0.00069333944702520967, 0.00061202340293675661, 0.00027560204034671187, 0.00033610366517677903, 0.00053439469775184989, 0.00077199027873575687, 0.00055724481353536248, } };
const TfArray<96, int> quant7_zero = { 96, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant7 = { (TfLiteFloatArray*)&quant7_scale, (TfLiteIntArray*)&quant7_zero, 0 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int32_t tensor_data8[16] = { -11439, -2447, -16230, 5079, -17948, -5394, 11140, -43021, -32932, 3027, 18142, 2837, 10069, -23750, 18449, 22594, };
const TfArray<1, int> tensor_dimension8 = { 1, { 16 } };
const TfArray<16, float> quant8_scale = { 16, { 0.00038767751539126039, 0.00032373899011872709, 0.00022260553669184446, 0.00022629924933426082, 0.00032342842314392328, 0.00035873579327017069, 0.00020876042253803462, 0.00019598509243223816, 0.00024834068608470261, 0.00017799231864046305, 0.00043494207784533501, 0.00034052421688102186, 0.00018302146054338664, 0.00023766579397488385, 0.00030431928462348878, 0.00028248855960555375, } };
const TfArray<16, int> quant8_zero = { 16, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant8 = { (TfLiteFloatArray*)&quant8_scale, (TfLiteIntArray*)&quant8_zero, 0 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int8_t tensor_data9[16*1*1*96] = { 
  /* [0][0][][] */ 33,-11,-6,-53,-17,-8,-16,10,-77,-36,38,21,44,-43,-40,-5,3,-27,-35,127,79,-2,7,-19,-8,-7,-83,16,-8,-34,123,-11,-23,2,-7,-4,-17,-15,-31,-43,-15,5,-4,30,5,50,-26,5,9,-8,-19,36,-10,15,-8,79,12,8,-7,17,8,74,0,-33,1,22,13,12,-39,33,111,49,-3,-28,-9,-28,-101,-5,4,-13,-3,-30,-1,45,-14,26,-53,-48,-54,53,12,2,19,-106,9,28, 
  /* [1][0][][] */ 17,-21,-68,-3,-14,9,127,-75,-37,-39,41,110,-5,1,-42,5,-10,-21,67,68,73,17,19,-55,19,-19,54,-84,19,-16,41,7,-2,-23,-15,-19,-25,-38,-2,51,17,30,-4,-50,-73,90,36,-69,10,13,-19,78,-4,12,28,11,33,-31,-5,0,-11,-10,-67,-27,-2,65,-35,-11,22,-36,-28,121,8,-21,21,3,-38,-10,35,7,4,50,4,86,-13,91,-118,5,-8,34,12,17,25,18,89,70, 
  /* [2][0][][] */ 0,11,-76,46,58,13,13,84,21,-75,20,40,21,6,-16,8,4,17,-58,46,60,-9,-18,19,13,5,-9,-10,-22,18,10,-23,-2,-58,5,18,-23,44,26,-31,43,-19,15,21,20,31,14,96,8,-24,-7,57,24,-22,-27,30,-12,44,15,-8,67,98,127,22,18,-8,-31,15,-61,46,117,-45,-12,-2,-53,20,28,31,1,7,50,-52,-13,-31,-22,-4,34,42,-12,52,13,-34,46,-8,-25,-17, 
  /* [3][0][][] */ -31,-93,103,-36,18,0,14,39,9,127,-60,23,-60,28,78,21,18,1,25,-69,-43,-9,90,1,15,10,40,110,-33,-28,-17,8,-32,3,-7,-21,-15,-21,-22,35,-11,69,-5,-50,25,-59,17,-21,-12,26,-59,-38,5,-35,0,-4,-56,9,5,-36,-22,54,-52,-13,-10,-44,1,-15,33,-24,-103,-1,-11,23,-42,-15,110,-22,19,8,-21,22,14,11,33,-3,117,-26,44,-52,19,-17,54,60,-8,-33, 
  /* [4][0][][] */ 26,-6,34,0,67,24,-43,103,-82,-43,25,0,30,21,16,15,9,-40,-63,106,47,4,19,-23,-16,-1,-84,34,3,-4,64,-1,11,-24,7,-3,8,46,-16,-8,-29,1,-11,-27,18,-3,-35,43,2,-38,-30,4,-6,-17,-22,28,12,35,14,45,28,116,127,10,25,7,-14,-21,-80,50,90,17,7,-19,-36,-1,-88,12,16,-3,-5,-52,-1,-15,-22,2,42,8,-21,83,-1,-21,6,-62,-6,-22, 
  /* [5][0][][] */ 70,-11,-43,2,51,6,24,16,-36,-60,11,-10,47,1,-45,1,4,1,15,110,48,1,-37,1,12,-10,-57,-27,-21,19,-9,12,-20,-40,12,-1,1,43,15,-43,18,-5,16,127,19,-11,-18,26,-2,-37,11,20,11,-11,-44,18,-25,-2,-7,8,7,12,41,6,41,-16,-5,17,-11,40,65,19,-2,29,-37,19,9,8,-18,13,7,-49,-2,34,-6,33,1,49,-1,23,1,7,-7,4,-15,29, 
  /* [6][0][][] */ 11,-108,102,-38,-15,7,15,14,-47,50,3,-45,-36,26,5,10,6,-4,17,15,-8,17,127,-18,19,8,-23,55,-2,-4,41,21,21,-12,5,-2,-25,-26,-24,1,-43,81,6,-63,20,-11,-5,-19,-22,-25,-71,-18,7,-4,23,42,-63,-56,4,10,15,-1,-8,-54,33,-44,-7,4,2,-5,3,7,-3,-33,-36,15,-10,16,51,-4,-9,55,9,38,16,76,61,-24,105,-44,10,-29,0,-28,2,57, 
  /* [7][0][][] */ -54,121,-17,59,-36,13,65,-37,13,-61,7,127,-4,10,1,-17,-2,-26,-31,-16,22,-10,9,36,-10,6,111,-10,26,-26,110,20,15,11,-16,-16,-11,52,-7,70,6,-52,5,-86,-17,119,27,8,-4,22,-33,114,4,-8,1,-6,60,23,-8,43,13,35,24,13,-38,112,-33,-23,-29,-43,12,38,5,-32,33,9,-14,15,56,-20,22,11,-29,41,-30,33,-45,-21,-75,114,4,-45,-2,-3,48,3, 
  /* [8][0][][] */ 4,82,-37,52,-40,-20,70,-33,71,-8,12,67,31,0,10,-7,-12,-13,25,18,-62,-10,-99,20,-16,-9,69,-127,5,1,16,-13,16,-18,6,-8,7,49,20,48,22,-43,2,-15,2,52,-2,-26,-27,11,13,66,-17,-10,-15,-23,77,1,-22,13,-13,-3,-14,4,-10,87,-32,-13,51,-15,-6,48,17,0,75,-6,8,-1,21,-4,-20,28,3,27,8,24,-23,17,-59,32,21,10,1,40,44,28, 
  /* [9][0][][] */ 45,-46,3,-89,110,11,-27,83,24,-33,-6,26,29,41,26,-28,-19,-41,-5,103,-59,16,-74,42,-20,-19,-114,97,-3,13,-108,-22,16,-4,11,21,25,4,-1,-55,-27,18,-16,127,38,-110,-30,57,10,1,96,-66,6,29,-37,-29,-19,67,20,-44,-55,-2,98,100,-9,-102,-3,-25,-27,36,-16,-96,15,100,-34,3,-24,-59,-33,6,-12,-39,-17,-57,25,-68,71,48,-44,-71,-62,-11,4,32,-50,-52, 
  /* [10][0][][] */ -91,-1,-26,2,-50,5,-39,29,77,12,-15,31,-34,-10,-1,-15,-19,19,-51,-127,-45,2,0,85,-5,-18,77,-21,5,-15,-9,-12,-15,27,7,-11,0,49,3,32,8,-56,3,-67,35,9,44,68,-5,43,-28,18,-9,-14,-27,-42,17,38,-14,-13,27,23,-17,45,-52,52,-20,6,5,-36,-20,-92,8,3,16,37,18,23,-5,1,12,-26,6,-55,-5,-84,37,49,-10,-45,11,-37,35,-4,4,-123, 
  /* [11][0][][] */ -30,4,73,34,-59,-11,-106,-24,-3,7,-47,24,-7,-22,29,14,26,-4,-30,-119,-14,1,44,-3,40,-23,96,22,-6,40,9,11,-2,57,-15,11,32,-38,0,57,-31,21,9,-92,118,-17,127,-48,21,55,-7,-9,15,-15,30,17,-30,-51,-9,41,-16,43,-88,31,-9,15,-11,0,60,-37,-76,6,-12,-52,81,34,-44,26,2,58,-27,35,-9,2,79,27,46,22,7,27,4,-53,-30,-25,61,20, 
  /* [12][0][][] */ -76,-33,6,-28,-99,7,51,2,-88,22,85,127,-1,11,12,5,0,-27,-21,-1,45,-15,89,-8,-4,12,117,47,-34,-17,118,15,1,-11,6,-32,-27,29,-17,43,-21,-15,-30,-78,-37,88,30,-10,-28,41,-90,104,-31,10,17,19,-56,-34,5,45,26,65,-86,-25,23,-32,-18,32,-53,-22,-36,108,15,-23,-3,18,23,-5,36,-9,10,12,-18,73,24,5,-42,-72,83,-12,35,-35,-10,-65,17,43, 
  /* [13][0][][] */ -46,5,7,77,-36,10,-4,83,-13,10,13,26,24,-10,-43,15,-1,24,-53,-15,48,-44,85,5,3,18,40,29,-17,-6,82,-9,-57,-31,20,-28,-6,111,-7,28,-7,-1,-6,-67,52,61,9,82,11,-51,-91,109,18,-37,-16,52,-20,49,5,78,102,127,42,7,4,20,-11,22,-59,14,105,-66,-1,-39,-66,9,33,39,57,-8,65,-107,16,31,-2,12,55,-4,61,38,9,-51,54,-93,8,-11, 
  /* [14][0][][] */ 32,-38,5,-82,59,-4,-74,-47,-41,56,-10,-127,-41,-40,-58,-5,-50,23,85,-20,-2,-1,57,-74,-7,16,-112,-15,-12,9,-34,-9,-10,-5,-17,27,-15,-84,0,-40,-26,49,-18,15,-69,-62,-3,-87,37,-38,24,-76,25,1,-15,29,-62,-42,-60,-60,5,-63,-85,-16,5,-19,4,-9,25,-31,-6,15,-5,-28,-31,-8,41,2,-36,-28,-8,9,19,43,45,-27,-42,3,55,-109,-7,81,-19,-5,-11,19, 
  /* [15][0][][] */ -3,-40,-5,-31,13,15,-17,-37,4,71,-19,-107,-10,8,49,1,-55,13,28,-23,-9,-7,-67,-31,-18,17,-34,-8,2,10,-32,-43,7,0,12,10,30,-22,-19,-61,-51,-24,-10,82,24,-67,-26,5,4,-34,0,-127,-5,19,4,-17,-22,-3,-19,-21,-1,-98,26,-22,-8,-43,16,6,-39,53,0,-87,-9,8,-45,-15,37,5,-10,1,-16,-27,11,-46,-8,-69,32,-12,37,-86,-5,61,-38,6,-67,-34, 
};
const TfArray<4, int> tensor_dimension9 = { 4, { 16,1,1,96 } };
const TfArray<16, float> quant9_scale = { 16, { 0.01647629402577877, 0.013758907094597816, 0.009460735134780407, 0.0096177179366350174, 0.013745707459747791, 0.015246271155774593, 0.0088723180815577507, 0.0083293663337826729, 0.010554478503763676, 0.0075646732002496719, 0.018485037609934807, 0.014472278766334057, 0.0077784117311239243, 0.010100795887410641, 0.012933569960296154, 0.012005764059722424, } };
const TfArray<16, int> quant9_zero = { 16, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant9 = { (TfLiteFloatArray*)&quant9_scale, (TfLiteIntArray*)&quant9_zero, 0 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int32_t tensor_data10[96] = { 19732, 59444, 1266, 1913, 20825, -10413, 541, -512, 4543, 15611, -7998, -3570, -2187, -2337, -641, -14365, -9414, 7913, -7028, 2418, -7041, 4869, -3862, 8400, -2132, -2902, -3194, 11922, 6966, -20004, 3872, 13469, 8938, -36635, 884, -713, -1256, -7173, 5467, -7913, -5723, -5171, -7459, -523, 21270, -4620, 14990, 583, -15631, 16, -1848, 2848, -3977, 39698, -5090, 35514, 17401, -2434, 22898, -7317, -1808, -217, -5841, -1601, -16982, 21190, -1993, -4670, -3022, 36, 487, -2984, 969, -7035, -6337, -5468, 3663, -6008, 33172, -8793, -11502, -20778, -5336, -2723, 68858, -5106, -9369, -28759, -9279, -6339, -928, 11760, -4795, 4770, -432, -7574, };
const TfArray<1, int> tensor_dimension10 = { 1, { 96 } };
const TfArray<96, float> quant10_scale = { 96, { 0.00013228070747572929, 0.00010537390335230157, 0.00021203060168772936, 0.00019655589130707085, 0.00019691165653057396, 9.5648167189210653e-05, 0.00014661253953818232, 0.00010475046292413026, 0.00020959715766366571, 0.00018891206127591431, 0.00031790000502951443, 0.00012393671204335988, 0.00021047719928901643, 0.00015980015450622886, 0.00025793124223127961, 0.00010281211143592373, 0.00011504827125463635, 0.00012913753744214773, 0.00015538108709733933, 0.00020464006229303777, 0.00012438723933883011, 3.4986645914614201e-05, 0.00019491463899612427, 8.6978921899572015e-05, 6.2895676819607615e-05, 0.00016505813982803375, 0.00015662539226468652, 0.00013824606139678508, 6.1038444982841611e-05, 0.00037372641963884234, 0.00028877408476546407, 0.0001259970449609682, 4.3235922930762172e-05, 4.7530218580504879e-05, 0.00011261524196015671, 0.00037181357038207352, 0.00022055584122426808, 0.00027083785971626639, 0.00020961415430065244, 5.4209034715313464e-05, 0.00013014196883887053, 0.00019483595679048449, 0.00027061192668043077, 0.00023245811462402344, 0.00016162234533112496, 9.6658826805651188e-05, 6.4097919675987214e-05, 0.00045775561011396348, 0.00072908034780994058, 0.000104841950815171, 0.00043225960689596832, 0.00022394000552594662, 0.00018297095084562898, 7.0599628088530153e-05, 0.0001523870014352724, 5.7715595175977796e-05, 0.00011944273865083233, 0.00039483493310399354, 1.2543981029011775e-05, 0.00019712805806193501, 0.00024066802870947868, 0.00033307578996755183, 0.00014381528308149427, 0.00013032833521720022, 9.8813943623099476e-05, 0.00012791031622327864, 0.00025280885165557265, 0.00052544573554769158, 0.00025146524421870708, 0.011084076017141342, 0.00014460364764090627, 0.00017529091564938426, 0.00023408177366945893, 0.00010014285362558439, 0.00012156602315371856, 0.00036702526267617941, 0.00020152913930360228, 6.2036830058787018e-05, 7.7643453550990671e-05, 0.00016099694767035544, 8.7581873231101781e-05, 0.00012927116767968982, 0.00014859679504297674, 0.00032530917087569833, 5.3824820497538894e-05, 0.0001889128761831671, 8.260621689260006e-05, 0.00044099718797951937, 0.0002019441599259153, 0.00010191218461841345, 0.00029980912222526968, 7.0722700911574066e-05, 8.894548227544874e-05, 0.00010069998825201765, 0.00035203318111598492, 0.00022671595797874033, } };
const TfArray<96, int> quant10_zero = { 96, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant10 = { (TfLiteFloatArray*)&quant10_scale, (TfLiteIntArray*)&quant10_zero, 0 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int8_t tensor_data11[1*3*3*96] = { 
  /* [0][0][][] */ -54,-89,6,127,28,82,95,-52,-9,-17,-15,-46,-62,-5,46,-2,-1,-58,42,33,44,-124,127,11,-79,10,57,-48,-127,-127,37,17,10,41,70,-48,-39,30,25,17,-9,44,-127,60,68,-81,30,60,-18,49,-11,42,4,-6,16,72,-91,-65,-70,-5,-24,-23,24,26,84,-26,56,18,-11,50,54,127,24,43,68,-10,-14,24,127,-3,-8,29,-18,24,85,83,-80,-12,-36,-33,-21,-67,24,-44,-23,34, 127,-118,27,100,-49,127,99,-127,71,6,-9,93,127,-105,-8,5,5,127,127,-76,93,-102,36,56,-127,-96,-49,-30,-64,54,-67,-22,-120,90,-127,-85,-36,-30,-52,46,11,127,104,41,-49,-102,-127,-72,-15,-127,69,77,72,-28,2,82,-47,41,-104,-96,-61,-46,-34,58,85,-62,28,27,-73,14,18,57,115,127,62,18,1,63,-21,42,70,105,127,-28,-5,71,-102,127,-127,-81,-6,-45,-79,-127,-21,127, -87,-59,36,-61,11,-28,124,-20,112,-38,-18,53,-22,-5,24,-7,-13,-40,23,29,-18,-127,45,-45,-125,85,-33,-75,55,52,-64,0,-34,19,-11,-5,-24,69,10,46,31,49,-127,71,78,-16,2,29,-16,31,8,-2,5,-1,-12,20,-80,42,-3,73,-5,44,60,-18,30,-49,-21,26,9,35,16,63,11,7,43,-5,-26,3,-64,-2,-16,35,-12,14,-40,127,-78,-23,-41,83,-30,-26,11,-80,-5,69, 
  /* [0][1][][] */ -76,-66,46,-22,-47,114,-42,121,-49,-13,2,-125,12,-106,83,22,5,-94,-10,91,21,-59,43,57,-77,1,127,-22,-26,66,118,-93,-127,115,-97,-69,-30,45,-24,9,-64,-26,-6,-14,-51,86,-17,40,15,84,23,10,32,-56,19,19,127,103,-88,-58,127,-53,-2,127,82,-37,-32,-7,104,57,127,74,-39,80,-13,22,8,22,-31,11,-46,127,-69,113,-5,61,-50,31,94,-127,-40,64,127,-48,-28,-3, 63,127,36,-96,127,81,-17,31,-127,127,127,-33,-58,-127,-127,127,127,-92,-112,-38,47,57,-116,127,-97,-76,-42,127,-84,109,-127,-127,-54,127,117,127,127,-127,-104,105,-64,-95,111,-127,-127,-73,-103,-127,127,-115,70,38,127,127,127,-127,87,-127,-127,127,0,-63,-127,-82,-127,127,-127,127,-117,-85,-100,-75,-127,-65,127,127,-127,127,-73,127,127,51,-32,-127,55,79,87,42,125,20,127,69,-62,18,127,-113, -65,-26,-21,24,-56,-124,0,-23,44,-73,-21,127,-20,95,37,10,-7,54,4,127,-38,-72,-35,2,-59,103,-101,-24,-67,-27,6,-61,-102,80,-13,-11,-55,68,-77,24,127,2,-31,29,-48,-22,9,51,8,114,-1,-10,-37,-71,49,28,94,49,0,31,-49,127,97,-61,-17,8,37,-6,-58,127,-18,-54,-3,-25,-20,-16,18,21,70,-34,-73,-17,56,26,-12,45,53,17,37,116,-42,51,-47,40,-35,25, 
  /* [0][2][][] */ -75,4,6,-28,4,-40,33,67,33,-70,-29,-28,13,37,-27,-5,4,48,25,27,-11,-78,-12,31,-23,-31,85,-66,79,41,53,22,19,46,-29,-60,4,28,-5,24,-53,-14,-75,47,-21,83,-2,36,-11,-31,7,-24,45,-6,28,2,-48,21,-35,18,14,-12,20,8,3,-50,-36,22,-23,16,117,14,16,-24,24,8,10,12,-77,-21,-24,33,24,24,-127,-1,39,-39,-58,-93,-39,-91,15,43,-24,-12, 126,25,-127,-45,-82,-38,19,23,-78,-11,-4,-92,-52,110,-16,35,26,-79,-20,-127,127,-79,-25,71,-98,127,-33,33,-12,-26,8,-11,-48,72,32,0,-27,-23,127,127,5,-22,55,-52,-75,95,-125,-37,-27,-11,-127,-127,-54,-28,21,23,-68,-26,19,31,-32,-14,12,-35,-52,25,62,-24,127,61,-38,-61,12,-58,-2,0,97,-1,52,11,27,-125,-36,3,16,36,127,40,-78,23,-29,-127,33,69,-10,35, -79,1,6,-24,5,-88,-127,15,11,-63,-8,46,49,-13,25,-6,-3,-36,20,21,-28,-80,15,20,13,-65,-12,11,-19,-46,-2,11,49,23,-19,-33,-54,54,34,-42,24,-12,-48,-19,-33,127,8,25,-6,19,-7,-36,22,0,24,-13,-37,-3,19,-40,-34,20,102,-15,66,-20,4,32,23,-19,-35,0,-19,14,-28,17,40,-4,69,-32,8,-21,-5,-15,55,42,58,-40,68,80,-19,-54,-9,22,-36,-17, 
};
const TfArray<4, int> tensor_dimension11 = { 4, { 1,3,3,96 } };
const TfArray<96, float> quant11_scale = { 96, { 0.0056219296529889107, 0.0044783907942473888, 0.0090113002806901932, 0.0083536254242062569, 0.0083687454462051392, 0.0040650470182299614, 0.0062310327775776386, 0.0044518946669995785, 0.0089078787714242935, 0.0080287624150514603, 0.0135107496753335, 0.0052673104219138622, 0.0089452806860208511, 0.0067915064282715321, 0.010962077416479588, 0.0043695145286619663, 0.0048895515501499176, 0.0054883449338376522, 0.0066036959178745747, 0.0086972024291753769, 0.0052864574827253819, 0.0014869323931634426, 0.0082838721573352814, 0.0036966041661798954, 0.002673066221177578, 0.0070149707607924938, 0.0066565787419676781, 0.0058754575438797474, 0.0025941338390111923, 0.015883373096585274, 0.012272898107767105, 0.0053548743017017841, 0.0018375266809016466, 0.0020200342405587435, 0.0047861477360129356, 0.015802076086401939, 0.0093736229464411736, 0.011510608717799187, 0.0089086014777421951, 0.0023038838990032673, 0.0055310335010290146, 0.0082805277779698372, 0.011501006782054901, 0.0098794698715209961, 0.0068689496256411076, 0.0041080000810325146, 0.0027241616044193506, 0.019454613327980042, 0.030985914170742035, 0.0044557829387485981, 0.018371032550930977, 0.0095174498856067657, 0.0077762654982507229, 0.0030004840809851885, 0.0064764474518597126, 0.0024529127404093742, 0.0050763161852955818, 0.016780484467744827, 0.00053311919327825308, 0.008377942256629467, 0.01022839080542326, 0.014155720360577106, 0.0061121494509279728, 0.0055389543995261192, 0.0041995923966169357, 0.0054361880756914616, 0.010744376108050346, 0.022331444546580315, 0.010687272995710373, 0.4710732102394104, 0.0061456551775336266, 0.0074498639442026615, 0.0099484752863645554, 0.0042560710571706295, 0.005166555754840374, 0.015598572790622711, 0.0085649881511926651, 0.0026365651283413172, 0.0032998467795550823, 0.0068423701450228691, 0.0037222295068204403, 0.0054940246045589447, 0.0063153635710477829, 0.013825639151036739, 0.0022875547874718904, 0.008028796873986721, 0.0035107641015201807, 0.018742380663752556, 0.0085826264694333076, 0.0043312679044902325, 0.01274188794195652, 0.0030057148542255163, 0.0037801829166710377, 0.0042797494679689407, 0.014961410313844681, 0.0096354279667139053, } };
const TfArray<96, int> quant11_zero = { 96, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant11 = { (TfLiteFloatArray*)&quant11_scale, (TfLiteIntArray*)&quant11_zero, 3 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int32_t tensor_data12[96] = { 4911, 3392, 10167, 24182, 13890, -6389, -6515, 8042, 35888, -7098, 12567, -122, 3866, 12852, 21250, 8169, 10362, 18164, 9326, 2434, -3377, -2342, 6217, -3078, 5795, -2644, 22684, 6785, 8058, 48648, 39957, 18214, 6574, 587, 15313, 1325, 3932, 11943, 109743, -1809, 36622, 19778, 67146, -4751, 14623, 5790, 7629, 21373, 42832, 7604, -2222, 16278, -9471, -120, -4240, 3619, 1250, 33935, 6999, 18731, 8508, 21626, 10950, 7012, 27861, 16210, 10812, -9993, 12648, -32239, 7286, 1262, 110282, 6280, -7121, -5859, 9450, -93, 1581, -1997, 21899, 10871, 3943, 13502, 5228, -8810, 12071, 206091, 7042, 6621, 20075, -3232, 12916, 7977, 8568, 4584, };
const TfArray<1, int> tensor_dimension12 = { 1, { 96 } };
const TfArray<96, float> quant12_scale = { 96, { 0.0001309376530116424, 0.00030040819547139108, 0.0001793099072529003, 9.8885771876666695e-05, 0.00020775769371539354, 0.00013590545859187841, 0.0002007011353271082, 0.00019723376317415386, 7.1713511715643108e-05, 0.00020752685668412596, 0.00019576174963731319, 0.00013584551925305277, 0.00018029584316536784, 0.00018674855527933687, 0.00010188164742430672, 0.00011700159666361287, 8.2109218055848032e-05, 8.2083686720579863e-05, 0.00022488887771032751, 0.00014298595488071442, 0.00017786526586860418, 0.00014781249046791345, 0.00022697732492815703, 0.00028194033075124025, 0.00042764522368088365, 0.00016593089094385505, 0.00011350904242135584, 0.00017018227663356811, 0.00023427316045854241, 7.1740920247975737e-05, 7.0067224442027509e-05, 0.00011109756451332942, 0.00021799353999085724, 0.00018883599841501564, 0.00010717914847191423, 0.00013346810010261834, 0.00014697889855597168, 0.00015099738084245473, 2.729019797698129e-05, 0.00041723749018274248, 6.6012136812787503e-05, 8.5978710558265448e-05, 3.7926536606391892e-05, 0.0002698204480111599, 0.00019715649250429124, 0.0001683639275142923, 0.00017227610806003213, 0.00011106325109722093, 8.9644978288561106e-05, 0.00026149774203076959, 0.00013969278370495886, 9.3499300419352949e-05, 0.00013352544920053333, 0.00021518117864616215, 0.00028575723990797997, 0.00030007434543222189, 0.00015461612201761454, 6.1782164266332984e-05, 0.00024191872216761112, 8.7859771156217903e-05, 0.0001911172439577058, 8.1389203842263669e-05, 0.00015188184625003487, 0.00018701466615311801, 8.7624481238890439e-05, 0.0001203985302709043, 0.0001207343302667141, 0.00012219688505865633, 0.00013265985762700438, 4.4168366002850235e-05, 0.00015968384104780853, 0.00014735895092599094, 2.1311325326678343e-05, 0.00015271498705260456, 0.00026045797858387232, 0.00021421078417915851, 0.00013649814354721457, 0.00023269526718650013, 0.000256718834862113, 0.00012954436533618718, 9.6550429589115083e-05, 0.00014059324166737497, 0.00014729595568496734, 0.00013873117859475315, 0.00022280885605141521, 0.00011255840945523232, 0.00016277375107165426, 1.9629056623671204e-05, 0.00015459053975064307, 0.0002098060940625146, 6.7676621256396174e-05, 0.00023747781233396381, 0.0001384196657454595, 0.00017992760695051402, 0.00015019440616015345, 0.00018821207049768418, } };
const TfArray<96, int> quant12_zero = { 96, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant12 = { (TfLiteFloatArray*)&quant12_scale, (TfLiteIntArray*)&quant12_zero, 0 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int8_t tensor_data13[96*1*1*16] = { 
  /* [0][0][][] */ 21,127,10,12,-21,49,47,99,104,35,23,106,-55,-4,22,-112, 
  /* [1][0][][] */ -30,20,-44,-32,34,45,127,-51,-25,47,52,-7,-2,40,40,14, 
  /* [2][0][][] */ -41,41,33,-90,38,-1,-32,7,22,7,127,59,27,-7,39,15, 
  /* [3][0][][] */ 15,30,95,-11,-17,2,2,28,-41,45,-31,4,61,-28,-67,-127, 
  /* [4][0][][] */ -36,1,-35,39,7,-22,69,127,-74,-73,45,-11,102,118,-29,28, 
  /* [5][0][][] */ 49,28,127,37,-25,50,-58,83,-16,78,-42,-60,16,47,-104,-9, 
  /* [6][0][][] */ -65,18,106,12,-33,-19,-13,-21,34,56,23,-76,109,-49,-127,-41, 
  /* [7][0][][] */ -1,21,76,-17,-63,-96,-22,-8,-48,-21,-87,-127,-8,-41,12,-77, 
  /* [8][0][][] */ 63,26,-61,73,-22,38,-8,30,40,127,70,-119,-73,-51,-47,56, 
  /* [9][0][][] */ 91,40,23,125,19,-100,15,82,29,19,71,19,127,-83,-123,-7, 
  /* [10][0][][] */ -20,-127,58,-37,-49,0,-18,-48,-72,48,52,-31,38,-45,-13,83, 
  /* [11][0][][] */ -4,-67,-18,-21,-73,-93,5,-127,-33,-120,-54,15,-83,-20,126,18, 
  /* [12][0][][] */ -127,12,55,14,20,16,-78,1,46,-13,-42,-3,-98,72,5,49, 
  /* [13][0][][] */ -46,-12,-127,14,-7,0,20,-5,7,7,19,-11,-17,67,69,56, 
  /* [14][0][][] */ -68,-10,79,-8,-29,43,-27,77,51,127,85,35,15,-26,-50,-12, 
  /* [15][0][][] */ 26,39,-26,38,76,32,127,43,22,-58,-26,-45,28,18,-8,-92, 
  /* [16][0][][] */ 0,-89,-18,47,-9,-27,-23,-56,83,22,57,-49,41,5,36,127, 
  /* [17][0][][] */ -74,-34,-27,47,-57,-48,-2,-127,49,-73,-26,-83,-59,-78,-22,77, 
  /* [18][0][][] */ -34,58,10,49,39,49,5,-60,-70,10,-72,-127,12,-43,-4,41, 
  /* [19][0][][] */ -49,-49,-37,28,-40,-61,23,-74,-21,-127,-47,-5,-17,15,72,76, 
  /* [20][0][][] */ -61,-25,1,-75,-127,-74,24,49,24,-6,79,-71,9,39,8,9, 
  /* [21][0][][] */ 67,72,0,12,84,60,-28,34,66,127,-105,90,-62,29,-80,-91, 
  /* [22][0][][] */ 31,26,-52,-17,54,-52,63,12,-127,36,50,42,-4,21,29,37, 
  /* [23][0][][] */ 53,-16,-51,5,-24,-38,-5,32,-49,16,48,59,127,-11,-5,-49, 
  /* [24][0][][] */ 23,-37,29,-60,0,-28,-18,-15,-85,-38,-5,-127,14,-55,28,30, 
  /* [25][0][][] */ 3,-7,-14,7,62,76,-73,16,-15,48,-73,8,-26,-13,-44,-127, 
  /* [26][0][][] */ -19,51,64,-35,60,49,6,39,78,36,56,50,74,31,-127,-1, 
  /* [27][0][][] */ 77,-51,71,-26,-127,-100,-112,72,25,-23,-93,-113,-16,-8,-104,36, 
  /* [28][0][][] */ 0,-8,-127,-32,76,-21,59,-35,-26,8,-1,7,-9,2,14,57, 
  /* [29][0][][] */ -8,41,25,127,4,30,59,24,23,2,-68,8,43,1,8,-46, 
  /* [30][0][][] */ -32,17,52,54,3,26,-6,48,60,114,127,-46,57,33,-48,-7, 
  /* [31][0][][] */ -13,-125,-4,-106,75,1,3,-69,-101,-6,70,79,-45,67,59,127, 
  /* [32][0][][] */ 84,53,-47,-12,-8,-1,-77,-22,-21,-42,-49,127,-7,-1,47,12, 
  /* [33][0][][] */ 7,-80,-9,20,78,12,-5,-20,-92,45,92,15,127,50,-51,41, 
  /* [34][0][][] */ 127,105,-29,32,14,-66,-98,55,-57,27,-64,110,11,36,-67,1, 
  /* [35][0][][] */ -48,5,65,63,23,-28,-84,66,104,52,-56,64,114,-10,-127,-22, 
  /* [36][0][][] */ 0,-36,-127,-49,5,-59,32,-15,-32,-6,11,-30,98,33,-2,17, 
  /* [37][0][][] */ 5,21,79,41,-101,5,-34,8,127,50,3,-5,-13,-28,31,-57, 
  /* [38][0][][] */ -127,-36,-56,-101,-42,-29,-25,-22,21,-30,88,-26,-8,-25,97,28, 
  /* [39][0][][] */ 43,-18,-34,127,39,-69,-71,-10,34,16,26,-7,16,-68,20,26, 
  /* [40][0][][] */ -100,50,-41,80,67,102,-44,9,8,88,117,-13,127,54,-111,-46, 
  /* [41][0][][] */ -21,96,-4,-127,-1,110,80,68,-120,8,-108,62,-25,127,34,49, 
  /* [42][0][][] */ -48,-127,-84,-96,-77,30,10,-43,94,-39,114,26,8,-91,21,112, 
  /* [43][0][][] */ -66,-7,-7,31,0,15,-14,-67,-31,-3,-34,-127,-26,-1,0,0, 
  /* [44][0][][] */ -13,28,-37,25,29,-10,38,1,86,36,28,127,0,58,12,21, 
  /* [45][0][][] */ -116,17,-8,-47,-24,-31,12,62,10,33,127,6,105,48,48,121, 
  /* [46][0][][] */ -127,23,66,104,-9,55,-32,-18,27,97,-43,-41,-82,45,-36,-82, 
  /* [47][0][][] */ -127,-18,9,-37,-62,8,44,-42,108,33,-1,-58,19,30,58,-18, 
  /* [48][0][][] */ -17,-10,88,-127,30,13,-73,116,-67,36,-32,38,18,58,-10,-38, 
  /* [49][0][][] */ 20,18,-20,7,14,18,-29,58,-4,15,4,39,-22,14,-15,-127, 
  /* [50][0][][] */ 59,25,-63,-100,-17,-55,-38,-50,92,-41,-9,23,68,-127,0,43, 
  /* [51][0][][] */ 13,-75,-32,-9,41,64,34,-122,-33,-112,4,46,-122,-3,127,-25, 
  /* [52][0][][] */ -6,113,83,-42,-5,-34,-77,104,-109,79,-66,35,49,127,-82,36, 
  /* [53][0][][] */ -3,127,30,-19,-20,-20,-18,39,-26,-7,-79,65,26,-22,-82,-76, 
  /* [54][0][][] */ -60,10,71,-37,-6,19,-28,13,2,1,-11,-26,-43,127,-31,9, 
  /* [55][0][][] */ -27,77,-7,-36,22,-25,60,-10,-39,-51,-32,-26,-53,46,127,-1, 
  /* [56][0][][] */ 28,-65,-79,-27,27,106,14,-127,-70,-49,-76,-40,-1,56,116,17, 
  /* [57][0][][] */ -93,-121,125,-89,-90,56,54,-5,39,66,68,-124,-127,78,34,12, 
  /* [58][0][][] */ 73,127,69,-79,28,88,-118,-5,114,-5,-42,65,28,-126,-93,-6, 
  /* [59][0][][] */ -22,-65,-95,26,-65,-8,51,-103,91,8,-40,-121,-16,-127,-26,3, 
  /* [60][0][][] */ 51,-7,68,-102,-41,108,76,-19,-30,74,-4,127,56,58,26,-14, 
  /* [61][0][][] */ -76,-44,5,-25,-31,63,97,6,52,24,89,9,1,127,-1,49, 
  /* [62][0][][] */ -55,-127,92,-43,-64,102,0,-60,-28,-57,-56,-98,-84,-18,-68,72, 
  /* [63][0][][] */ -11,-75,9,-2,0,-2,11,-14,-23,25,8,28,127,13,2,12, 
  /* [64][0][][] */ -51,57,22,-10,56,-39,42,-68,-22,-124,-1,-127,-38,45,83,85, 
  /* [65][0][][] */ -117,-17,-34,5,8,102,44,-127,-62,20,49,-30,31,44,42,8, 
  /* [66][0][][] */ 97,-75,-86,-66,-39,-94,52,-1,-81,-83,43,-127,76,-13,-106,21, 
  /* [67][0][][] */ -2,67,25,18,81,38,-20,13,24,-34,-124,49,-97,82,-127,-80, 
  /* [68][0][][] */ -14,-47,2,54,-85,-41,-72,-112,120,58,61,94,-103,-127,38,48, 
  /* [69][0][][] */ -94,62,-127,31,-86,10,35,64,106,-20,-115,-107,3,77,61,-94, 
  /* [70][0][][] */ -6,41,-46,-56,-67,-89,-15,-2,-40,52,45,-87,16,36,127,-66, 
  /* [71][0][][] */ 95,103,-50,-74,38,-11,15,45,-96,-127,-43,-41,-112,-15,43,74, 
  /* [72][0][][] */ 16,-17,-57,-24,-29,-43,-59,-127,18,-18,43,-53,-14,51,58,84, 
  /* [73][0][][] */ -23,-124,78,40,-127,45,75,-17,-30,97,-30,-117,50,-54,-24,-53, 
  /* [74][0][][] */ 38,-2,-16,127,-53,-50,-91,-39,19,-33,-1,3,-14,-114,7,-6, 
  /* [75][0][][] */ -90,57,8,-33,-5,75,-3,99,66,127,-6,-17,-44,-52,-6,-25, 
  /* [76][0][][] */ -29,-39,-81,-27,-52,-15,-109,-127,94,-35,85,-57,-53,-87,26,11, 
  /* [77][0][][] */ 16,33,-31,-25,-22,-15,-28,-15,127,47,-112,47,66,34,-2,-97, 
  /* [78][0][][] */ -127,18,21,46,90,75,-6,21,10,-3,-70,49,-18,62,-17,-37, 
  /* [79][0][][] */ 112,-11,-17,-27,127,70,102,75,78,69,-22,38,-30,10,15,-75, 
  /* [80][0][][] */ -35,30,70,-116,33,-57,48,44,11,-37,-69,21,-19,127,-49,-17, 
  /* [81][0][][] */ 39,12,24,-71,73,31,-7,27,-127,-53,0,-21,-3,52,-83,15, 
  /* [82][0][][] */ -25,89,90,-16,21,-16,-42,27,-15,66,-127,29,-15,-41,-110,-23, 
  /* [83][0][][] */ 127,31,-89,-20,-66,-69,66,55,-6,-32,-41,4,11,-55,42,42, 
  /* [84][0][][] */ 127,-7,-45,-16,-39,-25,62,24,4,-2,72,-110,-6,-36,72,24, 
  /* [85][0][][] */ 45,95,-48,-28,31,-46,62,19,-2,-101,-127,41,-3,23,97,47, 
  /* [86][0][][] */ 73,50,40,-61,-22,-29,-68,-58,-5,-126,-87,-127,-65,-97,-56,6, 
  /* [87][0][][] */ 127,-39,-22,-7,-23,-9,33,-5,-23,-12,-36,10,38,-5,51,51, 
  /* [88][0][][] */ 75,126,67,23,-47,-127,-59,47,96,-26,-67,100,-88,-58,33,60, 
  /* [89][0][][] */ 18,-10,2,-37,-21,-1,18,-56,1,-108,-127,52,-75,-21,29,-17, 
  /* [90][0][][] */ -94,-71,13,-49,-115,-61,29,-127,80,-79,69,-17,-85,-3,41,66, 
  /* [91][0][][] */ -94,91,-36,68,-46,-121,-34,39,122,56,36,104,49,-4,95,127, 
  /* [92][0][][] */ 10,27,-32,39,16,-4,-33,-67,22,-36,-127,-63,-48,-28,59,-52, 
  /* [93][0][][] */ -5,81,-39,-95,55,10,-34,20,-15,-127,-71,74,-34,67,84,-23, 
  /* [94][0][][] */ -108,28,19,97,35,-23,-127,-53,-43,-50,-62,-33,-2,18,18,12, 
  /* [95][0][][] */ 13,81,11,-63,48,16,8,-51,-13,-118,-127,3,18,-45,9,25, 
};
const TfArray<4, int> tensor_dimension13 = { 4, { 96,1,1,16 } };
const TfArray<96, float> quant13_scale = { 96, { 0.00049445533659309149, 0.0011344210943207145, 0.00067712180316448212, 0.0003734189085662365, 0.00078454817412421107, 0.0005132150836288929, 0.00075790070695802569, 0.00074480701005086303, 0.00027080925065092742, 0.00078367645619437099, 0.00073924829484894872, 0.00051298871403560042, 0.00068084493977949023, 0.00070521206362172961, 0.00038473212043754756, 0.00044182906276546419, 0.00031006618519313633, 0.00030996976420283318, 0.00084924005204811692, 0.00053995288908481598, 0.00067166640656068921, 0.00055817916290834546, 0.00085712660802528262, 0.0010646814480423927, 0.0016149018192663789, 0.00062659906689077616, 0.00042864025454036891, 0.00064265343826264143, 0.00088467763271182775, 0.00027091274387203157, 0.00026459243963472545, 0.00041953386971727014, 0.00082320143701508641, 0.00071309483610093594, 0.00040473690023645759, 0.00050401093903928995, 0.00055503129260614514, 0.00057020614622160792, 0.00010305502655683085, 0.0015755994245409966, 0.00024927934282459319, 0.00032467843266204, 0.00014322066272143275, 0.0010189135791733861, 0.00074451521504670382, 0.00063578685512766242, 0.00065056030871346593, 0.00041940429946407676, 0.00033852321212179959, 0.00098748481832444668, 0.00052751699695363641, 0.00035307815414853394, 0.00050422752974554896, 0.00081258121645078063, 0.001079095178283751, 0.0011331603163853288, 0.00058387150056660175, 0.00023330585099756718, 0.00091354927280917764, 0.00033178180456161499, 0.00072170939529314637, 0.0003073472180403769, 0.0005735461600124836, 0.00070621701888740063, 0.00033089329372160137, 0.00045465677976608276, 0.00045592486276291311, 0.00046144786756485701, 0.00050095882033929229, 0.00016679146210663021, 0.00060300854966044426, 0.00055646651890128851, 8.047722076298669e-05, 0.00057669228408485651, 0.00098355847876518965, 0.00080891675315797329, 0.00051545322639867663, 0.00087871908908709884, 0.00096943846438080072, 0.00048919388791546226, 0.00036460004048421979, 0.00053091737208887935, 0.00055622862419113517, 0.00052388571202754974, 0.00084138533566147089, 0.00042505041346885264, 0.00061467685736715794, 7.4124523962382227e-05, 0.0005837748758494854, 0.00079228344839066267, 0.00025556486798450351, 0.00089677923824638128, 0.00052270939340814948, 0.0006794543587602675, 0.00056717393454164267, 0.0007107387064024806, } };
const TfArray<96, int> quant13_zero = { 96, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant13 = { (TfLiteFloatArray*)&quant13_scale, (TfLiteIntArray*)&quant13_zero, 0 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int32_t tensor_data14[16] = { 20278, 2864, -23193, -19663, 14498, -348, 6004, -7890, -19906, -11019, -18841, 56773, 14645, 6904, 36228, 199, };
const TfArray<1, int> tensor_dimension14 = { 1, { 16 } };
const TfArray<16, float> quant14_scale = { 16, { 0.00018854941299650818, 0.00021804179414175451, 0.00018075791012961417, 0.000159393937792629, 0.00019054404401686043, 0.0002031627664109692, 0.00015257402264978737, 0.00016638427041471004, 0.00017117237439379096, 0.00017278817540500313, 0.00020745946676470339, 0.00033370545133948326, 0.00019618411897681653, 0.00019713550864253193, 0.00030728796264156699, 0.00021270998695399612, } };
const TfArray<16, int> quant14_zero = { 16, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant14 = { (TfLiteFloatArray*)&quant14_scale, (TfLiteIntArray*)&quant14_zero, 0 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int8_t tensor_data15[16*1*1*96] = { 
  /* [0][0][][] */ 18,-16,20,-1,51,8,-11,-16,27,45,-76,-74,23,5,8,31,-48,-31,-40,-4,127,-7,19,-22,-35,5,-20,-94,-1,14,-68,38,15,-42,-38,-17,-33,-97,10,49,-42,-14,-24,-20,-24,-7,-40,24,-42,-11,0,1,-24,-34,23,31,8,28,16,9,-112,-38,20,-12,-18,-2,23,10,10,-36,15,0,10,-43,107,22,-12,-70,-40,10,63,2,-8,-66,-20,9,-40,-17,-45,-63,-37,44,32,13,-11,76, 
  /* [1][0][][] */ 60,-11,47,35,1,-79,-49,-26,-34,-55,-89,-43,-45,6,-36,-27,-28,21,0,47,2,29,3,13,48,-18,-11,-127,-13,22,-77,-56,-1,-39,-16,31,-48,-28,-14,-27,-47,-12,12,-30,-37,-13,36,-5,14,-15,-9,-21,30,-80,32,1,-11,16,5,-36,-30,-109,2,3,9,-33,12,9,-83,41,47,-15,-29,-8,41,5,6,1,0,21,9,2,38,-3,-85,34,101,13,-44,9,-89,63,45,-29,9,-16, 
  /* [2][0][][] */ -24,15,16,-35,-29,-4,61,-11,15,29,114,127,23,21,112,-71,-82,-73,-6,67,15,7,-54,-12,18,54,-12,88,-28,-11,49,24,59,21,28,5,35,117,-19,69,20,32,4,2,10,-48,-82,16,-4,-23,-25,6,-20,15,-19,-54,-18,5,24,-6,4,-44,45,9,17,39,-22,-36,-8,-16,-1,-34,16,-36,11,3,-6,-42,-4,29,48,38,-69,7,13,81,-42,-23,2,88,38,23,-20,25,-8,75, 
  /* [3][0][][] */ -47,-12,45,-15,16,26,-17,9,-19,51,50,-38,57,-6,33,-38,19,-31,9,48,23,-20,22,14,-14,-14,6,32,-5,-4,12,3,37,34,3,-11,92,18,-13,36,-11,2,18,-15,9,-10,10,30,-31,5,2,16,-30,-17,-12,24,11,-3,19,-3,34,-17,1,1,-5,22,-8,0,24,0,3,-7,46,-3,-2,2,-6,-26,21,-63,4,-22,-1,47,127,33,71,32,22,-18,-8,-33,-42,-29,8,-12, 
  /* [4][0][][] */ 63,41,41,14,30,-72,-34,-6,-30,-1,-50,-10,35,10,36,-50,-19,-1,20,-24,0,-10,84,-16,-18,-50,18,-14,18,5,-8,-37,-27,-58,-38,-9,20,-85,-13,-62,-36,83,-46,-20,-27,-23,52,7,5,15,4,-26,37,-4,-8,-8,-1,-90,17,10,-29,21,3,-77,85,-54,12,2,-71,-10,6,-6,-34,11,-19,-29,-13,71,64,42,1,1,127,6,-16,-21,-30,-56,7,-41,3,-30,-42,-61,-16,-37, 
  /* [5][0][][] */ -10,-10,-21,11,-1,-20,16,43,-31,19,-5,80,-7,-6,25,0,-1,-30,11,24,-9,-46,-44,-26,50,-19,32,23,7,8,42,68,39,-45,8,-51,-21,18,-42,-33,16,73,17,-4,27,-56,47,8,12,-48,-26,21,2,-26,-15,-28,-22,-67,-15,27,60,95,13,-58,33,-17,-25,-39,33,64,127,-30,17,6,-46,-31,-13,41,50,85,31,-34,50,38,22,-80,-21,-7,38,-16,61,-35,-71,-17,-7,-97, 
  /* [6][0][][] */ -4,13,-38,0,-18,-3,-38,26,-15,-51,-29,71,48,-20,-119,-127,73,-29,28,17,2,-43,63,-24,41,-6,-43,-41,-2,6,17,-97,8,-49,-37,9,22,-60,-13,-73,25,-20,-69,-16,46,-30,78,-69,47,-19,16,11,62,18,1,0,16,-22,-18,3,31,111,-15,17,94,17,8,-43,-68,6,-40,-20,-94,40,21,13,-6,126,10,-13,-17,-2,126,-6,-84,-1,0,-16,7,-19,38,14,-39,-1,4,-39, 
  /* [7][0][][] */ 42,-7,117,-44,10,-6,-23,-23,-17,5,-35,-50,-73,-20,-9,-16,-21,-14,-18,40,51,78,-32,1,-43,4,51,-59,12,-3,-68,13,59,59,6,4,27,-2,-33,53,21,-7,0,9,-6,-7,-35,2,-31,0,-5,-37,-25,28,23,-57,11,-16,33,6,-56,-56,31,-8,4,83,-1,-3,27,-19,24,20,34,-59,56,11,25,-20,-25,5,61,-34,16,-7,-26,127,44,1,-100,125,-31,94,81,50,13,25, 
  /* [8][0][][] */ -127,-16,10,-20,44,18,29,9,14,68,-28,-16,-17,22,23,86,-9,12,-85,54,49,50,-45,6,50,5,48,41,-4,-32,10,31,35,107,19,-1,2,54,-20,87,26,-7,78,-13,-15,-2,16,81,-41,-8,-20,28,-95,19,-16,19,-10,13,-25,14,14,30,52,-12,-61,61,-15,-17,78,19,55,-2,24,-82,1,-11,-21,-78,-26,-7,71,-14,-14,6,25,1,50,18,8,7,11,40,59,26,4,42, 
  /* [9][0][][] */ 9,-60,-30,-65,-1,-65,-32,21,-18,-9,39,15,-25,-21,39,33,42,-4,38,16,-5,-30,4,-23,41,-27,49,-29,-30,-32,-99,-2,99,-32,32,-17,63,16,-76,-35,36,44,34,-68,-5,-44,72,9,-50,-19,-20,-10,13,-18,-13,64,-21,-33,-18,12,44,26,-4,8,-35,127,-32,-22,26,55,-12,-17,39,-41,-96,-8,-1,6,41,20,-11,-31,-4,8,92,75,3,32,-65,83,35,96,3,-24,-3,-118, 
  /* [10][0][][] */ 15,3,0,-25,118,-96,-47,-35,18,-2,22,-43,-54,7,0,-24,51,30,-32,28,-39,17,50,-26,-17,19,28,24,17,10,-55,34,109,73,-30,-17,100,-1,13,-56,13,65,30,-9,25,3,36,15,-41,3,-31,-28,16,19,35,12,8,21,17,18,-8,25,-45,23,2,38,15,-5,21,64,38,41,45,-26,-70,22,-22,32,58,54,-21,-4,7,19,127,29,84,8,-75,117,40,48,87,-11,10,-80, 
  /* [11][0][][] */ 41,0,33,-31,93,-25,-66,-35,1,67,-39,4,-51,2,42,51,15,7,-91,-8,56,19,4,-23,-67,-24,70,29,15,0,2,36,1,13,6,-31,10,-60,16,-39,-17,71,12,-41,9,-17,25,18,-123,-4,-16,-4,-11,-7,9,27,-3,-96,6,48,-30,8,24,-42,-74,-2,-13,9,19,85,100,-7,-127,-67,101,-2,-1,16,14,46,35,-6,50,7,-9,-32,-8,-13,5,54,-14,53,10,-54,5,17, 
  /* [12][0][][] */ -24,32,106,-76,0,-55,10,18,49,-24,1,-9,-84,15,-116,-78,18,12,18,69,-24,92,-2,-2,15,-53,-5,-26,-47,-22,-10,-84,76,127,-74,8,60,19,-17,-43,-13,-24,-10,26,-30,-12,37,-14,-2,-21,-14,-7,-13,9,6,-5,-2,-51,42,6,53,14,-1,-80,90,115,-21,-32,-51,25,-24,-7,-67,-59,-90,15,8,-16,-12,-29,8,-16,-67,29,-57,73,48,-11,-79,33,-12,62,72,-5,20,-68, 
  /* [13][0][][] */ 45,4,-4,35,-6,29,36,1,-1,-14,7,22,-34,-21,-56,-115,70,-25,-6,17,-11,16,10,-8,-35,18,24,45,-14,-19,56,-6,53,10,-1,26,66,-65,7,-65,29,31,54,27,52,-3,4,-107,14,-37,11,13,43,72,5,-18,-25,7,-5,5,59,127,-15,37,82,23,-42,-65,26,34,-36,-41,-91,61,-60,16,-34,91,15,24,59,11,48,37,-46,3,-28,-1,-14,80,63,-23,19,82,5,-28, 
  /* [14][0][][] */ -11,-27,-108,43,1,28,-29,10,13,-49,-47,6,-23,12,-39,5,77,26,-15,-61,-2,-28,63,-10,-57,34,8,-3,-12,-29,16,13,-72,6,-5,-17,-63,-45,15,-80,-6,-52,-9,-14,40,57,52,-29,-24,26,3,23,12,10,41,12,6,94,20,18,-13,42,-19,127,-25,-68,-9,27,0,38,-63,1,-108,61,8,19,1,56,8,-30,-32,28,28,-4,-45,-42,43,24,13,8,27,1,-77,40,8,12, 
  /* [15][0][][] */ 77,51,-23,18,-28,28,57,-12,11,-10,-37,70,-127,-15,-11,37,9,22,12,-63,-2,-16,17,34,-20,-16,9,34,10,18,54,4,-29,16,-36,9,7,-16,13,-63,13,-20,-40,28,-7,23,17,-77,61,1,22,50,13,-24,18,-13,-8,-36,-43,1,-60,56,26,-48,20,-37,-20,0,-6,-26,-40,-11,57,66,10,-29,-1,-33,50,-8,-30,13,34,-11,-80,12,-35,-3,-11,63,64,-113,29,-3,1,1, 
};
const TfArray<4, int> tensor_dimension15 = { 4, { 16,1,1,96 } };
const TfArray<16, float> quant15_scale = { 16, { 0.0080133499577641487, 0.0092667760327458382, 0.0076822107657790184, 0.0067742420360445976, 0.0080981217324733734, 0.0086344173178076744, 0.0064843958243727684, 0.0070713311433792114, 0.0072748255915939808, 0.0073434971272945404, 0.008817027322947979, 0.014182480983436108, 0.0083378246054053307, 0.0083782589063048363, 0.013059738092124462, 0.0090401740744709969, } };
const TfArray<16, int> quant15_zero = { 16, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant15 = { (TfLiteFloatArray*)&quant15_scale, (TfLiteIntArray*)&quant15_zero, 0 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int32_t tensor_data16[96] = { 15209, -7646, 1093, 71340, -487, -14026, -15662, -25027, -3846, -4389, -4202, -1941, 7849, -11749, 1779, -6983, -2839, 23098, 9399, 1036, -2346, -7406, -522, -718, 24575, -9523, -1834, -1255, -13217, -26761, 4641, -1664, 3493, -2636, 1343, 26708, 188, -2439, 14883, 3399, -630, 1274, -4853, -11738, -4575, 55375, -10695, 24692, 38230, -23497, -4851, -1152, 1041, -1665, -10742, -182, -22246, 914, -2984, -8640, 3468, 1001, -13630, -7311, 805, 11220, 18172, 32574, -7270, 775, -9893, -4467, 16214, 13230, -5952, -7061, 16151, 24536, -5896, -10239, -2383, -1072, -1990, -1498, 11975, -614, 3141, 1581, -9093, -3378, -3966, -1301, -11627, -7299, 47, 17430, };
const TfArray<1, int> tensor_dimension16 = { 1, { 96 } };
const TfArray<96, float> quant16_scale = { 96, { 0.00018140065367333591, 0.00011035210627596825, 0.00043757437379099429, 3.1155752367340028e-05, 0.00018166522204410285, 0.0001133006953750737, 0.00024645897792652249, 4.3339150579413399e-05, 0.00016275122470688075, 0.00038408738328143954, 0.00028826374909840524, 0.00018158789316657931, 0.00021537902648560703, 0.00028042416670359671, 0.0002427221043035388, 0.00021819543326273561, 9.6308554930146784e-05, 0.00012046769552398473, 0.00014663793263025582, 0.00031170924194157124, 0.0003326765145175159, 9.7359945357311517e-05, 0.00011456822539912537, 0.00030592517578043044, 0.00015203005750663579, 0.00019608397269621491, 0.00010387667862232774, 0.00033626757794991136, 7.1417438448406756e-05, 2.7650978154269978e-05, 0.00015547375369351357, 0.00015421108400914818, 0.00011965415615122765, 0.00019003709894604981, 0.00023260517627932131, 9.3685826868750155e-05, 0.00046160165220499039, 0.00012598161993082613, 3.1550400308333337e-05, 0.00018009229097515345, 0.00014897617802489549, 0.00037217521457932889, 0.00025652203476056457, 0.00012832594802603126, 0.00021102243044879287, 2.8944807127118111e-05, 0.00018119355081580579, 0.00013464328367263079, 0.00010190570174017921, 9.305127605330199e-05, 0.00013810246309731156, 8.6011379607953131e-05, 0.00013367648352868855, 0.00021893583470955491, 0.00017041234241332859, 0.00031128840055316687, 0.00017539507825858891, 0.00027011439669877291, 6.4395957451779395e-05, 2.0520090401987545e-05, 0.00022704756702296436, 0.00011706117220455781, 0.00015438414993695915, 0.00016065291129052639, 0.00027130995295010507, 0.00029978551901876926, 2.6191682991338894e-05, 5.7487548474455252e-05, 0.00024741815286688507, 0.00020567733736243099, 0.00021051481598988175, 8.6091567936819047e-05, 0.00029649125644937158, 0.00020040506205987185, 0.00013996049528941512, 0.00015108980005607009, 0.00035003578523173928, 6.4169667894020677e-05, 0.00018610361439641565, 0.00020156658138148487, 0.00011859762162202969, 0.0017977823736146092, 0.00018811468908097595, 9.4803064712323248e-05, 9.0631998318713158e-05, 0.00022828608052805066, 0.0001218047909787856, 0.00011588021152419969, 0.00015465613978449255, 0.00026913287001661956, 0.00016219302779063582, 0.00013247475726529956, 0.00012411331408657134, 0.00038335841963998973, 0.024537580087780952, 0.00014242991164792329, } };
const TfArray<96, int> quant16_zero = { 96, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant16 = { (TfLiteFloatArray*)&quant16_scale, (TfLiteIntArray*)&quant16_zero, 0 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int8_t tensor_data17[1*3*3*96] = { 
  /* [0][0][][] */ -32,-3,-6,127,-31,33,-66,-42,22,-2,127,-48,-7,-15,-21,95,27,33,-126,25,127,-17,79,-33,-9,22,19,62,24,8,29,79,-19,25,-10,-22,8,82,-64,-65,30,21,11,48,-120,-41,56,-9,-10,1,-3,-9,67,-1,12,19,-7,-48,52,-12,54,-35,96,35,-16,-11,13,-64,69,27,-57,3,21,-50,93,7,20,-127,61,30,40,28,127,-55,51,11,-23,-42,52,-5,-32,127,33,12,-8,-5, -59,-41,6,-19,47,3,-14,-127,40,5,-87,-34,-5,-15,0,60,8,-62,33,-20,46,-108,127,27,-77,-14,-124,-36,30,32,-47,22,77,24,-11,-5,-20,127,-34,-127,-5,-18,-23,28,55,-127,127,-40,-75,59,53,4,43,-62,47,62,35,35,-121,88,99,53,-18,-11,53,-31,-90,9,48,-34,-1,51,-19,-24,123,-1,-25,-46,-31,84,-61,76,3,-18,-2,25,44,-53,-9,67,-7,91,-107,-30,20,-107, 4,-22,-15,-75,26,32,67,42,1,22,7,111,-12,-12,-40,127,-30,-19,-34,18,61,42,46,-31,-12,-22,5,-33,-7,-2,50,-127,72,6,-7,-26,15,20,-56,-54,-16,-1,-17,27,44,-37,62,-1,5,11,14,-7,20,3,-2,27,-5,21,12,-17,4,-4,9,-15,-13,-18,17,-43,-127,-19,84,-6,-127,-27,37,11,8,-31,28,7,-30,28,4,-41,-85,22,44,26,-13,-26,11,-33,11,20,-7,-50, 
  /* [0][1][][] */ -48,66,-12,47,-98,25,-29,-31,25,101,-26,-41,-36,-31,-42,107,127,-56,-98,-6,33,-127,-14,10,-30,-34,-123,8,39,28,-40,9,-127,-65,-63,2,54,-19,-55,9,-18,88,-26,-42,23,-34,6,-34,127,49,-2,26,62,3,-18,-18,31,11,-125,126,-64,-127,-21,127,-63,-36,-74,104,-64,127,-62,47,-3,-53,63,20,-35,-47,127,36,127,42,9,-17,127,15,-95,40,2,-25,-93,74,97,106,22,-45, 127,127,127,55,-42,-127,127,45,127,-127,24,-127,-98,127,127,27,-4,-127,39,-127,8,-3,-61,127,127,127,-63,-127,127,127,-127,125,-25,-127,-127,127,-127,-54,127,95,-127,-127,127,127,127,-124,-98,127,-27,127,-127,-127,-127,127,127,-127,127,-127,-62,39,-127,-45,-127,-47,127,127,-97,127,96,-98,-93,127,5,127,-127,-127,-127,117,-98,127,-48,127,32,127,-22,-127,-32,-116,-106,-127,-8,-127,-31,-127,-127,127, -38,92,-29,-30,127,71,8,80,11,23,-2,-3,-28,-30,-11,-6,-99,-100,-127,36,11,56,-9,-113,-29,-35,127,50,15,41,66,-43,108,-46,113,-1,64,-15,-112,-3,23,17,-41,-17,-24,-63,3,-41,96,28,-7,47,2,0,-85,-13,26,25,127,-127,-9,125,16,-21,-98,-32,-87,95,3,-32,127,23,-27,-43,48,53,-29,17,-43,-4,-64,13,2,27,-125,13,127,-56,38,-10,127,-22,-112,39,27,26, 
  /* [0][2][][] */ -17,-50,-32,-6,-22,52,34,55,-1,19,-27,28,29,-37,-45,-46,40,-1,66,33,-45,70,-19,-26,5,-20,21,2,-15,-5,50,-101,-37,77,7,-32,40,-57,-50,15,8,27,-67,20,39,-81,-4,-8,0,15,20,-2,18,0,-25,-2,6,85,-65,26,-26,-5,-1,61,-13,-18,16,-75,-55,9,-64,-6,-27,-67,3,56,10,8,87,20,29,33,-23,-4,38,20,-24,23,34,31,39,0,83,71,-11,-47, -23,-14,-30,8,-44,43,-22,86,5,0,45,-8,127,-5,-59,-40,-8,-38,22,16,-49,88,-33,-122,-48,-38,99,58,16,62,43,-32,-108,58,-1,-29,-30,-17,-90,12,44,-10,-13,43,-41,-73,-20,-49,-75,37,78,24,-4,-89,19,43,29,21,67,-67,15,-66,-52,14,15,-23,-127,-50,-10,-35,-27,20,24,-25,-24,11,-47,13,-57,20,24,20,-8,6,7,39,-91,127,19,127,-26,-20,127,-6,44,83, 1,-24,-31,4,21,79,-25,22,1,17,-5,-22,24,-49,14,34,-56,-32,23,30,-27,33,-23,-1,4,15,20,34,-3,-11,47,41,32,50,27,-34,7,-46,-92,3,8,-9,13,3,-118,-56,-10,3,10,-5,7,9,-14,21,-31,-9,11,-47,43,-58,-2,92,41,-12,-3,-11,27,-53,52,-7,85,-30,19,-71,-14,24,8,7,11,6,-46,30,13,18,-43,55,57,-13,127,34,7,-67,33,-7,-10,-46, 
};
const TfArray<4, int> tensor_dimension17 = { 4, { 1,3,3,96 } };
const TfArray<96, float> quant17_scale = { 96, { 0.0077095278538763523, 0.0046899644657969475, 0.018596909940242767, 0.0013241195119917393, 0.007720771711319685, 0.0048152795061469078, 0.010474506765604019, 0.0018419137923046947, 0.0069169267080724239, 0.016323713585734367, 0.012251208536326885, 0.007717485073953867, 0.0091536082327365875, 0.011918026953935623, 0.010315689258277416, 0.0092733055353164673, 0.0040931133553385735, 0.0051198769360780716, 0.006232112180441618, 0.013247642666101456, 0.014138751663267612, 0.0041377977468073368, 0.0048691495321691036, 0.0130018200725317, 0.0064612776041030884, 0.0083335684612393379, 0.0044147586449980736, 0.014291371218860149, 0.0030352410394698381, 0.0011751665733754635, 0.0066076344810426235, 0.006553970742970705, 0.005085301585495472, 0.0080765765160322189, 0.0098857199773192406, 0.0039816475473344326, 0.019618069753050804, 0.0053542186506092548, 0.0013408920494839549, 0.0076539223082363605, 0.0063314875587821007, 0.015817446634173393, 0.010902185924351215, 0.0054538529366254807, 0.0089684529229998589, 0.0012301543029025197, 0.0077007254585623741, 0.0057223397307097912, 0.0043309922330081463, 0.0039546792395412922, 0.0058693545870482922, 0.0036554837133735418, 0.0056812502443790436, 0.0093047730624675751, 0.0072425245307385921, 0.013229756616055965, 0.0074542909860610962, 0.011479862034320831, 0.0027368282899260521, 0.00087210378842428327, 0.0096495216712355614, 0.0049750995822250843, 0.0065613263286650181, 0.0068277483806014061, 0.011530672200024128, 0.012740883976221085, 0.0011131465435028076, 0.0024432206992059946, 0.010515271686017513, 0.0087412865832448006, 0.0089468797668814659, 0.0036588914226740599, 0.01260087825357914, 0.0085172150284051895, 0.0059483209624886513, 0.0064213164150714874, 0.014876521192491055, 0.0027272107545286417, 0.0079094031825661659, 0.008566579781472683, 0.0050403987988829613, 0.076405748724937439, 0.0079948743805289268, 0.0040291300974786282, 0.0038518598303198814, 0.009702158160507679, 0.0051767034456133842, 0.0049249087460339069, 0.0065728859044611454, 0.011438146233558655, 0.0068932035937905312, 0.005630176980048418, 0.0052748159505426884, 0.016292732208967209, 1.0428471565246582, 0.0060532712377607822, } };
const TfArray<96, int> quant17_zero = { 96, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant17 = { (TfLiteFloatArray*)&quant17_scale, (TfLiteIntArray*)&quant17_zero, 3 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int32_t tensor_data18[96] = { 10947, 7337, 9984, 729, 12215, 4804, 18261, 14639, -3462, 16276, 8693, 1227, 13858, 13562, -1646, -5237, 10033, 8533, 6759, 502, -9807, 9026, 10565, 7365, 5797, 6323, 10857, 6754, 51, 679, 8078, 14549, 20281, 2201, 20570, -2492, 31431, 13801, 10721, 1418, 2176, 35491, 18079, 8924, 9172, 28517, 20269, 18297, 6627, 13237, -524, -1098, 30271, 11026, 19937, 12621, 421, 8460, 8073, 7917, 10540, 5449, 6097, 10908, 9230, 1743, 11759, -879, 15382, 12230, 16432, -3359, -2995, 11563, 2861, 4841, 35693, 12902, 34655, -7803, 8798, -6291, -2905, 2761, 4001, 15329, 5473, 11249, 12596, 2751, 3118, 4780, 15409, 49443, -21569, 17485, };
const TfArray<1, int> tensor_dimension18 = { 1, { 96 } };
const TfArray<96, float> quant18_scale = { 96, { 0.00022357278794515878, 0.00010627415031194687, 8.7648993940092623e-05, 0.00064961065072566271, 0.00010531098814681172, 0.00012852820509579033, 0.00016325946489814669, 0.00020547755411826074, 0.00016887836682144552, 0.00011623455066001043, 0.00017669267253950238, 0.00037352804793044925, 0.00019222778792027384, 0.00034065797808580101, 0.00017506346921436489, 0.00020963462884537876, 0.00021483791351784021, 0.00024539881269447505, 9.1015790530946106e-05, 0.00017962219135370106, 0.00012156978482380509, 0.00021182936325203627, 0.00016441792831756175, 0.00010625820868881419, 0.00028038612799718976, 0.00026764575159177184, 0.00014809273125138134, 0.00014801599900238216, 0.00045102240983396769, 0.00020062313706148416, 0.00014207593630999327, 0.00014867018035147339, 0.00010266818571835756, 0.00017681714962236583, 0.00010185693099629134, 0.00019302919099573046, 6.8785739131271839e-05, 0.0001628603640710935, 8.7941778474487364e-05, 0.00021695913164876401, 0.00022933298896532506, 6.1080791056156158e-05, 0.00011793596058851108, 0.00011118555266875774, 0.00014271055988501757, 0.00010281829599989578, 0.0001377333392156288, 8.2495309470687062e-05, 0.00028755859239026904, 8.1179037806577981e-05, 0.00040387743501923978, 0.00064259051578119397, 9.7805095720104873e-05, 0.00016078242333605886, 0.0001006024976959452, 0.00014325520896818489, 0.00031214789487421513, 0.00015796895604580641, 0.00011369564163032919, 0.0002435278584016487, 0.00015718086797278374, 0.00019061041530221701, 0.00022551204892806709, 0.00021411787020042539, 0.00013159116497263312, 0.00018770075985230505, 0.0001461668434785679, 0.00018318285583518445, 0.00017403594392817467, 9.8296804935671389e-05, 0.00010305327305104584, 0.00016750534996390343, 0.00015338973025791347, 0.00012496946146711707, 0.00014172474038787186, 0.0002177560527343303, 6.6537249949760735e-05, 0.00032325895153917372, 5.901157419430092e-05, 0.00017914791533257812, 0.00012816634261980653, 0.00031412023236043751, 0.00016851734835654497, 0.00025410897796973586, 0.00028132295119576156, 0.00014431182353291661, 0.00021651072893291712, 0.0001329228252870962, 0.0001458579208701849, 0.00027620536275207996, 0.00029271034873090684, 0.00014493113849312067, 0.00012319251254666597, 6.4541862229816616e-05, 0.00014383094094227999, 0.00017092716007027775, } };
const TfArray<96, int> quant18_zero = { 96, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant18 = { (TfLiteFloatArray*)&quant18_scale, (TfLiteIntArray*)&quant18_zero, 0 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int8_t tensor_data19[96*1*1*16] = { 
  /* [0][0][][] */ -86,-7,33,70,-59,-23,30,-33,127,-39,-63,-40,40,-21,28,-46, 
  /* [1][0][][] */ -16,61,61,-50,107,-18,-127,16,-90,-28,-56,55,-45,-6,5,-110, 
  /* [2][0][][] */ -41,-2,-3,12,-100,-127,-109,-124,-94,-80,68,-40,32,-82,85,31, 
  /* [3][0][][] */ 51,29,-24,10,-127,-28,-39,-23,-72,1,109,-96,-79,-23,6,24, 
  /* [4][0][][] */ -1,-69,-83,3,-21,-26,-21,-25,-49,-108,9,53,-32,-127,94,49, 
  /* [5][0][][] */ -38,-57,-53,16,-59,-68,18,-70,80,-80,-44,66,14,-54,127,56, 
  /* [6][0][][] */ -56,22,23,127,26,-10,16,81,-52,38,2,-74,-103,49,34,-81, 
  /* [7][0][][] */ -95,126,-61,127,71,-52,-5,-16,30,76,-56,-19,-68,3,-89,-56, 
  /* [8][0][][] */ 78,-36,2,21,61,20,-51,2,-2,25,-127,47,-45,48,-67,-2, 
  /* [9][0][][] */ 127,-47,-3,36,88,50,4,-7,-10,39,-59,14,18,-6,-70,36, 
  /* [10][0][][] */ -60,-26,13,45,-3,-47,-19,-43,127,-16,-30,-24,-20,-66,15,7, 
  /* [11][0][][] */ -57,-55,-33,-18,36,18,-43,9,2,-50,12,27,127,102,-7,33, 
  /* [12][0][][] */ 9,50,16,127,18,43,-73,-61,36,69,-99,122,-37,-40,-8,22, 
  /* [13][0][][] */ 75,-72,-34,11,127,-20,2,-126,-10,-11,-43,82,53,32,-25,-33, 
  /* [14][0][][] */ -11,-9,-127,18,-27,-93,83,-29,-6,9,34,-100,72,3,69,21, 
  /* [15][0][][] */ 22,13,49,-14,17,-27,-127,-61,-30,-69,-46,57,-88,-62,43,47, 
  /* [16][0][][] */ -124,89,51,58,-68,-49,47,26,70,74,62,-127,-62,-15,30,-48, 
  /* [17][0][][] */ 3,-49,9,-59,-8,-7,127,50,-42,37,22,-6,23,58,14,14, 
  /* [18][0][][] */ 79,114,36,9,58,66,46,60,-48,103,-74,72,-38,27,4,-127, 
  /* [19][0][][] */ -4,76,94,68,87,24,-34,-3,-1,40,-127,122,-77,4,-93,-32, 
  /* [20][0][][] */ 76,-59,-127,-38,-58,99,65,-71,-19,-33,-56,15,-3,-42,53,58, 
  /* [21][0][][] */ 78,-25,18,2,-34,37,127,100,71,66,0,-76,28,-4,30,-3, 
  /* [22][0][][] */ 18,-4,7,-33,-8,35,50,127,-50,6,40,-5,31,95,-88,11, 
  /* [23][0][][] */ 17,16,-47,8,-46,-127,52,9,-57,-29,70,-20,-24,-26,1,95, 
  /* [24][0][][] */ 76,-127,-103,38,40,34,22,-8,-59,39,35,53,-10,47,40,33, 
  /* [25][0][][] */ -127,-35,-41,-18,52,19,2,22,-22,-26,19,-25,50,77,-36,-24, 
  /* [26][0][][] */ -34,45,127,-70,76,30,-72,8,-70,-61,-79,-87,67,91,-19,-95, 
  /* [27][0][][] */ -127,-7,31,-15,-12,-17,-13,-21,39,-46,44,-31,-80,-7,39,17, 
  /* [28][0][][] */ -14,42,-12,11,3,-35,10,44,27,27,-21,-30,-127,-25,29,-19, 
  /* [29][0][][] */ 45,42,90,-45,33,-16,-4,9,-118,37,-48,1,-18,73,-127,5, 
  /* [30][0][][] */ -127,-76,-19,-23,-5,-64,-15,-55,26,-52,41,14,14,35,43,47, 
  /* [31][0][][] */ 127,-30,-82,30,35,8,13,48,-24,12,-22,-28,105,5,-39,-18, 
  /* [32][0][][] */ 6,55,-14,50,4,64,-32,20,-64,54,51,1,-127,-20,-39,-59, 
  /* [33][0][][] */ 6,-80,102,-62,-75,-8,71,-83,55,-7,30,-61,0,-64,127,6, 
  /* [34][0][][] */ -63,19,16,-127,-29,36,59,-90,52,-55,13,48,-74,-36,88,43, 
  /* [35][0][][] */ 20,-16,46,15,52,5,-79,18,-110,-5,-52,93,-47,127,-75,-26, 
  /* [36][0][][] */ -5,13,32,-30,84,6,24,125,3,103,14,57,13,122,-127,-12, 
  /* [37][0][][] */ -94,108,27,77,-56,-95,127,-67,7,112,-25,-118,30,-37,-7,24, 
  /* [38][0][][] */ -35,-8,-35,-22,-10,-98,-61,-100,-81,-49,127,-64,124,-47,58,121, 
  /* [39][0][][] */ 25,-26,24,-123,-6,11,41,26,-127,-52,43,16,22,37,-52,55, 
  /* [40][0][][] */ 55,-70,-42,-45,16,8,-69,-16,-76,-73,6,43,127,28,-45,28, 
  /* [41][0][][] */ 2,71,2,15,127,20,-82,12,-11,28,-77,78,9,16,-120,-57, 
  /* [42][0][][] */ 119,-107,-68,52,22,-40,-26,21,-127,-15,67,-36,38,52,-23,64, 
  /* [43][0][][] */ -122,112,-25,127,-10,2,-23,-48,22,50,-12,31,-29,-32,35,-30, 
  /* [44][0][][] */ 28,-1,-25,127,8,6,-70,44,42,45,-31,-30,14,-30,-25,-44, 
  /* [45][0][][] */ -76,-17,-45,-112,-94,-58,-12,-127,-44,-39,57,-22,-2,-117,73,78, 
  /* [46][0][][] */ -4,28,39,-41,62,42,-50,30,-40,-9,7,12,20,127,-57,-50, 
  /* [47][0][][] */ -52,-60,-26,-97,-47,-58,-14,121,-100,-103,87,-89,127,39,0,59, 
  /* [48][0][][] */ 21,-32,17,-127,-36,-2,1,-6,-10,-14,1,-17,-25,-1,22,30, 
  /* [49][0][][] */ -5,21,52,127,68,33,50,112,37,89,-31,39,35,63,59,-32, 
  /* [50][0][][] */ -4,18,40,-28,40,127,5,2,87,32,55,-35,26,12,-55,-44, 
  /* [51][0][][] */ -127,21,5,43,-45,-11,0,23,82,-36,26,9,14,26,7,-5, 
  /* [52][0][][] */ 14,2,84,-56,1,-26,-21,-3,-121,-8,77,-93,-52,127,-54,-12, 
  /* [53][0][][] */ 89,127,-38,-109,-33,121,75,-87,-11,71,-36,-44,-87,-124,73,-39, 
  /* [54][0][][] */ 77,19,53,20,102,78,26,64,127,126,-124,24,86,125,-46,-9, 
  /* [55][0][][] */ 127,-10,3,47,9,-43,-31,-15,-77,-1,-62,95,-48,-110,-56,15, 
  /* [56][0][][] */ -3,76,48,24,9,-7,-13,127,14,-26,-13,-4,45,17,-49,-1, 
  /* [57][0][][] */ 29,0,-24,64,-127,-79,10,-6,-16,37,8,-44,-22,-110,62,-41, 
  /* [58][0][][] */ 64,73,10,26,-27,73,17,127,-44,41,-15,12,-61,45,-51,-58, 
  /* [59][0][][] */ 109,-6,-84,-55,-54,37,127,-13,2,-5,-47,-47,-1,-57,49,65, 
  /* [60][0][][] */ -127,-11,14,54,31,-21,-39,0,-8,-24,23,-3,4,23,-12,-6, 
  /* [61][0][][] */ -123,-20,74,93,-76,-100,-21,-3,127,22,46,-97,-9,-35,15,-48, 
  /* [62][0][][] */ -127,-24,-4,0,71,35,-17,-8,5,-79,17,40,15,126,-42,94, 
  /* [63][0][][] */ -15,0,-47,-20,-127,-1,15,15,-15,13,47,-114,-34,17,4,-28, 
  /* [64][0][][] */ 47,99,-27,75,55,-32,-121,-82,127,-47,-82,73,-64,-127,81,-6, 
  /* [65][0][][] */ 6,31,-37,-30,0,29,7,-119,-74,-127,6,-4,-6,-20,50,38, 
  /* [66][0][][] */ -113,10,-68,-22,-72,-48,20,-77,115,-50,-46,-13,32,-19,127,101, 
  /* [67][0][][] */ -1,-25,-18,127,95,68,48,103,-21,67,-35,23,19,39,-104,-45, 
  /* [68][0][][] */ 127,-37,-5,9,51,-16,-7,-5,-64,-7,-35,-4,72,-13,9,20, 
  /* [69][0][][] */ 51,38,19,-48,-50,-47,59,-117,15,14,53,26,59,-21,120,127, 
  /* [70][0][][] */ 37,-19,-41,36,-103,-44,5,-46,18,-4,23,-68,-31,-127,95,76, 
  /* [71][0][][] */ 63,36,48,127,74,-39,-58,99,50,-43,-49,49,29,-20,-42,-11, 
  /* [72][0][][] */ -64,-61,-80,-6,42,32,-15,-46,-55,-123,-39,76,127,13,-50,116, 
  /* [73][0][][] */ 26,-13,18,79,93,127,35,80,30,75,-118,81,-9,24,-123,-98, 
  /* [74][0][][] */ 63,-67,-70,-34,-42,-23,18,-19,-23,-89,14,24,39,-7,13,127, 
  /* [75][0][][] */ 37,-16,-44,127,26,-12,69,69,-56,52,-17,-40,57,36,-40,-100, 
  /* [76][0][][] */ 0,20,-24,-22,3,-21,-11,-127,-3,-114,24,27,12,-31,37,3, 
  /* [77][0][][] */ 89,77,3,51,-40,63,61,-28,82,1,-127,51,-1,-119,0,38, 
  /* [78][0][][] */ 6,36,53,-47,71,-57,-113,-13,-73,4,-37,18,-70,127,-18,11, 
  /* [79][0][][] */ -116,50,94,45,73,28,-78,-17,111,-8,27,65,127,65,-37,-45, 
  /* [80][0][][] */ 27,-7,11,48,68,57,-127,-21,-61,-25,-105,97,-114,-65,-5,-48, 
  /* [81][0][][] */ -45,42,-127,15,103,86,31,-9,-4,-23,-40,-72,-33,19,-96,-25, 
  /* [82][0][][] */ 51,65,54,-89,-87,-8,-22,21,-127,-12,123,-8,-89,40,-37,58, 
  /* [83][0][][] */ 127,-24,-7,-57,-43,14,37,2,22,-12,13,-31,-26,-68,9,-13, 
  /* [84][0][][] */ -127,-10,0,-48,30,60,29,-127,46,-82,-53,49,127,97,-18,-2, 
  /* [85][0][][] */ 73,-36,41,-36,-15,8,34,127,39,114,-10,-16,16,-49,23,-34, 
  /* [86][0][][] */ 127,-47,65,-38,51,38,-89,81,-43,-2,-47,67,-11,4,-6,-3, 
  /* [87][0][][] */ -35,9,-9,12,-94,6,45,-47,11,18,40,-33,-26,-127,38,42, 
  /* [88][0][][] */ -94,-48,-7,-20,17,7,-77,-127,-1,-9,1,53,-4,16,5,8, 
  /* [89][0][][] */ 45,-10,38,-127,-1,-2,15,11,10,-16,26,-13,6,-14,28,16, 
  /* [90][0][][] */ -63,47,39,18,-18,-50,-25,-33,127,10,-34,-37,-9,8,23,-2, 
  /* [91][0][][] */ -19,-44,-50,18,-51,-127,-2,-73,37,-13,62,12,54,-2,76,123, 
  /* [92][0][][] */ 39,11,42,-19,41,69,127,79,80,100,-64,12,30,8,54,-3, 
  /* [93][0][][] */ 103,-64,-78,-9,-83,-34,62,69,42,38,6,-127,34,-2,91,-16, 
  /* [94][0][][] */ 20,-26,52,98,99,-1,127,80,-58,38,-51,45,-46,56,-56,-100, 
  /* [95][0][][] */ -127,29,-6,44,53,21,-1,27,-53,50,66,-11,-30,114,-55,-89, 
};
const TfArray<4, int> tensor_dimension19 = { 4, { 96,1,1,16 } };
const TfArray<96, float> quant19_scale = { 96, { 0.00086948636453598738, 0.00041330576641485095, 0.00034087157109752297, 0.0025263701099902391, 0.0004095599870197475, 0.00049985299119725823, 0.00063492468325421214, 0.00079911306966096163, 0.00065677688689902425, 0.000452042295364663, 0.00068716710666194558, 0.0014526703162118793, 0.00074758398113772273, 0.0013248368632048368, 0.00068083108635619283, 0.00081528013106435537, 0.0008355159661732614, 0.00095436890842393041, 0.00035396520979702473, 0.00069856015034019947, 0.00047279131831601262, 0.00082381558604538441, 0.00063943001441657543, 0.00041324377525597811, 0.0010904364753514528, 0.0010408884845674038, 0.00057594041572883725, 0.00057564204325899482, 0.0017540499102324247, 0.0007802339387126267, 0.00055254081962630153, 0.00057818618370220065, 0.00039928199839778244, 0.00068765121977776289, 0.00039612696855328977, 0.00075070071034133434, 0.0002675113792065531, 0.00063337251776829362, 0.00034201020025648177, 0.00084376550512388349, 0.00089188810670748353, 0.00023754641006235033, 0.00045865916763432324, 0.000432406464824453, 0.00055500888265669346, 0.00039986576302908361, 0.00053565221605822444, 0.00032082860707305372, 0.001118330517783761, 0.00031570956343784928, 0.0015707006677985191, 0.0024990683887153864, 0.00038036916521377861, 0.00062529131537303329, 0.00039124840986914933, 0.00055712705943733454, 0.001213959651067853, 0.00061434961389750242, 0.00044216835522092879, 0.00094709265977144241, 0.0006112846895121038, 0.00074129394488409162, 0.00087702827295288444, 0.00083271571202203631, 0.00051176495617255569, 0.0007299781427718699, 0.00056845054496079683, 0.00071240781107917428, 0.00067683495581150055, 0.00038228146149776876, 0.00040077962330542505, 0.0006514371489174664, 0.00059654074721038342, 0.0004860128101427108, 0.00055117497686296701, 0.00084686477202922106, 0.00025876687141135335, 0.0012571711558848619, 0.00022949912818148732, 0.00069671566598117352, 0.00049844564637169242, 0.0012216301402077079, 0.0006553728599101305, 0.00098824326414614916, 0.0010940798092633486, 0.00056123628746718168, 0.00084202166181057692, 0.00051694386638700962, 0.00056724913883954287, 0.0010741772130131721, 0.001138365943916142, 0.00056364486226812005, 0.0004791021638084203, 0.00025100671336986125, 0.00055936613352969289, 0.00066474475897848606, } };
const TfArray<96, int> quant19_zero = { 96, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant19 = { (TfLiteFloatArray*)&quant19_scale, (TfLiteIntArray*)&quant19_zero, 0 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int32_t tensor_data20[16] = { -18109, -14548, 33571, -8395, 8546, -38339, -26793, -50203, -14704, -4926, 51038, -26798, -7754, -10916, 29121, 1615, };
const TfArray<1, int> tensor_dimension20 = { 1, { 16 } };
const TfArray<16, float> quant20_scale = { 16, { 0.00041910060099326074, 0.00019420222088228911, 0.00034504380892030895, 0.00082017143722623587, 0.00028154090978205204, 0.00026305054780095816, 0.00043881448800675571, 0.00025984132662415504, 0.00062071031425148249, 0.00030943448655307293, 0.00024045206373557448, 0.00022343704767990857, 0.00036565898335538805, 0.00057028443552553654, 0.00016014769789762795, 0.0002071442868327722, } };
const TfArray<16, int> quant20_zero = { 16, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant20 = { (TfLiteFloatArray*)&quant20_scale, (TfLiteIntArray*)&quant20_zero, 0 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int8_t tensor_data21[16*1*1*48] = { 
  /* [0][0][][] */ 10,-13,48,40,-30,-32,0,77,-66,23,12,22,27,-2,-22,-29,9,-5,20,24,16,16,14,102,-53,61,-36,-49,-11,-54,62,-52,19,53,37,-13,7,10,-14,-6,-18,-22,-13,9,13,8,-127,-65, 
  /* [1][0][][] */ -101,113,-94,4,-48,67,0,64,-60,76,63,-8,-18,15,6,-20,-75,95,-15,-70,-5,-82,-7,-53,-4,-21,120,61,-98,-76,-40,44,53,-61,-32,-66,-14,-64,81,-49,-78,58,127,-25,-3,-39,-89,30, 
  /* [2][0][][] */ -54,-55,35,-19,-29,-70,-2,-26,29,2,63,6,27,14,-14,44,20,-29,-49,-53,-48,-51,-4,-127,-26,99,-99,3,10,-39,21,55,-30,-22,-7,-23,-9,7,6,-58,-27,6,-27,2,-25,13,32,-47, 
  /* [3][0][][] */ -15,6,13,-23,8,14,11,14,19,-2,8,23,-127,13,0,-13,24,7,-3,10,-4,-1,22,11,9,-5,-29,6,11,20,4,8,24,5,25,4,4,15,45,11,-3,-12,10,-37,-1,-5,20,-4, 
  /* [4][0][][] */ 17,-12,28,45,12,-10,-9,-21,-83,61,14,3,-20,55,-43,33,14,21,-74,15,-36,-12,-25,38,-24,44,-2,75,49,-81,-42,-34,27,-31,19,-127,-26,20,-13,-16,-20,9,-34,-60,-16,-46,16,-4, 
  /* [5][0][][] */ 19,-18,-29,89,-24,-4,-10,30,-34,-17,33,61,7,30,16,10,-54,30,-12,-15,-15,-7,-18,-7,-19,20,-49,16,21,-45,16,-29,48,-120,-24,-14,-17,-75,28,11,-56,127,-7,-8,-18,13,-60,-26, 
  /* [6][0][][] */ 6,-45,-25,28,0,12,-12,13,0,-24,11,0,2,-12,22,-54,-5,-29,127,38,14,73,16,-25,2,-8,-5,-17,-54,-26,25,26,12,-1,37,-48,8,-62,62,32,-3,7,-20,15,-27,-15,3,-28, 
  /* [7][0][][] */ -53,-73,-15,112,-55,74,-40,43,54,125,78,118,93,55,-11,16,-52,-9,34,-74,-32,63,-1,51,5,7,-26,12,37,11,66,90,56,35,-51,-67,35,-37,75,-5,-14,-12,-127,-64,18,-11,-44,-124, 
  /* [8][0][][] */ -11,0,-5,16,-9,6,-20,-7,13,-61,65,41,10,-31,125,30,3,32,32,13,-54,-3,-10,-5,11,7,-1,16,13,80,28,127,35,-6,12,-66,-57,30,9,52,17,10,73,18,8,-23,41,2, 
  /* [9][0][][] */ -49,-26,5,12,-18,-10,23,55,26,-70,83,73,-40,-13,34,92,38,-39,-18,-48,58,23,4,-5,104,35,-80,-12,25,-17,102,65,-10,53,51,-127,26,-93,4,-60,-49,-18,8,-34,-4,50,-6,-114, 
  /* [10][0][][] */ -6,-20,-48,-122,44,47,38,-22,47,-20,-25,-38,60,-40,-11,48,45,-25,30,-41,74,-31,52,37,-23,-127,46,-47,34,19,80,-15,-74,11,-27,61,-6,21,-20,-3,-9,-87,-29,20,5,71,-5,-34, 
  /* [11][0][][] */ 59,27,-19,69,5,-45,-18,-19,-1,98,13,15,-10,95,-29,38,5,72,44,-60,-127,-54,-5,-2,-11,7,77,13,46,-32,25,-95,69,-22,27,-61,6,14,15,-51,-45,66,24,-44,11,-62,8,4, 
  /* [12][0][][] */ 127,-39,8,-6,-34,-4,26,36,44,22,-76,-54,11,11,2,-6,23,14,47,-9,-36,17,11,32,-54,15,28,-1,39,-19,-33,46,-4,-24,19,12,-20,5,-8,15,-13,-35,-5,-83,-25,6,93,11, 
  /* [13][0][][] */ 27,-50,-12,10,10,-10,5,-11,-10,24,0,13,16,4,-26,-6,18,29,10,-13,2,-35,-7,-14,4,-9,56,127,31,-2,-4,-9,14,-4,-33,2,-16,-47,7,-12,-25,15,-52,-1,-6,4,15,-53, 
  /* [14][0][][] */ 56,39,23,-43,56,-7,-42,-55,-42,-104,-35,39,16,-42,123,3,-13,5,1,45,0,28,57,10,7,-7,-12,-127,-66,0,31,21,-47,51,-38,26,-45,39,10,-2,36,-20,72,61,-3,-14,6,61, 
  /* [15][0][][] */ 13,-66,-76,-69,87,-25,17,-59,-55,-26,-72,-72,60,36,-32,-5,17,-2,116,-9,-61,18,-25,-7,-100,-14,20,3,-29,29,-54,-71,-73,98,113,127,-2,-42,-22,-2,39,-2,63,-15,30,-46,-13,81, 
};
const TfArray<4, int> tensor_dimension21 = { 4, { 16,1,1,48 } };
const TfArray<16, float> quant21_scale = { 16, { 0.017811775207519531, 0.0082535939291119576, 0.014664361253380775, 0.034857284277677536, 0.011965489014983177, 0.011179648339748383, 0.018649615347385406, 0.011043256148695946, 0.026380186900496483, 0.013150965794920921, 0.010219212621450424, 0.0094960741698741913, 0.015540506690740585, 0.024237086996436119, 0.0068062767386436462, 0.0088036321103572845, } };
const TfArray<16, int> quant21_zero = { 16, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant21 = { (TfLiteFloatArray*)&quant21_scale, (TfLiteIntArray*)&quant21_zero, 0 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int32_t tensor_data22[48] = { 45950, 50339, -75, 38682, -3641, 193076, -7137, 21117, 0, 35988, 32255, -7296, 3397, 29172, -6669, 78, -2732, -10860, 8420, -4762, 6770, -2869, 9076, -2826, -11149, 38407, 146890, 80781, 1724, 16023, 1403, 3246, 21398, 4038, 101290, -30073, 134219, 1972, 168403, -1041, 7219, 42952, 3252, 8862, 10075, 488, 4232, 63306, };
const TfArray<1, int> tensor_dimension22 = { 1, { 48 } };
const TfArray<48, float> quant22_scale = { 48, { 4.6459263103315607e-05, 3.2332362025044858e-05, 0.00014314462896436453, 5.691937985830009e-05, 8.6028710938990116e-05, 3.2093495974550024e-05, 4.1665327444206923e-05, 0.00018924009054899216, 0.009813973680138588, 4.6265711716841906e-05, 4.3918265873799101e-05, 6.6946115111932158e-05, 2.8374892281135544e-05, 2.5293913495261222e-05, 0.00014466462016571313, 0.00016823432815726846, 9.189631964545697e-05, 4.6854773245286196e-05, 6.2913270085118711e-05, 0.00011251532123424113, 0.00017138493421953171, 0.00014534560614265501, 8.7783926574047655e-05, 6.1633014411199838e-05, 0.00017166062025353312, 7.5741176260635257e-05, 2.0045226847287267e-05, 7.371987885562703e-05, 0.00025189528241753578, 6.5276872192043811e-05, 0.00011618115968303755, 0.00016446599329356104, 3.5176235542166978e-05, 8.4523751866072416e-05, 1.7391683286405168e-05, 5.4159048886504024e-05, 3.8705773476976901e-05, 0.000208896046387963, 3.2926440326264128e-05, 9.5655297627672553e-05, 4.7635079681640491e-05, 0.0001373524428345263, 6.4262734667863697e-05, 7.1457849116995931e-05, 2.2521406208397821e-05, 0.00010946565453195944, 7.2602066211402416e-05, 2.9071470635244623e-05, } };
const TfArray<48, int> quant22_zero = { 48, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant22 = { (TfLiteFloatArray*)&quant22_scale, (TfLiteIntArray*)&quant22_zero, 0 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int8_t tensor_data23[1*3*3*48] = { 
  /* [0][0][][] */ 75,-106,101,81,52,-39,101,-73,39,-98,-111,65,84,-24,-108,-96,113,69,79,115,116,-92,-75,75,-30,-37,-108,-98,-79,59,-75,-127,-25,58,102,91,-56,52,-59,-3,55,-62,116,63,-98,-11,124,-42, 127,-93,127,44,-47,-63,-89,-87,74,-116,-93,54,107,-127,-102,73,-14,62,82,127,113,-82,41,72,-77,-45,-89,-69,53,62,-27,-96,-56,71,102,45,-73,97,-110,9,65,-42,127,87,-55,-127,95,-88, 102,-104,58,16,24,-45,-73,-53,34,-109,-29,46,32,-68,-65,-24,-70,44,65,102,67,-63,13,45,-79,-59,-90,-34,42,33,97,-82,-45,49,58,55,-25,56,-76,41,53,-39,85,73,26,-32,82,-106, 
  /* [0][1][][] */ 71,-92,-51,127,36,-96,124,-116,88,-71,-61,102,95,-103,-6,-127,127,102,86,-28,123,121,-127,75,127,-92,-127,-127,-127,97,-93,-5,-76,64,113,127,-68,120,-111,87,88,-127,101,80,-57,75,99,-105, 115,-101,-46,70,-127,-127,-127,-127,127,-23,-127,127,127,-122,-8,95,-71,127,127,-53,127,127,57,127,111,-127,-101,-98,45,127,-49,26,-73,127,127,98,-127,127,-127,127,127,-122,116,127,-127,-20,127,-124, 125,-127,-37,64,63,-77,-59,-124,56,-23,-66,82,68,-4,7,23,-98,69,96,-34,63,83,31,87,60,-81,-107,-37,38,81,127,5,-14,82,69,64,-73,103,-102,54,54,-62,58,51,-58,-75,97,-64, 
  /* [0][2][][] */ 51,-16,-37,119,42,-68,76,-53,43,-127,21,66,107,-87,107,-85,85,61,59,-58,82,-25,-106,25,13,-65,-33,-95,-68,31,-30,71,-127,61,41,100,-20,56,-72,-95,62,-73,98,53,5,30,41,-127, 89,-95,-68,105,-30,-81,-55,-92,44,-78,-18,65,122,-69,127,54,-50,62,82,-64,49,-49,18,54,-9,-78,-35,-47,21,76,-14,109,-45,57,61,64,-52,115,-94,-121,62,-65,79,75,-56,46,64,-69, 96,-88,-34,81,69,-46,-27,-93,31,-27,-54,53,47,41,91,63,-53,42,54,-81,45,-27,32,51,-18,-43,-39,10,46,31,89,56,-16,57,30,44,-37,70,-76,-66,33,-48,45,22,-57,1,71,-64, 
};
const TfArray<4, int> tensor_dimension23 = { 4, { 1,3,3,48 } };
const TfArray<48, float> quant23_scale = { 48, { 0.0019745186436921358, 0.0013741253642365336, 0.0060836463235318661, 0.0024190736003220081, 0.003656220156699419, 0.0013639734825119376, 0.0017707763472571969, 0.0080427033826708794, 0.41709387302398682, 0.0019662927370518446, 0.0018665263196453452, 0.0028452097903937101, 0.0012059329310432076, 0.0010749913053587079, 0.0061482461169362068, 0.0071499589830636978, 0.0039055936504155397, 0.0019913278520107269, 0.0026738140732049942, 0.0047819009050726891, 0.0072838594205677509, 0.0061771878972649574, 0.0037308167666196823, 0.0026194031815975904, 0.0072955763898789883, 0.0032189998310059309, 0.00085192208644002676, 0.0031330948695540428, 0.010705549269914627, 0.002774266991764307, 0.0049376990646123886, 0.0069898045621812344, 0.0014949899632483721, 0.0035922592505812645, 0.00073914648965001106, 0.0023017595522105694, 0.0016449954127892852, 0.0088780820369720459, 0.0013993737520650029, 0.0040653501637279987, 0.0020244908519089222, 0.0058374786749482155, 0.0027311663143336773, 0.0030369586311280727, 0.00095715973293408751, 0.0046522901393473148, 0.0030855876393616199, 0.001235537463799119, } };
const TfArray<48, int> quant23_zero = { 48, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant23 = { (TfLiteFloatArray*)&quant23_scale, (TfLiteIntArray*)&quant23_zero, 3 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int32_t tensor_data24[48] = { -341, 1288, 1987, 1511, 11953, 21061, 5119, -3054, -11951, -282, 147, 4552, 707, 880, 18741, 3595, 2837, 328, 862, 6881, -4732, 13102, 11451, 6446, 10500, -1214, 6670, 5259, 18623, -814, 12153, 3965, -74, -796, 3055, 7116, -3606, -3178, 311, 9892, 5134, -1810, -1988, -856, 1326, 2377, -1230, 2318, };
const TfArray<1, int> tensor_dimension24 = { 1, { 48 } };
const TfArray<48, float> quant24_scale = { 48, { 0.00040933792479336262, 0.00080695754149928689, 0.00027315071201883256, 0.00027879801928065717, 0.00020475848577916622, 0.00022392136452253908, 0.00037880364106968045, 0.00021417946845758706, 9.1632944531738758e-05, 0.0013777653221040964, 0.00078534474596381187, 0.00016582859097979963, 0.00074182898970320821, 0.0005706041119992733, 0.0001852080604294315, 0.0004269830824341625, 0.00023270167002920061, 0.00043481070315465331, 0.00026072864420711994, 0.000159855728270486, 0.00023723496997263283, 0.00022643423289991915, 0.00036211629048921168, 0.00020694744307547808, 0.0001934000028995797, 0.00026441499358043075, 0.001010847045108676, 0.00029572736821137369, 0.0001114236147259362, 0.00054064695723354816, 0.00022505762171931565, 0.00030781223904341459, 0.00067570485407486558, 0.00026165926828980446, 0.0011605685576796532, 0.00030778773361817002, 0.00045576662523671985, 0.00022249159519560635, 0.0004530015867203474, 0.0002087018801830709, 8.3475671999622136e-05, 0.00027322827372699976, 0.0003748718008864671, 0.0002468579332344234, 0.001496044103987515, 0.00035002757795155048, 0.00027048183255828917, 0.00074094050796702504, } };
const TfArray<48, int> quant24_zero = { 48, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant24 = { (TfLiteFloatArray*)&quant24_scale, (TfLiteIntArray*)&quant24_zero, 0 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int8_t tensor_data25[48*1*1*8] = { 
  /* [0][0][][] */ -127,-13,28,102,-90,112,29,25, 
  /* [1][0][][] */ 106,37,27,47,29,-108,115,127, 
  /* [2][0][][] */ -29,19,-21,-64,-127,-20,22,-3, 
  /* [3][0][][] */ 49,35,127,-7,-70,-36,-46,-28, 
  /* [4][0][][] */ -127,-17,-27,11,39,46,61,16, 
  /* [5][0][][] */ -82,-21,-3,-106,-25,10,-57,127, 
  /* [6][0][][] */ 18,-75,-95,-38,-21,-127,-14,37, 
  /* [7][0][][] */ -45,6,-18,19,127,-49,-33,-16, 
  /* [8][0][][] */ 54,-6,51,-62,14,-13,-127,-5, 
  /* [9][0][][] */ 3,-127,-5,-24,21,35,-8,6, 
  /* [10][0][][] */ -76,-34,-38,112,-127,1,-21,23, 
  /* [11][0][][] */ 121,-16,127,32,-24,24,-33,-125, 
  /* [12][0][][] */ 1,5,40,5,49,-75,127,30, 
  /* [13][0][][] */ 5,-71,-88,-95,-61,32,127,-37, 
  /* [14][0][][] */ 65,127,8,13,-11,-55,18,-78, 
  /* [15][0][][] */ -3,-127,10,-28,22,-15,-5,-7, 
  /* [16][0][][] */ -12,53,-39,-25,-127,-59,28,-6, 
  /* [17][0][][] */ 22,127,-8,-34,10,-100,-11,-56, 
  /* [18][0][][] */ 107,-106,-28,28,-58,-13,54,127, 
  /* [19][0][][] */ 29,-22,25,1,127,-35,118,114, 
  /* [20][0][][] */ 100,-35,59,28,52,102,99,-127, 
  /* [21][0][][] */ -15,7,-74,8,-32,29,-127,-49, 
  /* [22][0][][] */ -127,6,-32,-12,9,-54,-39,33, 
  /* [23][0][][] */ -19,-36,-26,99,-127,-12,40,-25, 
  /* [24][0][][] */ 127,-12,25,27,28,60,12,-11, 
  /* [25][0][][] */ 83,29,-36,36,107,56,127,-33, 
  /* [26][0][][] */ 42,-84,54,-77,-85,-70,-52,-127, 
  /* [27][0][][] */ -7,-127,-3,1,-14,-38,48,-23, 
  /* [28][0][][] */ -120,-28,-46,64,-10,-6,127,-8, 
  /* [29][0][][] */ 6,9,-55,44,15,3,-29,-127, 
  /* [30][0][][] */ 82,-21,127,-34,-45,-34,-75,-8, 
  /* [31][0][][] */ -7,9,28,16,-27,-12,127,37, 
  /* [32][0][][] */ -83,-48,-80,3,8,-1,-44,127, 
  /* [33][0][][] */ -30,-18,-36,-4,-86,-127,-76,48, 
  /* [34][0][][] */ 77,-127,5,-5,-32,49,-108,66, 
  /* [35][0][][] */ -9,-16,-127,23,6,-62,43,-47, 
  /* [36][0][][] */ 1,127,-36,-45,61,-15,-76,-66, 
  /* [37][0][][] */ -99,-44,27,-36,1,-53,-54,-127, 
  /* [38][0][][] */ -127,20,-13,-16,16,-26,21,14, 
  /* [39][0][][] */ -1,-84,-41,-20,-18,-45,51,127, 
  /* [40][0][][] */ -50,-45,-84,-69,-39,65,127,-35, 
  /* [41][0][][] */ -13,-26,21,-63,-107,-127,-46,31, 
  /* [42][0][][] */ -41,-127,1,-37,58,31,-50,15, 
  /* [43][0][][] */ -60,-7,26,-127,41,77,122,27, 
  /* [44][0][][] */ 37,-38,8,-127,97,35,101,51, 
  /* [45][0][][] */ -42,-127,-27,-39,-13,-34,19,23, 
  /* [46][0][][] */ 120,27,-100,-34,127,-38,-67,42, 
  /* [47][0][][] */ 126,25,127,45,32,51,-10,-13, 
};
const TfArray<4, int> tensor_dimension25 = { 4, { 48,1,1,8 } };
const TfArray<48, float> quant25_scale = { 48, { 0.00083184451796114445, 0.0016398754669353366, 0.00055508885998278856, 0.00056656514061614871, 0.00041610418702475727, 0.00045504642184823751, 0.00076979363802820444, 0.00043524923967197537, 0.00018621378694660962, 0.0027998543810099363, 0.0015959545271471143, 0.00033699200139380991, 0.0015075231203809381, 0.0011595649411901832, 0.0003763744025491178, 0.00086770247435197234, 0.00047288951463997364, 0.00088360958034172654, 0.00052984512876719236, 0.0003248541324865073, 0.00048210195382125676, 0.00046015300904400647, 0.00073588208761066198, 0.00042055253288708627, 0.00039302182267419994, 0.00053733639651909471, 0.0020542137790471315, 0.00060096848756074905, 0.00022643180273007601, 0.0010986869456246495, 0.00045735549065284431, 0.00062552699819207191, 0.0013731475919485092, 0.00053173629567027092, 0.0023584733717143536, 0.0006254772306419909, 0.00092619558563455939, 0.00045214089914225042, 0.00092057656729593873, 0.00042411783942952752, 0.00016963681264314801, 0.00055524648632854223, 0.00076180347241461277, 0.00050165742868557572, 0.003040216863155365, 0.00071131577715277672, 0.00054966524476185441, 0.0015057175187394023, } };
const TfArray<48, int> quant25_zero = { 48, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant25 = { (TfLiteFloatArray*)&quant25_scale, (TfLiteIntArray*)&quant25_zero, 0 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int32_t tensor_data26[8] = { -16180, 27996, 11001, -32248, 31144, -2545, -7236, 13957, };
const TfArray<1, int> tensor_dimension26 = { 1, { 8 } };
const TfArray<8, float> quant26_scale = { 8, { 0.00054846733110025525, 0.00043553908471949399, 0.0010675023077055812, 0.00085737952031195164, 0.00039498767000623047, 0.00050259864656254649, 0.00051083730068057775, 0.00052697618957608938, } };
const TfArray<8, int> quant26_zero = { 8, { 0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant26 = { (TfLiteFloatArray*)&quant26_scale, (TfLiteIntArray*)&quant26_zero, 0 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int8_t tensor_data27[8*1*1*48] = { 
  /* [0][0][][] */ -14,-46,-37,-22,-16,22,-10,29,1,66,-58,1,22,-15,34,28,-16,-31,3,15,7,5,-49,-12,1,-74,11,73,-29,127,-14,-9,-2,-78,62,-3,-6,-12,4,8,47,20,71,1,-6,-36,-59,-33, 
  /* [1][0][][] */ -12,0,69,-46,-38,-73,8,51,46,61,54,-67,-20,-37,-10,-50,-27,-79,14,-4,-21,-15,-21,-19,-31,2,-13,-20,44,-3,-36,-23,-56,51,-23,11,-39,-127,26,-39,-11,112,-66,63,-24,3,-66,-32, 
  /* [2][0][][] */ 0,-49,-51,-20,0,14,-5,14,5,15,-24,-7,-6,13,-19,17,6,26,-14,0,-10,1,-5,-3,70,16,13,-18,-38,127,-3,-30,14,-27,-8,-29,-10,-59,-1,10,3,5,-2,-13,18,-19,-50,-49, 
  /* [3][0][][] */ 4,-42,47,65,8,-109,1,2,21,27,6,13,19,-9,116,12,-39,-32,-2,-31,-37,112,-37,-9,-12,26,5,-44,-26,47,127,-15,12,-6,-50,12,-7,4,-4,25,-5,1,23,60,-55,37,-19,44, 
  /* [4][0][][] */ -74,48,48,15,-1,40,61,4,127,-37,-9,-32,-73,-2,-102,-14,42,2,36,32,-21,-46,65,-17,-5,35,-47,92,93,-27,-69,-19,22,-70,66,-27,-23,-24,1,-5,-25,28,6,-4,-64,6,-61,40, 
  /* [5][0][][] */ -28,-2,14,11,-52,50,-26,19,46,9,-34,18,2,-38,8,27,47,-64,34,45,21,22,-43,-16,-11,63,-40,-127,-49,-54,1,32,-3,-7,24,-5,9,38,-25,29,5,-32,-22,0,79,-11,-47,-25, 
  /* [6][0][][] */ 0,22,11,27,41,-127,16,-26,-83,17,80,107,2,35,-16,-53,-17,68,-52,-6,-57,66,47,-6,-3,-33,-5,-42,-17,58,-22,2,13,-88,-22,77,4,-42,-6,-59,25,-2,7,69,85,-65,27,35, 
  /* [7][0][][] */ 2,18,-97,38,-50,20,-21,62,-43,24,95,-45,1,-21,40,0,65,-15,16,-15,-63,127,17,-31,-1,-13,35,4,-72,87,-30,65,-15,43,-89,-4,-30,-67,-14,-63,15,-3,-22,109,-52,-97,-10,-22, 
};
const TfArray<4, int> tensor_dimension27 = { 4, { 8,1,1,48 } };
const TfArray<8, float> quant27_scale = { 8, { 0.023309862241148949, 0.018510410562157631, 0.045368846505880356, 0.036438629031181335, 0.016786975786089897, 0.021360442042350769, 0.021710583940148354, 0.02239648811519146, } };
const TfArray<8, int> quant27_zero = { 8, { 0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant27 = { (TfLiteFloatArray*)&quant27_scale, (TfLiteIntArray*)&quant27_zero, 0 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int32_t tensor_data28[48] = { -56335, -4170, 6758, -8798, 3398, -22581, 2646, 22459, 1750, 26371, 4799, 27688, -10372, 494, 40638, 28948, -3462, 27184, 98354, -5062, 1068, 44, -4267, 68200, -6456, 30747, 47928, 26041, 499, 2851, 3389, 2405, 3790, 26178, -4455, 11584, -24554, 10267, -31356, 230870, 57720, 30058, 19549, -3061, 13528, 1178, 3027, 5746, };
const TfArray<1, int> tensor_dimension28 = { 1, { 48 } };
const TfArray<48, float> quant28_scale = { 48, { 0.00026225668261758983, 0.00023690925445407629, 0.00029009266290813684, 0.0003055530833080411, 0.00015041668666526675, 0.00010223143181065097, 0.00050688820192590356, 0.00015229597920551896, 0.00029087683651596308, 0.00020951239275746047, 0.00016412348486483097, 0.00016672773926984519, 0.00021253101294860244, 0.00011325592640787363, 0.00010650455806171522, 5.2180497732479125e-05, 0.00015198030450847, 0.00014090554032009095, 1.8403288777335547e-05, 8.8585744379088283e-05, 0.00012969100498594344, 0.00034550894633866847, 0.0002382028178544715, 3.6091620131628588e-05, 0.00011622023885138333, 0.00010701450082706288, 0.0003238825302105397, 9.4572467787656933e-05, 0.0006729025044478476, 0.00017082924023270607, 6.7591834522318095e-05, 0.00015058669669087976, 0.0002049458707915619, 0.00014037473010830581, 0.00022710066696163267, 0.00019354169489815831, 0.00018014933448284864, 0.00022251365589909256, 0.00018520258890930563, 1.2489132132031955e-05, 4.9887046770891175e-05, 6.1045495385769755e-05, 8.968824113253504e-05, 0.00019362178863957524, 0.00020474927441682667, 0.00015583755157422274, 0.00033970791264437139, 0.00017114667571149766, } };
const TfArray<48, int> quant28_zero = { 48, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant28 = { (TfLiteFloatArray*)&quant28_scale, (TfLiteIntArray*)&quant28_zero, 0 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int8_t tensor_data29[1*3*3*48] = { 
  /* [0][0][][] */ 9,2,12,126,5,125,-8,26,38,23,4,25,-5,-6,-63,9,10,7,-52,-75,-33,-29,127,-9,-15,9,-10,32,-3,-8,39,95,7,30,58,-12,8,55,1,38,19,-100,-7,4,38,-9,-37,-19, 125,12,5,-127,23,127,12,8,104,127,3,45,-49,-23,16,4,127,-53,-83,-50,-121,33,-114,14,8,85,-23,-84,38,21,5,-119,9,-54,127,9,-35,-35,-6,127,-76,-89,-28,22,-31,-21,-99,24, -24,-1,2,25,3,120,3,15,19,13,-27,32,-14,-5,19,-2,-82,27,7,68,-41,9,-11,-7,-11,-80,-1,75,-19,-2,14,-27,11,-8,24,-10,8,53,63,17,44,25,-28,26,-64,-20,-29,-14, 
  /* [0][1][][] */ 127,10,-5,-96,14,-27,25,-15,10,12,-31,68,6,0,-3,-32,8,-51,-80,-49,25,-86,-120,-20,-4,110,-19,-127,-3,49,18,-106,16,-57,-15,127,9,54,-49,38,-59,-127,44,-92,-51,-25,-23,-17, 20,-114,-127,119,-127,-125,-127,-127,-127,-81,127,-127,127,127,30,-127,-74,127,127,-74,127,127,114,127,127,-127,-127,33,-127,-127,108,127,-127,127,-43,-53,127,-127,127,87,127,-38,127,127,127,-115,127,109, 57,9,41,2,8,-59,36,18,-28,9,-116,-9,9,-41,127,1,52,-63,-64,94,22,-42,23,-36,-13,5,-31,87,16,60,14,11,40,-26,3,65,3,40,88,-11,-78,37,-94,-20,29,-26,-19,-5, 
  /* [0][2][][] */ -53,3,28,-18,16,8,-41,24,-8,-38,-1,42,1,-4,-80,11,9,18,-46,115,4,-38,-20,-21,8,32,-11,55,-2,48,45,-36,-15,-70,-63,-39,1,36,9,-25,9,-40,59,-36,-66,30,-31,8, 62,127,70,23,16,-17,115,36,-2,-11,37,28,-8,-1,-115,17,-47,-56,-55,127,-51,29,2,12,44,-53,-40,37,94,40,127,16,81,-36,0,-42,-27,-22,-14,76,-27,-1,-44,30,-2,-13,11,-127, -39,-2,7,0,6,-23,-48,10,-29,-13,-50,-34,23,-8,-37,6,20,24,-19,-99,17,-32,14,-16,-9,23,-15,-52,2,49,10,16,-22,92,-40,-17,4,27,39,-58,6,16,-34,1,-47,127,-11,-16, 
};
const TfArray<4, int> tensor_dimension29 = { 4, { 1,3,3,48 } };
const TfArray<48, float> quant29_scale = { 48, { 0.011145909316837788, 0.010068642906844616, 0.012328937649726868, 0.012986005283892155, 0.0063927089795470238, 0.0043448358774185181, 0.021542748436331749, 0.0064725787378847599, 0.012362265028059483, 0.0089042764157056808, 0.0069752479903399944, 0.0070859286934137344, 0.0090325679630041122, 0.0048133768141269684, 0.0045264437794685364, 0.0022176711354404688, 0.0064591625705361366, 0.0059884856455028057, 0.00078213977394625545, 0.0037648940924555063, 0.0055118678137660027, 0.014684129506349564, 0.010123619809746742, 0.001533893751911819, 0.0049393600784242153, 0.0045481161214411259, 0.013765007257461548, 0.0040193297900259495, 0.028598355129361153, 0.0072602424770593643, 0.0028726528398692608, 0.006399934645742178, 0.0087101990357041359, 0.0059659257531166077, 0.0096517782658338547, 0.0082255220040678978, 0.0076563465408980846, 0.0094568300992250443, 0.0078711099922657013, 0.00053078809287399054, 0.0021201993804425001, 0.0025944334920495749, 0.0038117500953376293, 0.0082289259880781174, 0.0087018441408872604, 0.0066230958327651024, 0.014437586069107056, 0.0072737336158752441, } };
const TfArray<48, int> quant29_zero = { 48, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant29 = { (TfLiteFloatArray*)&quant29_scale, (TfLiteIntArray*)&quant29_zero, 3 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int32_t tensor_data30[48] = { 581745, 3466, 5804, 24957, 3642, 9905, -2804, -451, 3999, 1330, 10252, 1327, 1949, -21, 66, -2138, 3662, 19817, -435, 15867, 766, 4138, 10171, -1062, 3035, 4902, 20412, 12008, -4138, -1896, 33, 1856, -1385, 5411, 6676, 23930, 12275, 878, 135192, 3160, -1770, 3009, 764, 4056, 8585, 1404, -1615, 4697, };
const TfArray<1, int> tensor_dimension30 = { 1, { 48 } };
const TfArray<48, float> quant30_scale = { 48, { 7.7255244832485914e-06, 0.00055409746710211039, 0.00024869863409548998, 0.00012957335275132209, 0.00065635837381705642, 0.00046576751628890634, 0.00070187862729653716, 0.00085769145516678691, 0.00024491397198289633, 0.00063357228646054864, 0.00028126052347943187, 0.00037487706867977977, 0.00041308763320557773, 0.00038852461148053408, 0.00084737787256017327, 0.0017756770830601454, 0.00048659706953912973, 0.00020241172751411796, 0.0014100888511165977, 0.0001596708461875096, 0.0007280716672539711, 0.00029198292759247124, 0.00040557517786510289, 0.00071928772376850247, 0.00038743714685551822, 0.00025095455930568278, 0.00020466151181608438, 0.00026868286659009755, 0.00018334676860831678, 0.0013181071262806654, 0.00049998302711173892, 0.00034776574466377497, 0.0011966665042564273, 0.00031574003514833748, 0.00023042559041641653, 0.00010649756586644799, 0.00033256769529543817, 0.0004702515434473753, 1.8981480025104247e-05, 0.0014847337733954191, 0.00057546119205653667, 0.0010125099215656519, 0.00037001323653385043, 0.00043553212890401483, 0.00016639115347061306, 0.00037004731711931527, 0.00044353239354677498, 0.00060150178615003824, } };
const TfArray<48, int> quant30_zero = { 48, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant30 = { (TfLiteFloatArray*)&quant30_scale, (TfLiteIntArray*)&quant30_zero, 0 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int8_t tensor_data31[48*1*1*8] = { 
  /* [0][0][][] */ 104,127,-54,-36,98,21,-118,-74, 
  /* [1][0][][] */ -65,16,-19,127,7,-19,-21,17, 
  /* [2][0][][] */ 3,-127,-54,38,61,-43,119,0, 
  /* [3][0][][] */ -49,-94,-70,-49,-127,-106,-18,-52, 
  /* [4][0][][] */ -40,-127,91,-80,15,-48,53,-8, 
  /* [5][0][][] */ 30,-57,-14,-7,114,93,-127,-88, 
  /* [6][0][][] */ 45,68,39,127,81,38,-34,-64, 
  /* [7][0][][] */ -8,127,14,41,-16,0,-33,-26, 
  /* [8][0][][] */ 127,107,99,14,-44,52,-122,-89, 
  /* [9][0][][] */ -127,48,-77,69,55,37,-60,-14, 
  /* [10][0][][] */ 31,11,86,127,77,80,-18,-89, 
  /* [11][0][][] */ -94,-32,-27,-70,9,14,127,29, 
  /* [12][0][][] */ 127,57,-48,-44,-79,38,-65,-108, 
  /* [13][0][][] */ 4,127,-76,56,13,66,-123,12, 
  /* [14][0][][] */ -108,36,-63,127,-62,-8,-38,14, 
  /* [15][0][][] */ 11,127,-13,-48,-21,27,-11,-61, 
  /* [16][0][][] */ -3,-127,5,29,37,-40,-75,19, 
  /* [17][0][][] */ 127,127,-64,16,32,36,-84,24, 
  /* [18][0][][] */ -41,-1,-127,-35,-31,-49,-37,36, 
  /* [19][0][][] */ 39,127,-82,-48,-41,-10,90,50, 
  /* [20][0][][] */ 75,4,18,4,127,-54,36,-2, 
  /* [21][0][][] */ -75,6,-1,32,-127,8,1,-7, 
  /* [22][0][][] */ -118,-81,97,-45,127,-6,1,116, 
  /* [23][0][][] */ 17,23,-98,26,-46,127,-119,-102, 
  /* [24][0][][] */ -27,-8,-127,-12,14,16,4,24, 
  /* [25][0][][] */ 127,-14,-15,96,40,-3,0,34, 
  /* [26][0][][] */ 7,-41,-14,2,-28,82,127,-43, 
  /* [27][0][][] */ 127,30,6,14,126,1,125,94, 
  /* [28][0][][] */ 127,72,15,12,122,14,-23,-18, 
  /* [29][0][][] */ 23,43,-127,-16,-61,65,-32,9, 
  /* [30][0][][] */ -13,-40,13,-127,-35,19,-71,-4, 
  /* [31][0][][] */ -66,-16,67,-5,-127,88,13,-75, 
  /* [32][0][][] */ -6,-70,101,-66,34,119,4,-127, 
  /* [33][0][][] */ 8,7,-31,-55,-127,-52,39,72, 
  /* [34][0][][] */ -76,81,40,-30,-19,-21,-81,-127, 
  /* [35][0][][] */ -116,13,58,1,57,-72,127,39, 
  /* [36][0][][] */ 49,118,-19,-16,76,127,-100,-100, 
  /* [37][0][][] */ 35,-127,27,24,31,13,3,37, 
  /* [38][0][][] */ -16,-127,-62,40,-3,53,-4,28, 
  /* [39][0][][] */ 51,-106,97,20,-36,27,-127,-102, 
  /* [40][0][][] */ 127,79,-68,-8,39,43,-6,-35, 
  /* [41][0][][] */ 37,-127,21,60,51,107,-69,93, 
  /* [42][0][][] */ -33,-26,31,-103,-41,-127,-120,7, 
  /* [43][0][][] */ -92,-15,14,-127,-19,-11,-9,-54, 
  /* [44][0][][] */ 62,104,104,35,78,35,127,-13, 
  /* [45][0][][] */ 30,-127,-81,-8,31,10,78,30, 
  /* [46][0][][] */ -26,116,127,47,-48,34,-108,-87, 
  /* [47][0][][] */ 55,9,15,127,2,-35,-44,50, 
};
const TfArray<4, int> tensor_dimension31 = { 4, { 48,1,1,8 } };
const TfArray<48, float> quant31_scale = { 48, { 1.8395458027953282e-05, 0.0013193766353651881, 0.00059218308888375759, 0.00030853066709823906, 0.001562872901558876, 0.001109051750972867, 0.0016712623182684183, 0.0020422725938260555, 0.00058317132061347365, 0.001508616260252893, 0.00066971714841201901, 0.00089263002155348659, 0.00098361424170434475, 0.00092512654373422265, 0.00201771454885602, 0.0042281132191419601, 0.001158649567514658, 0.00048196810530498624, 0.0033576011192053556, 0.00038019660860300064, 0.0017336313612759113, 0.00069524854188784957, 0.00096572615439072251, 0.0017127156024798751, 0.00092253717593848705, 0.00059755478287115693, 0.00048732513096183538, 0.00063976808451116085, 0.00043657200876623392, 0.0031385808251798153, 0.0011905232677236199, 0.00082807452417910099, 0.00284941541031003, 0.00075181724969297647, 0.00054867268772795796, 0.00025358426501043141, 0.00079188600648194551, 0.0011197287822142243, 4.5197321014711633e-05, 0.0035353400744497776, 0.0013702464057132602, 0.0024109149817377329, 0.00088104861788451672, 0.001037057489156723, 0.00039619850576855242, 0.00088112975936383009, 0.0010561071103438735, 0.001432252349331975, } };
const TfArray<48, int> quant31_zero = { 48, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant31 = { (TfLiteFloatArray*)&quant31_scale, (TfLiteIntArray*)&quant31_zero, 0 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int32_t tensor_data32[8] = { -12094, -40021, 9812, 11464, 11083, -11641, 58247, 17303, };
const TfArray<1, int> tensor_dimension32 = { 1, { 8 } };
const TfArray<8, float> quant32_scale = { 8, { 0.00044780204189009964, 0.00040102508501149714, 0.00051474373321980238, 0.00062166003044694662, 0.00075920304516330361, 0.00052935798885300756, 0.00039394336636178195, 0.00055822648573666811, } };
const TfArray<8, int> quant32_zero = { 8, { 0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant32 = { (TfLiteFloatArray*)&quant32_scale, (TfLiteIntArray*)&quant32_zero, 0 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int8_t tensor_data33[8*1*1*48] = { 
  /* [0][0][][] */ -15,-2,54,-127,16,23,30,18,7,-18,-53,-27,94,0,-6,-12,0,-9,-1,26,85,-13,16,-1,8,77,38,4,9,25,-8,-123,10,4,-52,-66,-11,-11,31,42,-14,-45,25,25,29,10,71,-116, 
  /* [1][0][][] */ 31,-1,5,-49,-6,12,-112,116,21,50,-34,-64,38,0,-4,24,0,42,19,-116,32,29,98,16,7,1,47,51,23,-17,54,-4,4,9,-25,-44,3,-70,1,-1,-34,-17,-127,-3,-73,51,-115,-80, 
  /* [2][0][][] */ -34,-9,3,17,-10,-2,55,6,-51,71,-17,-17,-62,0,-55,27,0,12,-127,26,-36,14,20,-9,-16,38,51,4,-12,20,-57,21,19,-8,-30,-29,4,8,73,-3,27,-19,-15,6,25,-14,10,-15, 
  /* [3][0][][] */ 16,6,3,-32,-4,-12,-9,-3,48,58,13,-18,31,0,6,15,0,18,-32,-27,15,-7,8,-7,8,-16,6,59,-27,-22,-24,12,-40,57,-87,-19,-8,-8,22,-127,13,-28,-22,-37,-3,28,-1,-16, 
  /* [4][0][][] */ -10,-29,117,-20,17,-15,-16,20,17,-32,-19,46,-11,0,15,-8,0,20,-2,28,54,10,-10,-20,7,34,8,-60,-11,-8,-18,86,-37,8,-39,-31,18,-19,30,-6,15,-127,8,-28,-12,5,34,-24, 
  /* [5][0][][] */ -16,34,-4,-12,10,69,48,-42,-58,-16,20,62,47,0,-127,9,0,13,8,37,21,0,45,40,6,32,48,-9,7,43,-47,-17,52,14,-67,19,22,41,-1,-32,32,11,-52,20,45,70,34,7, 
  /* [6][0][][] */ -31,-127,21,24,61,-56,-42,-3,56,-83,-3,118,-28,0,-115,104,0,-20,4,-26,-27,-9,19,-69,8,-78,-24,-32,96,-13,72,-1,110,-3,61,-3,-16,-25,-88,-8,-41,-31,10,-75,-58,-79,-76,-27, 
  /* [7][0][][] */ -124,-26,-5,-9,127,24,24,16,63,-30,-10,-12,2,0,62,116,0,6,-16,52,-17,8,-24,0,2,-34,26,-37,90,28,49,-37,-18,-5,6,-12,-7,41,47,-2,33,-14,-22,-21,28,11,52,-7, 
};
const TfArray<4, int> tensor_dimension33 = { 4, { 8,1,1,48 } };
const TfArray<8, float> quant33_scale = { 8, { 0.01903158612549305, 0.017043566331267357, 0.021876607090234756, 0.026420550420880318, 0.032266128808259964, 0.022497713565826416, 0.016742592677474022, 0.023724624887108803, } };
const TfArray<8, int> quant33_zero = { 8, { 0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant33 = { (TfLiteFloatArray*)&quant33_scale, (TfLiteIntArray*)&quant33_zero, 0 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int32_t tensor_data34[48] = { 38613, 48951, 73787, 63087, -6600, 5905, -7429, 66739, 27809, 44793, 20061, 7311, -33290, -127, 48553, -3908, -204, 18791, 5144, -1956, -17728, -13845, 141588, 52247, 437163, 77379, 64682, 28052, -2333, -6176, -836, -56655, 10814, 519452, 30793, 4298, -1791, -1953, 236828, 10, 533, -11299, 2088, 99568, -14492, 103958, -2367, -31655, };
const TfArray<1, int> tensor_dimension34 = { 1, { 48 } };
const TfArray<48, float> quant34_scale = { 48, { 0.00015697033086325973, 9.2654416221193969e-05, 0.00012339238310232759, 6.13837328273803e-05, 0.00013422215124592185, 0.00014077217201702297, 0.00015108881052583456, 2.8652824767050333e-05, 0.00010037393803941086, 2.6217510821879841e-05, 0.00010567637218628079, 3.0652692657895386e-05, 9.2639980721287429e-05, 0.005541567225009203, 5.4026691941544414e-05, 0.00043338313116692007, 0.0027484172023832798, 1.4438101061386988e-05, 5.7653272961033508e-05, 0.0003644963726401329, 7.2415095928590745e-05, 0.00010567326535237953, 4.1451770812273026e-05, 1.4114025361777749e-05, 4.3132117752975319e-06, 4.3117892346344888e-05, 1.8166478184866719e-05, 3.4964283258887008e-05, 0.00027721759397536516, 4.2611689423210919e-05, 6.318598025245592e-05, 0.00012983121268916875, 0.00028308902983553708, 6.9012196490803035e-07, 8.0566518590785563e-05, 5.3181829571258277e-05, 7.0636128839396406e-06, 0.00069531425833702087, 1.9157381757395342e-05, 4.6286775614134967e-05, 4.493641245062463e-05, 6.7570326791610569e-05, 0.00011885631829500198, 8.8342067101621069e-06, 0.00012027056072838604, 6.5240026742685586e-05, 0.00023622815206181258, 4.7162564442260191e-05, } };
const TfArray<48, int> quant34_zero = { 48, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant34 = { (TfLiteFloatArray*)&quant34_scale, (TfLiteIntArray*)&quant34_zero, 0 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int8_t tensor_data35[1*3*3*48] = { 
  /* [0][0][][] */ -40,-43,-11,-47,15,-35,-91,-61,-19,-62,10,103,37,-71,127,-40,-113,-80,26,-13,17,-63,-107,-95,-30,-122,-66,-51,84,40,105,22,-127,-92,29,83,24,51,-116,83,-88,-5,114,-127,-4,-36,-78,127, 78,-19,-35,-40,52,-127,-127,-81,55,-105,-63,127,40,-82,-2,68,-52,-127,53,8,21,-104,-124,-75,6,-127,-83,-43,-44,40,-59,65,23,-127,118,96,37,66,-127,127,-127,13,102,-107,8,-23,-125,97, -32,-9,-12,-34,-53,-105,-56,-15,85,-106,-127,47,6,-71,-111,-4,-127,-52,19,12,1,-71,-43,-33,-19,-81,-70,-52,-40,26,-43,25,95,-98,102,110,13,40,-36,22,-62,23,21,-49,-12,6,-67,53, 
  /* [0][1][][] */ -78,-127,-59,-79,-3,86,121,-120,-18,-100,6,110,99,-64,34,-94,-121,-81,77,-68,60,-81,-114,-123,39,-78,-94,-48,127,-54,127,67,-40,-79,19,127,-39,-82,-85,93,51,75,118,-119,-74,-110,105,115, 127,-93,-127,-127,127,65,105,-127,83,-80,-61,106,127,-14,-11,127,-60,-119,127,-119,127,-127,-127,-127,127,-67,-127,-63,-117,-127,-95,124,23,-98,127,121,-66,-127,-124,91,87,127,127,-90,-98,-127,127,113, -54,13,-86,-121,-107,0,43,-34,127,-60,-48,30,57,-70,-30,-39,-37,-45,45,-95,67,-83,-57,-66,39,-23,-57,-75,-11,-81,-47,25,24,-96,126,75,-45,-52,-16,-9,54,68,12,-74,-53,-44,73,92, 
  /* [0][2][][] */ -52,-93,-42,-47,7,39,6,-65,-38,-127,-14,30,64,-127,-127,-60,-43,-59,35,93,63,-25,-12,-60,32,-26,-31,-90,76,34,79,64,90,-9,-39,8,-100,30,-19,28,11,40,30,-83,108,-86,2,42, 78,-56,-83,-87,69,21,8,-76,32,-55,-15,41,70,-26,23,88,-24,-35,69,127,88,-44,-24,-72,92,-66,-29,-127,-43,57,-51,127,-28,-48,71,30,-127,53,-33,0,24,30,50,-60,127,-117,-32,72, -20,27,-35,-44,-63,-31,42,-11,54,-84,-6,34,19,-43,119,-26,-93,6,18,61,63,-22,4,-30,29,-17,5,-76,-15,58,-30,56,-99,-60,88,61,-9,42,0,-43,21,35,-3,-36,63,-52,-4,54, 
};
const TfArray<4, int> tensor_dimension35 = { 4, { 1,3,3,48 } };
const TfArray<48, float> quant35_scale = { 48, { 0.0066712386906147003, 0.0039378125220537186, 0.0052441763691604137, 0.0026088086888194084, 0.0057044411078095436, 0.0059828171506524086, 0.0064212740398943424, 0.0012177450116723776, 0.004265892319381237, 0.0011142442235723138, 0.0044912458397448063, 0.0013027394888922572, 0.0039371992461383343, 0.23551659286022186, 0.0022961343638598919, 0.018418783321976662, 0.1168077290058136, 0.00061361928237602115, 0.0024502640590071678, 0.015491095371544361, 0.003077641362324357, 0.0044911135919392109, 0.0017617002595216036, 0.00059984606923535466, 0.00018331149476580322, 0.0018325104610994458, 0.00077207532012835145, 0.0014859819784760475, 0.011781747452914715, 0.0018109967932105064, 0.0026854041498154402, 0.0055178264155983925, 0.012031283229589462, 2.9330181860132143e-05, 0.0034240770619362593, 0.0022602276876568794, 0.00030020353733561933, 0.029550855979323387, 0.00081418867921456695, 0.0019671879708766937, 0.0019097975455224514, 0.0028717389795929193, 0.0050513935275375843, 0.0003754537901841104, 0.0051114987581968307, 0.0027727012056857347, 0.010039696469902992, 0.0020044089760631323, } };
const TfArray<48, int> quant35_zero = { 48, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant35 = { (TfLiteFloatArray*)&quant35_scale, (TfLiteIntArray*)&quant35_zero, 3 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int32_t tensor_data36[48] = { 4258, -742, 18129, 10240, 3232, 8651, 12297, 24, -437, -542, 8333, 429, 11686, -101090688, 4637, 22362, -81605648, -231, -1102, 16351, 4150, -29, 412, -20, 4908, -679, -41, 568, 3695, 1899, 3282, 12107, 5051, 357, -850, -2055, 571, 11343, -546, 9090, 3875, 8750, -1476, -351, 15312, 1660, 12587, 3160, };
const TfArray<1, int> tensor_dimension36 = { 1, { 48 } };
const TfArray<48, float> quant36_scale = { 48, { 0.00048193801194429398, 0.00047695549437776208, 0.00019064906518906355, 0.00017708868836052716, 0.00038923427928239107, 0.00025251234183087945, 0.00034084875369444489, 0.00084667588816955686, 0.00042343398672528565, 0.0023917742073535919, 0.00022803591855335981, 0.0011840134393423796, 0.00015467722550965846, 1.6043383288533164e-09, 0.00065743154846131802, 0.00015445803001057357, 1.6043383288533164e-09, 0.0045841038227081299, 0.00025374002871103585, 0.00018588619423098862, 0.00024011469213292003, 0.0067109349183738232, 0.00038265204057097435, 0.0013278920669108629, 0.00072359555633738637, 0.00081159541150555015, 0.001441925996914506, 0.0017486278666183352, 0.00031201259116642177, 0.001172427786514163, 0.0010131467133760452, 0.00019887681992258877, 0.00020072795450687408, 0.0075463633984327316, 0.00035115756327286363, 0.00043209863360971212, 0.0024656972382217646, 0.00013649926404468715, 0.0016965402755886316, 0.00040123891085386276, 0.00072150788037106395, 0.00025378155987709761, 0.00026465635164640844, 0.0044587524607777596, 0.0003181319625582546, 0.00033921012072823942, 0.00019875305588357151, 0.00020226814376655966, } };
const TfArray<48, int> quant36_zero = { 48, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant36 = { (TfLiteFloatArray*)&quant36_scale, (TfLiteIntArray*)&quant36_zero, 0 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int8_t tensor_data37[48*1*1*8] = { 
  /* [0][0][][] */ 10,-5,-8,-127,-5,-81,-37,24, 
  /* [1][0][][] */ 3,71,-14,-127,-18,-12,-41,41, 
  /* [2][0][][] */ 41,-45,-21,116,127,124,-11,92, 
  /* [3][0][][] */ 54,3,-127,82,-96,-1,-9,66, 
  /* [4][0][][] */ 10,-6,54,28,34,15,16,-127, 
  /* [5][0][][] */ 20,-3,-45,35,-14,-14,58,127, 
  /* [6][0][][] */ 127,19,-1,-92,57,-1,89,-30, 
  /* [7][0][][] */ 127,-27,18,43,86,-7,79,-76, 
  /* [8][0][][] */ -25,-44,31,85,-21,10,6,-127, 
  /* [9][0][][] */ 34,-27,46,43,127,88,4,119, 
  /* [10][0][][] */ -50,10,-127,46,-88,66,-81,58, 
  /* [11][0][][] */ 31,-93,-37,-91,-62,-127,77,-49, 
  /* [12][0][][] */ 8,-49,-74,111,-115,-99,84,127, 
  /* [13][0][][] */ 0,0,0,0,0,0,0,0, 
  /* [14][0][][] */ 15,-14,7,24,127,84,40,23, 
  /* [15][0][][] */ 10,-2,12,-127,-39,47,24,35, 
  /* [16][0][][] */ 0,0,0,0,0,0,0,0, 
  /* [17][0][][] */ -23,27,127,81,-10,-84,33,-33, 
  /* [18][0][][] */ 77,-127,19,127,71,23,-62,22, 
  /* [19][0][][] */ -127,-16,96,38,79,-20,-65,-16, 
  /* [20][0][][] */ 36,8,-65,59,-88,-127,28,38, 
  /* [21][0][][] */ 66,2,127,24,4,8,41,26, 
  /* [22][0][][] */ -72,15,-39,16,7,8,-127,9, 
  /* [23][0][][] */ -127,52,-1,-9,-56,-82,96,-46, 
  /* [24][0][][] */ -33,-84,-78,124,-34,-111,119,127, 
  /* [25][0][][] */ 14,8,28,78,127,9,-17,-91, 
  /* [26][0][][] */ -41,2,-71,64,40,52,-127,14, 
  /* [27][0][][] */ 3,8,-22,14,-1,127,26,51, 
  /* [28][0][][] */ -11,11,5,-49,-23,127,30,36, 
  /* [29][0][][] */ 127,-59,8,-40,-9,-23,100,65, 
  /* [30][0][][] */ 21,23,54,-6,61,47,127,-67, 
  /* [31][0][][] */ -15,-56,25,-44,-4,-18,127,31, 
  /* [32][0][][] */ 10,7,-24,127,65,43,21,29, 
  /* [33][0][][] */ -3,32,6,-76,-7,6,43,127, 
  /* [34][0][][] */ 2,43,51,-89,127,44,18,118, 
  /* [35][0][][] */ 52,9,44,-46,93,3,127,3, 
  /* [36][0][][] */ -127,-3,-24,-21,-6,12,-104,108, 
  /* [37][0][][] */ 31,-5,0,-52,20,60,127,-25, 
  /* [38][0][][] */ -72,71,26,127,109,75,-56,43, 
  /* [39][0][][] */ 9,6,4,-80,56,35,-30,127, 
  /* [40][0][][] */ 29,35,127,-86,-4,80,114,22, 
  /* [41][0][][] */ -3,-40,-1,46,127,4,34,55, 
  /* [42][0][][] */ -127,-4,73,29,-10,52,-51,64, 
  /* [43][0][][] */ 40,-53,-18,127,-83,-47,26,-126, 
  /* [44][0][][] */ 127,-36,-62,-119,63,-79,44,-45, 
  /* [45][0][][] */ -127,69,20,-19,48,7,31,-56, 
  /* [46][0][][] */ -127,-17,100,56,92,102,-42,52, 
  /* [47][0][][] */ 91,19,69,-61,86,-61,127,-16, 
};
const TfArray<4, int> tensor_dimension37 = { 4, { 48,1,1,8 } };
const TfArray<48, float> quant37_scale = { 48, { 0.001182664418593049, 0.0011704374337568879, 0.00046784826554358006, 0.0004345714405644685, 0.00095517170848324895, 0.00061965931672602892, 0.00083643477410078049, 0.0020777224563062191, 0.0010390969691798091, 0.0058693569153547287, 0.00055959471501410007, 0.0029055408667773008, 0.00037957425229251385, 3.937008052901092e-09, 0.0016133213648572564, 0.00037903632619418204, 3.937008052901092e-09, 0.011249282397329807, 0.00062267202883958817, 0.00045616031275130808, 0.00058923574397340417, 0.016468474641442299, 0.00093901902437210083, 0.0032586154993623495, 0.0017756862798705697, 0.001991635886952281, 0.0035384520888328552, 0.004291091114282608, 0.00076567148789763451, 0.0028771099168807268, 0.0024862380232661963, 0.00048803898971527815, 0.00049258163198828697, 0.018518596887588501, 0.00086173234740272164, 0.0010603597620502114, 0.0060507627204060555, 0.00033496596734039485, 0.0041632694192230701, 0.00098463078029453754, 0.0017705631908029318, 0.00062277395045384765, 0.00064946041675284505, 0.010941673070192337, 0.00078068824950605631, 0.00083241361426189542, 0.00048773529124446213, 0.00049636123003438115, } };
const TfArray<48, int> quant37_zero = { 48, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant37 = { (TfLiteFloatArray*)&quant37_scale, (TfLiteIntArray*)&quant37_zero, 0 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int32_t tensor_data38[8] = { 685, -35570, -358, -3368, -7890, -12041, -2323, -22439, };
const TfArray<1, int> tensor_dimension38 = { 1, { 8 } };
const TfArray<8, float> quant38_scale = { 8, { 0.0015334568452090025, 0.00089728191960602999, 0.0015382419805973768, 0.0010423479834571481, 0.0014935284852981567, 0.001705546397715807, 0.0014801467768847942, 0.0013132438762113452, } };
const TfArray<8, int> quant38_zero = { 8, { 0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant38 = { (TfLiteFloatArray*)&quant38_scale, (TfLiteIntArray*)&quant38_zero, 0 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int8_t tensor_data39[8*1*1*16] = { 
  /* [0][0][][] */ 0,6,-14,5,110,-17,4,14,-12,-127,-75,34,0,61,-13,0, 
  /* [1][0][][] */ 0,-8,-14,79,49,9,2,-19,7,0,127,-95,0,33,2,0, 
  /* [2][0][][] */ 0,13,42,-27,-127,3,24,-14,8,-4,2,-27,0,84,-5,0, 
  /* [3][0][][] */ 0,-82,31,-127,20,21,80,31,11,55,36,30,0,10,18,0, 
  /* [4][0][][] */ 0,33,-38,20,-111,2,127,-17,1,-61,28,-2,0,-13,-1,0, 
  /* [5][0][][] */ 0,-20,10,8,-23,-18,33,4,-7,1,-9,-29,0,-10,127,0, 
  /* [6][0][][] */ 0,41,31,-7,-19,-11,-28,-3,11,-127,38,39,0,31,2,0, 
  /* [7][0][][] */ 0,-15,-8,127,-22,-8,29,0,-6,28,-28,62,0,-7,43,0, 
};
const TfArray<4, int> tensor_dimension39 = { 4, { 8,1,1,16 } };
const TfArray<8, float> quant39_scale = { 8, { 0.065171912312507629, 0.038134481757879257, 0.065375283360481262, 0.044299788773059845, 0.063474960625171661, 0.072485722601413727, 0.062906235456466675, 0.055812861770391464, } };
const TfArray<8, int> quant39_zero = { 8, { 0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant39 = { (TfLiteFloatArray*)&quant39_scale, (TfLiteIntArray*)&quant39_zero, 0 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int32_t tensor_data40[16] = { -161, 32198, 168098, 11056, 9403, 324771, 9110, 155094, -18032, 3143, 32145, 14074, -445, 96008, 15167, -107, };
const TfArray<1, int> tensor_dimension40 = { 1, { 16 } };
const TfArray<16, float> quant40_scale = { 16, { 0.0018688903655856848, 0.00013288807531353086, 2.0861634766333736e-05, 0.0003906222409568727, 0.0002259011089336127, 9.7256734079564922e-06, 0.00039717537583783269, 1.8574688510852866e-05, 1.6773296010796912e-05, 0.00053000898333266377, 0.00016322154260706156, 0.00081111158942803741, 0.00072724185883998871, 2.5100020138779655e-05, 0.00016738654812797904, 0.003907486330717802, } };
const TfArray<16, int> quant40_zero = { 16, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant40 = { (TfLiteFloatArray*)&quant40_scale, (TfLiteIntArray*)&quant40_zero, 0 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int8_t tensor_data41[1*3*3*16] = { 
  /* [0][0][][] */ -108,20,-84,-127,41,-71,80,-72,-86,-3,-6,33,-127,-6,55,-73, 51,28,-127,125,127,-127,127,-127,-84,127,-127,47,-105,-5,127,-25, 24,-22,101,-2,-71,63,-92,77,-94,-26,6,-9,61,-1,-100,-29, 
  /* [0][1][][] */ -127,127,-23,13,-42,16,-29,15,-25,-1,6,-98,-49,-10,-29,-14, -78,-39,-54,-15,-7,-23,9,-26,-108,-89,23,-16,-104,127,2,23, 14,3,72,2,3,33,-24,34,-127,6,2,7,-21,-12,-3,43, 
  /* [0][2][][] */ -115,-78,64,2,-8,39,-40,58,-72,-2,2,-1,40,-3,-26,23, 23,-4,34,-2,-29,40,-33,26,-124,-13,2,76,-58,0,-27,-111, 21,-9,19,0,1,16,10,24,-115,3,3,-127,107,-3,18,-127, 
};
const TfArray<4, int> tensor_dimension41 = { 4, { 1,3,3,16 } };
const TfArray<16, float> quant41_scale = { 16, { 0.079427838325500488, 0.0056477431207895279, 0.00088661949848756194, 0.016601445153355598, 0.0096007967367768288, 0.00041334112756885588, 0.016879953444004059, 0.00078942422987893224, 0.00071286509046331048, 0.022525381296873093, 0.006936915684491396, 0.034472241997718811, 0.030907778069376945, 0.0010667508468031883, 0.0071139279752969742, 0.16606816649436951, } };
const TfArray<16, int> quant41_zero = { 16, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant41 = { (TfLiteFloatArray*)&quant41_scale, (TfLiteIntArray*)&quant41_zero, 3 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int32_t tensor_data42[16] = { -1073741824, 24051, -226900, 3101, 42557, 30654, 13537, 57771, -183828, 8739, 47475, 344354, -1073741824, 473227, 22691, -1073741824, };
const TfArray<1, int> tensor_dimension42 = { 1, { 16 } };
const TfArray<16, float> quant42_scale = { 16, { 1.3102037232926023e-09, 0.00021507740893866867, 9.9102078820578754e-05, 2.1328869479475543e-05, 5.3484498494071886e-05, 0.00032668240601196885, 9.0766297944355756e-05, 0.00012843192962463945, 1.8957176507683471e-05, 2.7809610401163809e-05, 5.2409875934245065e-05, 1.3017316632613074e-05, 1.1533876076441629e-09, 7.5207685767963994e-06, 8.4643768786918372e-05, 1.243374708748135e-10, } };
const TfArray<16, int> quant42_zero = { 16, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant42 = { (TfLiteFloatArray*)&quant42_scale, (TfLiteIntArray*)&quant42_zero, 0 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int8_t tensor_data43[16*3*3*3] = { 
  /* [0][0][][] */ 0,0,0, 0,0,0, 0,0,0, 
  /* [0][1][][] */ 0,0,0, 0,0,0, 0,0,0, 
  /* [0][2][][] */ 0,0,0, 0,0,0, 0,0,0, 
  /* [1][0][][] */ 25,-36,30, -29,-68,21, -101,-127,11, 
  /* [1][1][][] */ 22,-23,28, -16,-39,27, -20,-84,49, 
  /* [1][2][][] */ 36,1,45, 27,-14,46, 29,-52,49, 
  /* [2][0][][] */ -49,-16,-12, 83,127,52, 84,58,72, 
  /* [2][1][][] */ -66,-12,-10, 66,117,30, 36,54,64, 
  /* [2][2][][] */ -30,-36,23, 87,56,68, 43,37,85, 
  /* [3][0][][] */ 15,69,43, -2,127,93, 38,89,79, 
  /* [3][1][][] */ 9,47,39, -23,103,87, 10,39,55, 
  /* [3][2][][] */ -5,12,24, -35,18,60, 3,22,38, 
  /* [4][0][][] */ -66,72,-52, -77,70,-54, -24,60,-19, 
  /* [4][1][][] */ -34,124,1, -50,127,-9, -8,91,-6, 
  /* [4][2][][] */ -19,96,-2, -45,79,-42, -26,59,-18, 
  /* [5][0][][] */ -102,-117,-127, -90,-82,-76, -73,-34,-13, 
  /* [5][1][][] */ -30,-67,-47, 0,-14,21, 20,45,70, 
  /* [5][2][][] */ -5,5,30, 26,32,64, 39,59,74, 
  /* [6][0][][] */ 52,-80,38, 75,-99,53, 32,-41,31, 
  /* [6][1][][] */ 56,-106,51, 87,-127,60, 28,-41,26, 
  /* [6][2][][] */ 39,-46,22, 47,-46,34, 12,-11,10, 
  /* [7][0][][] */ -27,-39,-42, -57,-51,-44, 40,25,-1, 
  /* [7][1][][] */ -42,-71,-46, -127,-100,-61, 16,2,-2, 
  /* [7][2][][] */ -71,-49,-53, -72,-51,-58, -6,16,-1, 
  /* [8][0][][] */ 127,103,-13, 119,102,2, 110,100,-15, 
  /* [8][1][][] */ 127,93,-35, 118,97,-20, 104,96,-39, 
  /* [8][2][][] */ 3,51,-50, 46,61,-40, 17,60,-55, 
  /* [9][0][][] */ 62,67,38, 25,42,19, 55,67,46, 
  /* [9][1][][] */ 127,96,-59, 81,93,-33, 33,43,23, 
  /* [9][2][][] */ 3,-14,-32, 17,-22,-29, 17,5,-21, 
  /* [10][0][][] */ -21,-72,-12, 34,97,26, -9,-8,2, 
  /* [10][1][][] */ -53,-91,-8, 77,127,20, -17,-22,3, 
  /* [10][2][][] */ -26,-12,7, 38,28,-5, -8,1,9, 
  /* [11][0][][] */ 8,0,19, 17,-14,20, 58,-22,11, 
  /* [11][1][][] */ -28,-21,-1, -33,-44,-21, 25,-6,1, 
  /* [11][2][][] */ 61,29,-2, 127,119,75, 45,68,25, 
  /* [12][0][][] */ 0,0,0, 0,0,0, 0,0,0, 
  /* [12][1][][] */ 0,0,0, 0,0,0, 0,0,0, 
  /* [12][2][][] */ 0,0,0, 0,0,0, 0,0,0, 
  /* [13][0][][] */ -40,-80,-7, -49,-93,-14, -2,-7,3, 
  /* [13][1][][] */ 64,115,23, 60,127,31, 13,23,18, 
  /* [13][2][][] */ -1,-9,11, 7,-8,7, 6,12,4, 
  /* [14][0][][] */ 59,-40,-24, 86,-65,-34, 28,-56,-31, 
  /* [14][1][][] */ 92,-48,-61, 127,-49,-55, 68,-34,-16, 
  /* [14][2][][] */ 52,-50,-53, 77,-35,-34, 34,-24,-3, 
  /* [15][0][][] */ 0,0,0, 0,0,0, 0,0,0, 
  /* [15][1][][] */ 0,0,0, 0,0,0, 0,0,0, 
  /* [15][2][][] */ 0,0,0, 0,0,0, 0,0,0, 
};
const TfArray<4, int> tensor_dimension43 = { 4, { 16,3,3,3 } };
const TfArray<16, float> quant43_scale = { 16, { 3.3410194077987398e-07, 0.05484473705291748, 0.025271028280258179, 0.0054388614371418953, 0.01363854669034481, 0.083304010331630707, 0.0231454037129879, 0.032750140875577927, 0.0048340796492993832, 0.0070914500392973423, 0.013364517129957676, 0.0033194154966622591, 2.9411381774480105e-07, 0.001917795860208571, 0.021584160625934601, 3.1706054670621597e-08, } };
const TfArray<16, int> quant43_zero = { 16, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant43 = { (TfLiteFloatArray*)&quant43_scale, (TfLiteIntArray*)&quant43_zero, 0 };
const TfArray<4, int> tensor_dimension44 = { 4, { 1,48,48,16 } };
const TfArray<1, float> quant44_scale = { 1, { 0.023529412224888802, } };
const TfArray<1, int> quant44_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant44 = { (TfLiteFloatArray*)&quant44_scale, (TfLiteIntArray*)&quant44_zero, 0 };
const TfArray<4, int> tensor_dimension45 = { 4, { 1,48,48,16 } };
const TfArray<1, float> quant45_scale = { 1, { 0.023529412224888802, } };
const TfArray<1, int> quant45_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant45 = { (TfLiteFloatArray*)&quant45_scale, (TfLiteIntArray*)&quant45_zero, 0 };
const TfArray<4, int> tensor_dimension46 = { 4, { 1,48,48,8 } };
const TfArray<1, float> quant46_scale = { 1, { 0.40750190615653992, } };
const TfArray<1, int> quant46_zero = { 1, { 2 } };
const TfLiteAffineQuantization quant46 = { (TfLiteFloatArray*)&quant46_scale, (TfLiteIntArray*)&quant46_zero, 0 };
const TfArray<4, int> tensor_dimension47 = { 4, { 1,48,48,48 } };
const TfArray<1, float> quant47_scale = { 1, { 0.023529412224888802, } };
const TfArray<1, int> quant47_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant47 = { (TfLiteFloatArray*)&quant47_scale, (TfLiteIntArray*)&quant47_zero, 0 };
const TfArray<4, int> tensor_dimension48 = { 4, { 1,49,49,48 } };
const TfArray<1, float> quant48_scale = { 1, { 0.023529412224888802, } };
const TfArray<1, int> quant48_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant48 = { (TfLiteFloatArray*)&quant48_scale, (TfLiteIntArray*)&quant48_zero, 0 };
const TfArray<4, int> tensor_dimension49 = { 4, { 1,24,24,48 } };
const TfArray<1, float> quant49_scale = { 1, { 0.023529412224888802, } };
const TfArray<1, int> quant49_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant49 = { (TfLiteFloatArray*)&quant49_scale, (TfLiteIntArray*)&quant49_zero, 0 };
const TfArray<4, int> tensor_dimension50 = { 4, { 1,24,24,8 } };
const TfArray<1, float> quant50_scale = { 1, { 0.41996914148330688, } };
const TfArray<1, int> quant50_zero = { 1, { -3 } };
const TfLiteAffineQuantization quant50 = { (TfLiteFloatArray*)&quant50_scale, (TfLiteIntArray*)&quant50_zero, 0 };
const TfArray<4, int> tensor_dimension51 = { 4, { 1,24,24,48 } };
const TfArray<1, float> quant51_scale = { 1, { 0.023529412224888802, } };
const TfArray<1, int> quant51_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant51 = { (TfLiteFloatArray*)&quant51_scale, (TfLiteIntArray*)&quant51_zero, 0 };
const TfArray<4, int> tensor_dimension52 = { 4, { 1,24,24,48 } };
const TfArray<1, float> quant52_scale = { 1, { 0.023529412224888802, } };
const TfArray<1, int> quant52_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant52 = { (TfLiteFloatArray*)&quant52_scale, (TfLiteIntArray*)&quant52_zero, 0 };
const TfArray<4, int> tensor_dimension53 = { 4, { 1,24,24,8 } };
const TfArray<1, float> quant53_scale = { 1, { 0.38829684257507324, } };
const TfArray<1, int> quant53_zero = { 1, { -17 } };
const TfLiteAffineQuantization quant53 = { (TfLiteFloatArray*)&quant53_scale, (TfLiteIntArray*)&quant53_zero, 0 };
const TfArray<4, int> tensor_dimension54 = { 4, { 1,24,24,8 } };
const TfArray<1, float> quant54_scale = { 1, { 0.49208465218544006, } };
const TfArray<1, int> quant54_zero = { 1, { -9 } };
const TfLiteAffineQuantization quant54 = { (TfLiteFloatArray*)&quant54_scale, (TfLiteIntArray*)&quant54_zero, 0 };
const TfArray<4, int> tensor_dimension55 = { 4, { 1,24,24,48 } };
const TfArray<1, float> quant55_scale = { 1, { 0.023529412224888802, } };
const TfArray<1, int> quant55_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant55 = { (TfLiteFloatArray*)&quant55_scale, (TfLiteIntArray*)&quant55_zero, 0 };
const TfArray<4, int> tensor_dimension56 = { 4, { 1,25,25,48 } };
const TfArray<1, float> quant56_scale = { 1, { 0.023529412224888802, } };
const TfArray<1, int> quant56_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant56 = { (TfLiteFloatArray*)&quant56_scale, (TfLiteIntArray*)&quant56_zero, 0 };
const TfArray<4, int> tensor_dimension57 = { 4, { 1,12,12,48 } };
const TfArray<1, float> quant57_scale = { 1, { 0.023529412224888802, } };
const TfArray<1, int> quant57_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant57 = { (TfLiteFloatArray*)&quant57_scale, (TfLiteIntArray*)&quant57_zero, 0 };
const TfArray<4, int> tensor_dimension58 = { 4, { 1,12,12,16 } };
const TfArray<1, float> quant58_scale = { 1, { 0.25713202357292175, } };
const TfArray<1, int> quant58_zero = { 1, { 2 } };
const TfLiteAffineQuantization quant58 = { (TfLiteFloatArray*)&quant58_scale, (TfLiteIntArray*)&quant58_zero, 0 };
const TfArray<4, int> tensor_dimension59 = { 4, { 1,12,12,96 } };
const TfArray<1, float> quant59_scale = { 1, { 0.023529412224888802, } };
const TfArray<1, int> quant59_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant59 = { (TfLiteFloatArray*)&quant59_scale, (TfLiteIntArray*)&quant59_zero, 0 };
const TfArray<4, int> tensor_dimension60 = { 4, { 1,12,12,96 } };
const TfArray<1, float> quant60_scale = { 1, { 0.023529412224888802, } };
const TfArray<1, int> quant60_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant60 = { (TfLiteFloatArray*)&quant60_scale, (TfLiteIntArray*)&quant60_zero, 0 };
const TfArray<4, int> tensor_dimension61 = { 4, { 1,12,12,16 } };
const TfArray<1, float> quant61_scale = { 1, { 0.22160632908344269, } };
const TfArray<1, int> quant61_zero = { 1, { -8 } };
const TfLiteAffineQuantization quant61 = { (TfLiteFloatArray*)&quant61_scale, (TfLiteIntArray*)&quant61_zero, 0 };
const TfArray<4, int> tensor_dimension62 = { 4, { 1,12,12,16 } };
const TfArray<1, float> quant62_scale = { 1, { 0.26481190323829651, } };
const TfArray<1, int> quant62_zero = { 1, { 4 } };
const TfLiteAffineQuantization quant62 = { (TfLiteFloatArray*)&quant62_scale, (TfLiteIntArray*)&quant62_zero, 0 };
const TfArray<4, int> tensor_dimension63 = { 4, { 1,12,12,96 } };
const TfArray<1, float> quant63_scale = { 1, { 0.023529412224888802, } };
const TfArray<1, int> quant63_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant63 = { (TfLiteFloatArray*)&quant63_scale, (TfLiteIntArray*)&quant63_zero, 0 };
const TfArray<4, int> tensor_dimension64 = { 4, { 1,12,12,96 } };
const TfArray<1, float> quant64_scale = { 1, { 0.023529412224888802, } };
const TfArray<1, int> quant64_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant64 = { (TfLiteFloatArray*)&quant64_scale, (TfLiteIntArray*)&quant64_zero, 0 };
const TfArray<4, int> tensor_dimension65 = { 4, { 1,12,12,16 } };
const TfArray<1, float> quant65_scale = { 1, { 0.29681128263473511, } };
const TfArray<1, int> quant65_zero = { 1, { 23 } };
const TfLiteAffineQuantization quant65 = { (TfLiteFloatArray*)&quant65_scale, (TfLiteIntArray*)&quant65_zero, 0 };
const TfArray<4, int> tensor_dimension66 = { 4, { 1,12,12,16 } };
const TfArray<1, float> quant66_scale = { 1, { 0.34839817881584167, } };
const TfArray<1, int> quant66_zero = { 1, { 6 } };
const TfLiteAffineQuantization quant66 = { (TfLiteFloatArray*)&quant66_scale, (TfLiteIntArray*)&quant66_zero, 0 };
const TfArray<4, int> tensor_dimension67 = { 4, { 1,12,12,96 } };
const TfArray<1, float> quant67_scale = { 1, { 0.023529412224888802, } };
const TfArray<1, int> quant67_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant67 = { (TfLiteFloatArray*)&quant67_scale, (TfLiteIntArray*)&quant67_zero, 0 };
const TfArray<4, int> tensor_dimension68 = { 4, { 1,12,12,32 } };
const TfArray<1, float> quant68_scale = { 1, { 0.077255047857761383, } };
const TfArray<1, int> quant68_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant68 = { (TfLiteFloatArray*)&quant68_scale, (TfLiteIntArray*)&quant68_zero, 0 };
const TfArray<4, int> tensor_dimension69 = { 4, { 1,12,12,11 } };
const TfArray<1, float> quant69_scale = { 1, { 0.11094764620065689, } };
const TfArray<1, int> quant69_zero = { 1, { 41 } };
const TfLiteAffineQuantization quant69 = { (TfLiteFloatArray*)&quant69_scale, (TfLiteIntArray*)&quant69_zero, 0 };
const TfArray<4, int> tensor_dimension70 = { 4, { 1,12,12,11 } };
const TfArray<1, float> quant70_scale = { 1, { 0.00390625, } };
const TfArray<1, int> quant70_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant70 = { (TfLiteFloatArray*)&quant70_scale, (TfLiteIntArray*)&quant70_zero, 0 };
const TfLiteConvParams opdata0 = { kTfLitePaddingSame, 2,2, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs0 = { 3, { 0,43,42 } };
const TfArray<1, int> outputs0 = { 1, { 44 } };
const TfLiteDepthwiseConvParams opdata1 = { kTfLitePaddingSame, 1,1, 1, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs1 = { 3, { 44,41,40 } };
const TfArray<1, int> outputs1 = { 1, { 45 } };
const TfLiteConvParams opdata2 = { kTfLitePaddingSame, 1,1, kTfLiteActNone, 1,1 };
const TfArray<3, int> inputs2 = { 3, { 45,39,38 } };
const TfArray<1, int> outputs2 = { 1, { 46 } };
const TfLiteConvParams opdata3 = { kTfLitePaddingSame, 1,1, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs3 = { 3, { 46,37,36 } };
const TfArray<1, int> outputs3 = { 1, { 47 } };
const TfArray<2, int> inputs4 = { 2, { 47,1 } };
const TfArray<1, int> outputs4 = { 1, { 48 } };
const TfLiteDepthwiseConvParams opdata5 = { kTfLitePaddingValid, 2,2, 1, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs5 = { 3, { 48,35,34 } };
const TfArray<1, int> outputs5 = { 1, { 49 } };
const TfLiteConvParams opdata6 = { kTfLitePaddingSame, 1,1, kTfLiteActNone, 1,1 };
const TfArray<3, int> inputs6 = { 3, { 49,33,32 } };
const TfArray<1, int> outputs6 = { 1, { 50 } };
const TfLiteConvParams opdata7 = { kTfLitePaddingSame, 1,1, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs7 = { 3, { 50,31,30 } };
const TfArray<1, int> outputs7 = { 1, { 51 } };
const TfLiteDepthwiseConvParams opdata8 = { kTfLitePaddingSame, 1,1, 1, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs8 = { 3, { 51,29,28 } };
const TfArray<1, int> outputs8 = { 1, { 52 } };
const TfLiteConvParams opdata9 = { kTfLitePaddingSame, 1,1, kTfLiteActNone, 1,1 };
const TfArray<3, int> inputs9 = { 3, { 52,27,26 } };
const TfArray<1, int> outputs9 = { 1, { 53 } };
const TfLiteAddParams opdata10 = { kTfLiteActNone };
const TfArray<2, int> inputs10 = { 2, { 50,53 } };
const TfArray<1, int> outputs10 = { 1, { 54 } };
const TfLiteConvParams opdata11 = { kTfLitePaddingSame, 1,1, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs11 = { 3, { 54,25,24 } };
const TfArray<1, int> outputs11 = { 1, { 55 } };
const TfArray<2, int> inputs12 = { 2, { 55,1 } };
const TfArray<1, int> outputs12 = { 1, { 56 } };
const TfLiteDepthwiseConvParams opdata13 = { kTfLitePaddingValid, 2,2, 1, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs13 = { 3, { 56,23,22 } };
const TfArray<1, int> outputs13 = { 1, { 57 } };
const TfLiteConvParams opdata14 = { kTfLitePaddingSame, 1,1, kTfLiteActNone, 1,1 };
const TfArray<3, int> inputs14 = { 3, { 57,21,20 } };
const TfArray<1, int> outputs14 = { 1, { 58 } };
const TfLiteConvParams opdata15 = { kTfLitePaddingSame, 1,1, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs15 = { 3, { 58,19,18 } };
const TfArray<1, int> outputs15 = { 1, { 59 } };
const TfLiteDepthwiseConvParams opdata16 = { kTfLitePaddingSame, 1,1, 1, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs16 = { 3, { 59,17,16 } };
const TfArray<1, int> outputs16 = { 1, { 60 } };
const TfLiteConvParams opdata17 = { kTfLitePaddingSame, 1,1, kTfLiteActNone, 1,1 };
const TfArray<3, int> inputs17 = { 3, { 60,15,14 } };
const TfArray<1, int> outputs17 = { 1, { 61 } };
const TfLiteAddParams opdata18 = { kTfLiteActNone };
const TfArray<2, int> inputs18 = { 2, { 58,61 } };
const TfArray<1, int> outputs18 = { 1, { 62 } };
const TfLiteConvParams opdata19 = { kTfLitePaddingSame, 1,1, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs19 = { 3, { 62,13,12 } };
const TfArray<1, int> outputs19 = { 1, { 63 } };
const TfLiteDepthwiseConvParams opdata20 = { kTfLitePaddingSame, 1,1, 1, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs20 = { 3, { 63,11,10 } };
const TfArray<1, int> outputs20 = { 1, { 64 } };
const TfLiteConvParams opdata21 = { kTfLitePaddingSame, 1,1, kTfLiteActNone, 1,1 };
const TfArray<3, int> inputs21 = { 3, { 64,9,8 } };
const TfArray<1, int> outputs21 = { 1, { 65 } };
const TfLiteAddParams opdata22 = { kTfLiteActNone };
const TfArray<2, int> inputs22 = { 2, { 62,65 } };
const TfArray<1, int> outputs22 = { 1, { 66 } };
const TfLiteConvParams opdata23 = { kTfLitePaddingSame, 1,1, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs23 = { 3, { 66,7,6 } };
const TfArray<1, int> outputs23 = { 1, { 67 } };
const TfLiteConvParams opdata24 = { kTfLitePaddingValid, 1,1, kTfLiteActRelu, 1,1 };
const TfArray<3, int> inputs24 = { 3, { 67,5,4 } };
const TfArray<1, int> outputs24 = { 1, { 68 } };
const TfLiteConvParams opdata25 = { kTfLitePaddingValid, 1,1, kTfLiteActNone, 1,1 };
const TfArray<3, int> inputs25 = { 3, { 68,3,2 } };
const TfArray<1, int> outputs25 = { 1, { 69 } };
const TfLiteSoftmaxParams opdata26 = { 1 };
const TfArray<1, int> inputs26 = { 1, { 69 } };
const TfArray<1, int> outputs26 = { 1, { 70 } };
};

TensorInfo_t tensorData[] = {
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 0), (TfLiteIntArray*)&g0::tensor_dimension0, 27648, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant0))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data1, (TfLiteIntArray*)&g0::tensor_dimension1, 32, {kTfLiteNoQuantization, nullptr}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data2, (TfLiteIntArray*)&g0::tensor_dimension2, 44, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant2))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data3, (TfLiteIntArray*)&g0::tensor_dimension3, 352, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant3))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data4, (TfLiteIntArray*)&g0::tensor_dimension4, 128, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant4))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data5, (TfLiteIntArray*)&g0::tensor_dimension5, 3072, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant5))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data6, (TfLiteIntArray*)&g0::tensor_dimension6, 384, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant6))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data7, (TfLiteIntArray*)&g0::tensor_dimension7, 1536, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant7))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data8, (TfLiteIntArray*)&g0::tensor_dimension8, 64, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant8))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data9, (TfLiteIntArray*)&g0::tensor_dimension9, 1536, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant9))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data10, (TfLiteIntArray*)&g0::tensor_dimension10, 384, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant10))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data11, (TfLiteIntArray*)&g0::tensor_dimension11, 864, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant11))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data12, (TfLiteIntArray*)&g0::tensor_dimension12, 384, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant12))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data13, (TfLiteIntArray*)&g0::tensor_dimension13, 1536, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant13))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data14, (TfLiteIntArray*)&g0::tensor_dimension14, 64, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant14))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data15, (TfLiteIntArray*)&g0::tensor_dimension15, 1536, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant15))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data16, (TfLiteIntArray*)&g0::tensor_dimension16, 384, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant16))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data17, (TfLiteIntArray*)&g0::tensor_dimension17, 864, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant17))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data18, (TfLiteIntArray*)&g0::tensor_dimension18, 384, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant18))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data19, (TfLiteIntArray*)&g0::tensor_dimension19, 1536, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant19))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data20, (TfLiteIntArray*)&g0::tensor_dimension20, 64, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant20))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data21, (TfLiteIntArray*)&g0::tensor_dimension21, 768, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant21))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data22, (TfLiteIntArray*)&g0::tensor_dimension22, 192, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant22))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data23, (TfLiteIntArray*)&g0::tensor_dimension23, 432, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant23))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data24, (TfLiteIntArray*)&g0::tensor_dimension24, 192, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant24))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data25, (TfLiteIntArray*)&g0::tensor_dimension25, 384, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant25))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data26, (TfLiteIntArray*)&g0::tensor_dimension26, 32, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant26))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data27, (TfLiteIntArray*)&g0::tensor_dimension27, 384, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant27))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data28, (TfLiteIntArray*)&g0::tensor_dimension28, 192, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant28))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data29, (TfLiteIntArray*)&g0::tensor_dimension29, 432, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant29))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data30, (TfLiteIntArray*)&g0::tensor_dimension30, 192, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant30))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data31, (TfLiteIntArray*)&g0::tensor_dimension31, 384, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant31))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data32, (TfLiteIntArray*)&g0::tensor_dimension32, 32, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant32))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data33, (TfLiteIntArray*)&g0::tensor_dimension33, 384, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant33))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data34, (TfLiteIntArray*)&g0::tensor_dimension34, 192, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant34))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data35, (TfLiteIntArray*)&g0::tensor_dimension35, 432, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant35))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data36, (TfLiteIntArray*)&g0::tensor_dimension36, 192, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant36))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data37, (TfLiteIntArray*)&g0::tensor_dimension37, 384, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant37))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data38, (TfLiteIntArray*)&g0::tensor_dimension38, 32, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant38))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data39, (TfLiteIntArray*)&g0::tensor_dimension39, 128, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant39))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data40, (TfLiteIntArray*)&g0::tensor_dimension40, 64, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant40))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data41, (TfLiteIntArray*)&g0::tensor_dimension41, 144, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant41))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data42, (TfLiteIntArray*)&g0::tensor_dimension42, 64, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant42))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data43, (TfLiteIntArray*)&g0::tensor_dimension43, 432, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant43))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 36864), (TfLiteIntArray*)&g0::tensor_dimension44, 36864, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant44))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 0), (TfLiteIntArray*)&g0::tensor_dimension45, 36864, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant45))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 36864), (TfLiteIntArray*)&g0::tensor_dimension46, 18432, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant46))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 115248), (TfLiteIntArray*)&g0::tensor_dimension47, 110592, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant47))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 0), (TfLiteIntArray*)&g0::tensor_dimension48, 115248, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant48))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 115248), (TfLiteIntArray*)&g0::tensor_dimension49, 27648, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant49))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 55296), (TfLiteIntArray*)&g0::tensor_dimension50, 4608, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant50))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 27648), (TfLiteIntArray*)&g0::tensor_dimension51, 27648, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant51))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 0), (TfLiteIntArray*)&g0::tensor_dimension52, 27648, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant52))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 27648), (TfLiteIntArray*)&g0::tensor_dimension53, 4608, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant53))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 0), (TfLiteIntArray*)&g0::tensor_dimension54, 4608, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant54))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 30000), (TfLiteIntArray*)&g0::tensor_dimension55, 27648, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant55))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 0), (TfLiteIntArray*)&g0::tensor_dimension56, 30000, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant56))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 30000), (TfLiteIntArray*)&g0::tensor_dimension57, 6912, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant57))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 36912), (TfLiteIntArray*)&g0::tensor_dimension58, 2304, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant58))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 13824), (TfLiteIntArray*)&g0::tensor_dimension59, 13824, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant59))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 0), (TfLiteIntArray*)&g0::tensor_dimension60, 13824, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant60))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 13824), (TfLiteIntArray*)&g0::tensor_dimension61, 2304, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant61))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 27648), (TfLiteIntArray*)&g0::tensor_dimension62, 2304, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant62))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 13824), (TfLiteIntArray*)&g0::tensor_dimension63, 13824, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant63))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 0), (TfLiteIntArray*)&g0::tensor_dimension64, 13824, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant64))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 16128), (TfLiteIntArray*)&g0::tensor_dimension65, 2304, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant65))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 13824), (TfLiteIntArray*)&g0::tensor_dimension66, 2304, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant66))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 0), (TfLiteIntArray*)&g0::tensor_dimension67, 13824, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant67))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 13824), (TfLiteIntArray*)&g0::tensor_dimension68, 4608, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant68))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 1584), (TfLiteIntArray*)&g0::tensor_dimension69, 1584, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant69))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 0), (TfLiteIntArray*)&g0::tensor_dimension70, 1584, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant70))}, },
};

#ifndef TF_LITE_STATIC_MEMORY
TfLiteNode tflNodes[27] = {
{ (TfLiteIntArray*)&g0::inputs0, (TfLiteIntArray*)&g0::outputs0, (TfLiteIntArray*)&g0::inputs0, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata0)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs1, (TfLiteIntArray*)&g0::outputs1, (TfLiteIntArray*)&g0::inputs1, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata1)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs2, (TfLiteIntArray*)&g0::outputs2, (TfLiteIntArray*)&g0::inputs2, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata2)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs3, (TfLiteIntArray*)&g0::outputs3, (TfLiteIntArray*)&g0::inputs3, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata3)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs4, (TfLiteIntArray*)&g0::outputs4, (TfLiteIntArray*)&g0::inputs4, nullptr, nullptr, nullptr, nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs5, (TfLiteIntArray*)&g0::outputs5, (TfLiteIntArray*)&g0::inputs5, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata5)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs6, (TfLiteIntArray*)&g0::outputs6, (TfLiteIntArray*)&g0::inputs6, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata6)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs7, (TfLiteIntArray*)&g0::outputs7, (TfLiteIntArray*)&g0::inputs7, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata7)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs8, (TfLiteIntArray*)&g0::outputs8, (TfLiteIntArray*)&g0::inputs8, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata8)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs9, (TfLiteIntArray*)&g0::outputs9, (TfLiteIntArray*)&g0::inputs9, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata9)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs10, (TfLiteIntArray*)&g0::outputs10, (TfLiteIntArray*)&g0::inputs10, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata10)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs11, (TfLiteIntArray*)&g0::outputs11, (TfLiteIntArray*)&g0::inputs11, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata11)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs12, (TfLiteIntArray*)&g0::outputs12, (TfLiteIntArray*)&g0::inputs12, nullptr, nullptr, nullptr, nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs13, (TfLiteIntArray*)&g0::outputs13, (TfLiteIntArray*)&g0::inputs13, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata13)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs14, (TfLiteIntArray*)&g0::outputs14, (TfLiteIntArray*)&g0::inputs14, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata14)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs15, (TfLiteIntArray*)&g0::outputs15, (TfLiteIntArray*)&g0::inputs15, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata15)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs16, (TfLiteIntArray*)&g0::outputs16, (TfLiteIntArray*)&g0::inputs16, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata16)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs17, (TfLiteIntArray*)&g0::outputs17, (TfLiteIntArray*)&g0::inputs17, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata17)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs18, (TfLiteIntArray*)&g0::outputs18, (TfLiteIntArray*)&g0::inputs18, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata18)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs19, (TfLiteIntArray*)&g0::outputs19, (TfLiteIntArray*)&g0::inputs19, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata19)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs20, (TfLiteIntArray*)&g0::outputs20, (TfLiteIntArray*)&g0::inputs20, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata20)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs21, (TfLiteIntArray*)&g0::outputs21, (TfLiteIntArray*)&g0::inputs21, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata21)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs22, (TfLiteIntArray*)&g0::outputs22, (TfLiteIntArray*)&g0::inputs22, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata22)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs23, (TfLiteIntArray*)&g0::outputs23, (TfLiteIntArray*)&g0::inputs23, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata23)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs24, (TfLiteIntArray*)&g0::outputs24, (TfLiteIntArray*)&g0::inputs24, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata24)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs25, (TfLiteIntArray*)&g0::outputs25, (TfLiteIntArray*)&g0::inputs25, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata25)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs26, (TfLiteIntArray*)&g0::outputs26, (TfLiteIntArray*)&g0::inputs26, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata26)), nullptr, 0, },
};
#else
TfLiteNode tflNodes[27] = {
{ (TfLiteIntArray*)&g0::inputs0, (TfLiteIntArray*)&g0::outputs0, (TfLiteIntArray*)&g0::inputs0, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata0)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs1, (TfLiteIntArray*)&g0::outputs1, (TfLiteIntArray*)&g0::inputs1, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata1)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs2, (TfLiteIntArray*)&g0::outputs2, (TfLiteIntArray*)&g0::inputs2, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata2)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs3, (TfLiteIntArray*)&g0::outputs3, (TfLiteIntArray*)&g0::inputs3, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata3)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs4, (TfLiteIntArray*)&g0::outputs4, (TfLiteIntArray*)&g0::inputs4, nullptr, nullptr, nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs5, (TfLiteIntArray*)&g0::outputs5, (TfLiteIntArray*)&g0::inputs5, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata5)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs6, (TfLiteIntArray*)&g0::outputs6, (TfLiteIntArray*)&g0::inputs6, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata6)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs7, (TfLiteIntArray*)&g0::outputs7, (TfLiteIntArray*)&g0::inputs7, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata7)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs8, (TfLiteIntArray*)&g0::outputs8, (TfLiteIntArray*)&g0::inputs8, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata8)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs9, (TfLiteIntArray*)&g0::outputs9, (TfLiteIntArray*)&g0::inputs9, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata9)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs10, (TfLiteIntArray*)&g0::outputs10, (TfLiteIntArray*)&g0::inputs10, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata10)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs11, (TfLiteIntArray*)&g0::outputs11, (TfLiteIntArray*)&g0::inputs11, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata11)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs12, (TfLiteIntArray*)&g0::outputs12, (TfLiteIntArray*)&g0::inputs12, nullptr, nullptr, nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs13, (TfLiteIntArray*)&g0::outputs13, (TfLiteIntArray*)&g0::inputs13, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata13)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs14, (TfLiteIntArray*)&g0::outputs14, (TfLiteIntArray*)&g0::inputs14, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata14)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs15, (TfLiteIntArray*)&g0::outputs15, (TfLiteIntArray*)&g0::inputs15, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata15)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs16, (TfLiteIntArray*)&g0::outputs16, (TfLiteIntArray*)&g0::inputs16, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata16)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs17, (TfLiteIntArray*)&g0::outputs17, (TfLiteIntArray*)&g0::inputs17, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata17)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs18, (TfLiteIntArray*)&g0::outputs18, (TfLiteIntArray*)&g0::inputs18, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata18)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs19, (TfLiteIntArray*)&g0::outputs19, (TfLiteIntArray*)&g0::inputs19, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata19)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs20, (TfLiteIntArray*)&g0::outputs20, (TfLiteIntArray*)&g0::inputs20, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata20)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs21, (TfLiteIntArray*)&g0::outputs21, (TfLiteIntArray*)&g0::inputs21, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata21)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs22, (TfLiteIntArray*)&g0::outputs22, (TfLiteIntArray*)&g0::inputs22, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata22)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs23, (TfLiteIntArray*)&g0::outputs23, (TfLiteIntArray*)&g0::inputs23, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata23)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs24, (TfLiteIntArray*)&g0::outputs24, (TfLiteIntArray*)&g0::inputs24, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata24)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs25, (TfLiteIntArray*)&g0::outputs25, (TfLiteIntArray*)&g0::inputs25, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata25)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs26, (TfLiteIntArray*)&g0::outputs26, (TfLiteIntArray*)&g0::inputs26, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata26)), nullptr, 0, },
};
#endif

used_operators_e used_ops[] =
{OP_CONV_2D, OP_DEPTHWISE_CONV_2D, OP_CONV_2D, OP_CONV_2D, OP_PAD, OP_DEPTHWISE_CONV_2D, OP_CONV_2D, OP_CONV_2D, OP_DEPTHWISE_CONV_2D, OP_CONV_2D, OP_ADD, OP_CONV_2D, OP_PAD, OP_DEPTHWISE_CONV_2D, OP_CONV_2D, OP_CONV_2D, OP_DEPTHWISE_CONV_2D, OP_CONV_2D, OP_ADD, OP_CONV_2D, OP_DEPTHWISE_CONV_2D, OP_CONV_2D, OP_ADD, OP_CONV_2D, OP_CONV_2D, OP_CONV_2D, OP_SOFTMAX, };


// Indices into tflTensors and tflNodes for subgraphs
const size_t tflTensors_subgraph_index[] = {0, 71, };
const size_t tflNodes_subgraph_index[] = {0, 27, };

// Input/output tensors
static const int in_tensor_indices[] = {
  0, 
};

static const int out_tensor_indices[] = {
  70, 
};


size_t current_subgraph_index = 0;

static void init_tflite_tensor(size_t i, TfLiteTensor *tensor) {
  tensor->type = tensorData[i].type;
  tensor->is_variable = false;

#if defined(EI_CLASSIFIER_ALLOCATION_HEAP)
  tensor->allocation_type = tensorData[i].allocation_type;
#else
  tensor->allocation_type = (tensor_arena <= tensorData[i].data && tensorData[i].data < tensor_arena + kTensorArenaSize) ? kTfLiteArenaRw : kTfLiteMmapRo;
#endif
  tensor->bytes = tensorData[i].bytes;
  tensor->dims = tensorData[i].dims;

#if defined(EI_CLASSIFIER_ALLOCATION_HEAP)
  if(tensor->allocation_type == kTfLiteArenaRw){
    uint8_t* start = (uint8_t*) ((uintptr_t)tensorData[i].data + (uintptr_t) tensor_arena);

    tensor->data.data =  start;
  }
  else {
      tensor->data.data = tensorData[i].data;
  }
#else
  tensor->data.data = tensorData[i].data;
#endif // EI_CLASSIFIER_ALLOCATION_HEAP
  tensor->quantization = tensorData[i].quantization;
  if (tensor->quantization.type == kTfLiteAffineQuantization) {
    TfLiteAffineQuantization const* quant = ((TfLiteAffineQuantization const*)(tensorData[i].quantization.params));
    tensor->params.scale = quant->scale->data[0];
    tensor->params.zero_point = quant->zero_point->data[0];
  }

}

static void init_tflite_eval_tensor(int i, TfLiteEvalTensor *tensor) {

  tensor->type = tensorData[i].type;

  tensor->dims = tensorData[i].dims;

#if defined(EI_CLASSIFIER_ALLOCATION_HEAP)
  auto allocation_type = tensorData[i].allocation_type;
  if(allocation_type == kTfLiteArenaRw) {
    uint8_t* start = (uint8_t*) ((uintptr_t)tensorData[i].data + (uintptr_t) tensor_arena);

    tensor->data.data =  start;
  }
  else {
    tensor->data.data = tensorData[i].data;
  }
#else
  tensor->data.data = tensorData[i].data;
#endif // EI_CLASSIFIER_ALLOCATION_HEAP
}

static void* overflow_buffers[EI_MAX_OVERFLOW_BUFFER_COUNT];
static size_t overflow_buffers_ix = 0;
static void * AllocatePersistentBufferImpl(struct TfLiteContext* ctx,
                                       size_t bytes) {
  void *ptr;
  uint32_t align_bytes = (bytes % 16) ? 16 - (bytes % 16) : 0;

  if (current_location - (bytes + align_bytes) < tensor_boundary) {
    if (overflow_buffers_ix > EI_MAX_OVERFLOW_BUFFER_COUNT - 1) {
      ei_printf("ERR: Failed to allocate persistent buffer of size %d, does not fit in tensor arena and reached EI_MAX_OVERFLOW_BUFFER_COUNT\n",
        (int)bytes);
      return NULL;
    }

    // OK, this will look super weird, but.... we have CMSIS-NN buffers which
    // we cannot calculate beforehand easily.
    ptr = ei_calloc(bytes, 1);
    if (ptr == NULL) {
      ei_printf("ERR: Failed to allocate persistent buffer of size %d\n", (int)bytes);
      return NULL;
    }
    overflow_buffers[overflow_buffers_ix++] = ptr;
    return ptr;
  }

  current_location -= bytes;

  // align to the left aligned boundary of 16 bytes
  current_location -= 15; // for alignment
  current_location += 16 - ((uintptr_t)(current_location) & 15);

  ptr = current_location;
  memset(ptr, 0, bytes);

  return ptr;
}

typedef struct {
  size_t bytes;
  void *ptr;
} scratch_buffer_t;

static scratch_buffer_t scratch_buffers[EI_MAX_SCRATCH_BUFFER_COUNT];
static size_t scratch_buffers_ix = 0;

static TfLiteStatus RequestScratchBufferInArenaImpl(struct TfLiteContext* ctx, size_t bytes,
                                                int* buffer_idx) {
  if (scratch_buffers_ix > EI_MAX_SCRATCH_BUFFER_COUNT - 1) {
    ei_printf("ERR: Failed to allocate scratch buffer of size %d, reached EI_MAX_SCRATCH_BUFFER_COUNT\n",
      (int)bytes);
    return kTfLiteError;
  }

  scratch_buffer_t b;
  b.bytes = bytes;

  b.ptr = AllocatePersistentBufferImpl(ctx, b.bytes);
  if (!b.ptr) {
    ei_printf("ERR: Failed to allocate scratch buffer of size %d\n",
      (int)bytes);
    return kTfLiteError;
  }

  scratch_buffers[scratch_buffers_ix] = b;
  *buffer_idx = scratch_buffers_ix;

  scratch_buffers_ix++;

  return kTfLiteOk;
}

static void* GetScratchBufferImpl(struct TfLiteContext* ctx, int buffer_idx) {
  if (buffer_idx > (int)scratch_buffers_ix) {
    return NULL;
  }
  return scratch_buffers[buffer_idx].ptr;
}

static const uint16_t TENSOR_IX_UNUSED = 0x7FFF;

static void ResetTensors() {
  for (size_t ix = 0; ix < MAX_TFL_TENSOR_COUNT; ix++) {
    tflTensors[ix].index = TENSOR_IX_UNUSED;
  }
  for (size_t ix = 0; ix < MAX_TFL_EVAL_COUNT; ix++) {
    tflEvalTensors[ix].index = TENSOR_IX_UNUSED;
  }
}

static TfLiteTensor* GetTensorImpl(const struct TfLiteContext* context,
                               int tensor_idx) {

  tensor_idx = tflTensors_subgraph_index[current_subgraph_index] + tensor_idx;

  for (size_t ix = 0; ix < MAX_TFL_TENSOR_COUNT; ix++) {
    // already used? OK!
    if (tflTensors[ix].index == tensor_idx) {
      return &tflTensors[ix].tensor;
    }
    // passed all the ones we've used, so end of the list?
    if (tflTensors[ix].index == TENSOR_IX_UNUSED) {
      // init the tensor
      init_tflite_tensor(tensor_idx, &tflTensors[ix].tensor);
      tflTensors[ix].index = tensor_idx;
      return &tflTensors[ix].tensor;
    }
  }

  ei_printf("ERR: GetTensor called beyond MAX_TFL_TENSOR_COUNT (%d)\n", MAX_TFL_TENSOR_COUNT);
  return nullptr;
}

static TfLiteEvalTensor* GetEvalTensorImpl(const struct TfLiteContext* context,
                                       int tensor_idx) {

  tensor_idx = tflTensors_subgraph_index[current_subgraph_index] + tensor_idx;

  for (size_t ix = 0; ix < MAX_TFL_EVAL_COUNT; ix++) {
    // already used? OK!
    if (tflEvalTensors[ix].index == tensor_idx) {
      return &tflEvalTensors[ix].tensor;
    }
    // passed all the ones we've used, so end of the list?
    if (tflEvalTensors[ix].index == TENSOR_IX_UNUSED) {
      // init the tensor
      init_tflite_eval_tensor(tensor_idx, &tflEvalTensors[ix].tensor);
      tflEvalTensors[ix].index = tensor_idx;
      return &tflEvalTensors[ix].tensor;
    }
  }

  ei_printf("ERR: GetTensor called beyond MAX_TFL_EVAL_COUNT (%d)\n", (int)MAX_TFL_EVAL_COUNT);
  return nullptr;
}

class EonMicroContext : public MicroContext {
 public:
 
  EonMicroContext(): MicroContext(nullptr, nullptr, nullptr) { }

  void* AllocatePersistentBuffer(size_t bytes) {
    return AllocatePersistentBufferImpl(nullptr, bytes);
  }

  TfLiteStatus RequestScratchBufferInArena(size_t bytes,
                                           int* buffer_index) {
  return RequestScratchBufferInArenaImpl(nullptr, bytes, buffer_index);
  }

  void* GetScratchBuffer(int buffer_index) {
    return GetScratchBufferImpl(nullptr, buffer_index);
  }
 
  TfLiteTensor* AllocateTempTfLiteTensor(int tensor_index) {
    return GetTensorImpl(nullptr, tensor_index);
  }

  void DeallocateTempTfLiteTensor(TfLiteTensor* tensor) {
    return;
  }

  bool IsAllTempTfLiteTensorDeallocated() {
    return true;
  }

  TfLiteEvalTensor* GetEvalTensor(int tensor_index) {
    return GetEvalTensorImpl(nullptr, tensor_index);
  }

};


} // namespace

TfLiteStatus tflite_learn_3_init( void*(*alloc_fnc)(size_t,size_t) ) {
#ifdef EI_CLASSIFIER_ALLOCATION_HEAP
  tensor_arena = (uint8_t*) alloc_fnc(16, kTensorArenaSize);
  if (!tensor_arena) {
    ei_printf("ERR: failed to allocate tensor arena\n");
    return kTfLiteError;
  }
#else
  memset(tensor_arena, 0, kTensorArenaSize);
#endif
  tensor_boundary = tensor_arena;
  current_location = tensor_arena + kTensorArenaSize;

  EonMicroContext micro_context_;
  
  // Set microcontext as the context ptr
  ctx.impl_ = static_cast<void*>(&micro_context_);
  // Setup tflitecontext functions
  ctx.AllocatePersistentBuffer = &AllocatePersistentBufferImpl;
  ctx.RequestScratchBufferInArena = &RequestScratchBufferInArenaImpl;
  ctx.GetScratchBuffer = &GetScratchBufferImpl;
  ctx.GetTensor = &GetTensorImpl;
  ctx.GetEvalTensor = &GetEvalTensorImpl;
  ctx.ReportError = &MicroContextReportOpError;

  ctx.tensors_size = 71;
  for (size_t i = 0; i < 71; ++i) {
    TfLiteTensor tensor;
    init_tflite_tensor(i, &tensor);
    if (tensor.allocation_type == kTfLiteArenaRw) {
      auto data_end_ptr = (uint8_t*)tensor.data.data + tensorData[i].bytes;
      if (data_end_ptr > tensor_boundary) {
        tensor_boundary = data_end_ptr;
      }
    }
  }

  if (tensor_boundary > current_location /* end of arena size */) {
    ei_printf("ERR: tensor arena is too small, does not fit model - even without scratch buffers\n");
    return kTfLiteError;
  }

  registrations[OP_CONV_2D] = Register_CONV_2D();
  registrations[OP_DEPTHWISE_CONV_2D] = Register_DEPTHWISE_CONV_2D();
  registrations[OP_PAD] = Register_PAD();
  registrations[OP_ADD] = Register_ADD();
  registrations[OP_SOFTMAX] = Register_SOFTMAX();

  for (size_t g = 0; g < 1; ++g) {
    current_subgraph_index = g;
    for(size_t i = tflNodes_subgraph_index[g]; i < tflNodes_subgraph_index[g+1]; ++i) {
      if (registrations[used_ops[i]].init) {
        tflNodes[i].user_data = registrations[used_ops[i]].init(&ctx, (const char*)tflNodes[i].builtin_data, 0);
      }
    }
  }
  current_subgraph_index = 0;

  for(size_t g = 0; g < 1; ++g) {
    current_subgraph_index = g;
    for(size_t i = tflNodes_subgraph_index[g]; i < tflNodes_subgraph_index[g+1]; ++i) {
      if (registrations[used_ops[i]].prepare) {
        ResetTensors();
        TfLiteStatus status = registrations[used_ops[i]].prepare(&ctx, &tflNodes[i]);
        if (status != kTfLiteOk) {
          return status;
        }
      }
    }
  }
  current_subgraph_index = 0;

  return kTfLiteOk;
}

TfLiteStatus tflite_learn_3_input(int index, TfLiteTensor *tensor) {
  init_tflite_tensor(in_tensor_indices[index], tensor);
  return kTfLiteOk;
}

TfLiteStatus tflite_learn_3_output(int index, TfLiteTensor *tensor) {
  init_tflite_tensor(out_tensor_indices[index], tensor);
  return kTfLiteOk;
}

TfLiteStatus tflite_learn_3_invoke() {
  for (size_t i = 0; i < 27; ++i) {
    ResetTensors();

    TfLiteStatus status = registrations[used_ops[i]].invoke(&ctx, &tflNodes[i]);

#if EI_CLASSIFIER_PRINT_STATE
    ei_printf("layer %lu\n", i);
    ei_printf("    inputs:\n");
    for (size_t ix = 0; ix < tflNodes[i].inputs->size; ix++) {
      auto d = tensorData[tflNodes[i].inputs->data[ix]];

      size_t data_ptr = (size_t)d.data;

      if (d.allocation_type == kTfLiteArenaRw) {
        data_ptr = (size_t)tensor_arena + data_ptr;
      }

      if (d.type == TfLiteType::kTfLiteInt8) {
        int8_t* data = (int8_t*)data_ptr;
        ei_printf("        %lu (%zu bytes, ptr=%p, alloc_type=%d, type=%d): ", ix, d.bytes, data, (int)d.allocation_type, (int)d.type);
        for (size_t jx = 0; jx < d.bytes; jx++) {
          ei_printf("%d ", data[jx]);
        }
      }
      else {
        float* data = (float*)data_ptr;
        ei_printf("        %lu (%zu bytes, ptr=%p, alloc_type=%d, type=%d): ", ix, d.bytes, data, (int)d.allocation_type, (int)d.type);
        for (size_t jx = 0; jx < d.bytes / 4; jx++) {
          ei_printf("%f ", data[jx]);
        }
      }
      ei_printf("\n");
    }
    ei_printf("\n");

    ei_printf("    outputs:\n");
    for (size_t ix = 0; ix < tflNodes[i].outputs->size; ix++) {
      auto d = tensorData[tflNodes[i].outputs->data[ix]];

      size_t data_ptr = (size_t)d.data;

      if (d.allocation_type == kTfLiteArenaRw) {
        data_ptr = (size_t)tensor_arena + data_ptr;
      }

      if (d.type == TfLiteType::kTfLiteInt8) {
        int8_t* data = (int8_t*)data_ptr;
        ei_printf("        %lu (%zu bytes, ptr=%p, alloc_type=%d, type=%d): ", ix, d.bytes, data, (int)d.allocation_type, (int)d.type);
        for (size_t jx = 0; jx < d.bytes; jx++) {
          ei_printf("%d ", data[jx]);
        }
      }
      else {
        float* data = (float*)data_ptr;
        ei_printf("        %lu (%zu bytes, ptr=%p, alloc_type=%d, type=%d): ", ix, d.bytes, data, (int)d.allocation_type, (int)d.type);
        for (size_t jx = 0; jx < d.bytes / 4; jx++) {
          ei_printf("%f ", data[jx]);
        }
      }
      ei_printf("\n");
    }
    ei_printf("\n");
#endif // EI_CLASSIFIER_PRINT_STATE

    if (status != kTfLiteOk) {
      return status;
    }
  }
  return kTfLiteOk;
}

TfLiteStatus tflite_learn_3_reset( void (*free_fnc)(void* ptr) ) {
#ifdef EI_CLASSIFIER_ALLOCATION_HEAP
  free_fnc(tensor_arena);
#endif

  // scratch buffers are allocated within the arena, so just reset the counter so memory can be reused
  scratch_buffers_ix = 0;

  // overflow buffers are on the heap, so free them first
  for (size_t ix = 0; ix < overflow_buffers_ix; ix++) {
    ei_free(overflow_buffers[ix]);
  }
  overflow_buffers_ix = 0;
  return kTfLiteOk;
}
